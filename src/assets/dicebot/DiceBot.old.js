/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_accessor', '$attr_reader', '$gameName', '$gameType', '$prefixs', '$getHelpMessage', '$rand', '$check_suc', '$roll', '$marshalSignOfInequality', '$unlimitedRollDiceType', '$getD66Value', '$rollDiceAddingUp', '$parren_killer', '$debug', '$isGetOriginalMessage', '$getOriginalMessage', '$join', '$=~', '$new', '$removeDiceCommandMessage', '$rollDiceCommandCatched', '$nil?', '$empty?', '$!=', '$sub', '$rollDiceCommand', '$to_s', '$get_table_by_nD6', '$get_table_by_nDx', '$getTableValue', '$[]', '$-', '$/', '$getD66', '$bcdice', '$get_table_by_number', '$+', '$*', '$getDiceListFromDiceText', '$collect', '$to_i', '$split', '$each', '$>=', '$kind_of?', '$call', '$select', '$public_methods', '$send']);
  return (function($base, $super) {
    function $DiceBot(){};
    var self = $DiceBot = $klass($base, $super, 'DiceBot', $DiceBot);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49, TMP_50, TMP_51, TMP_52, TMP_53, TMP_54, TMP_56, TMP_58, TMP_59, TMP_62;

    def.gameType = def.sortType = def.diceText = nil;
    (Opal.cvars['@@bcdice'] = nil);

    (Opal.cvars['@@DEFAULT_SEND_MODE'] = 2);

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, self = this;

      self.sendMode = (($a = Opal.cvars['@@DEFAULT_SEND_MODE']) == null ? nil : $a);
      self.sortType = 0;
      self.sameDiceRerollCount = 0;
      self.sameDiceRerollType = 0;
      self.d66Type = 1;
      self.isPrintMaxDice = false;
      self.upplerRollThreshold = 0;
      self.unlimitedRollDiceType = 0;
      self.rerollNumber = 0;
      self.defaultSuccessTarget = "";
      self.rerollLimitCount = 10000;
      self.fractionType = "omit";
      return self.gameType = "DiceBot";
    }, TMP_1.$$arity = 0);

    self.$attr_accessor("rerollLimitCount");

    self.$attr_reader("sendMode", "sameDiceRerollCount", "sameDiceRerollType", "d66Type");

    self.$attr_reader("isPrintMaxDice", "upplerRollThreshold", "unlimitedRollDiceType");

    self.$attr_reader("defaultSuccessTarget", "rerollNumber", "fractionType");

    Opal.defn(self, '$postSet', TMP_2 = function $$postSet() {
      var self = this;

      return nil;
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$info', TMP_3 = function $$info() {
      var self = this;

      return $hash2(["name", "gameType", "prefixs", "info"], {"name": self.$gameName(), "gameType": self.$gameType(), "prefixs": self.$prefixs(), "info": self.$getHelpMessage()});
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_4 = function $$gameName() {
      var self = this;

      return self.$gameType();
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$prefixs', TMP_5 = function $$prefixs() {
      var self = this;

      return [];
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_6 = function $$gameType() {
      var self = this;

      return self.gameType;
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$setGameType', TMP_7 = function $$setGameType(type) {
      var self = this;

      return self.gameType = type;
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$setSendMode', TMP_8 = function $$setSendMode(m) {
      var self = this;

      return self.sendMode = m;
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$upplerRollThreshold=', TMP_9 = function(v) {
      var self = this;

      return self.upplerRollThreshold = v;
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$bcdice=', TMP_10 = function(b) {
      var self = this;

      return (Opal.cvars['@@bcdice'] = b);
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$bcdice', TMP_11 = function $$bcdice() {
      var $a, self = this;

      return (($a = Opal.cvars['@@bcdice']) == null ? nil : $a);
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$rand', TMP_12 = function $$rand(max) {
      var $a, self = this;

      return (($a = Opal.cvars['@@bcdice']) == null ? nil : $a).$rand(max);
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$check_suc', TMP_13 = function $$check_suc($a_rest) {
      var $b, $c, self = this, params;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      params = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        params[$arg_idx - 0] = arguments[$arg_idx];
      }
      return ($b = (($c = Opal.cvars['@@bcdice']) == null ? nil : $c)).$check_suc.apply($b, Opal.to_a(params));
    }, TMP_13.$$arity = -1);

    Opal.defn(self, '$roll', TMP_14 = function $$roll($a_rest) {
      var $b, $c, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return ($b = (($c = Opal.cvars['@@bcdice']) == null ? nil : $c)).$roll.apply($b, Opal.to_a(args));
    }, TMP_14.$$arity = -1);

    Opal.defn(self, '$marshalSignOfInequality', TMP_15 = function $$marshalSignOfInequality($a_rest) {
      var $b, $c, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return ($b = (($c = Opal.cvars['@@bcdice']) == null ? nil : $c)).$marshalSignOfInequality.apply($b, Opal.to_a(args));
    }, TMP_15.$$arity = -1);

    Opal.defn(self, '$unlimitedRollDiceType', TMP_16 = function $$unlimitedRollDiceType() {
      var $a, self = this;

      return (($a = Opal.cvars['@@bcdice']) == null ? nil : $a).$unlimitedRollDiceType();
    }, TMP_16.$$arity = 0);

    Opal.defn(self, '$sortType', TMP_17 = function $$sortType() {
      var self = this;

      return self.sortType;
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$setSortType', TMP_18 = function $$setSortType(s) {
      var self = this;

      return self.sortType = s;
    }, TMP_18.$$arity = 1);

    Opal.defn(self, '$d66', TMP_19 = function $$d66($a_rest) {
      var $b, $c, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return ($b = (($c = Opal.cvars['@@bcdice']) == null ? nil : $c)).$getD66Value.apply($b, Opal.to_a(args));
    }, TMP_19.$$arity = -1);

    Opal.defn(self, '$rollDiceAddingUp', TMP_20 = function $$rollDiceAddingUp($a_rest) {
      var $b, $c, self = this, arg;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      arg = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        arg[$arg_idx - 0] = arguments[$arg_idx];
      }
      return ($b = (($c = Opal.cvars['@@bcdice']) == null ? nil : $c)).$rollDiceAddingUp.apply($b, Opal.to_a(arg));
    }, TMP_20.$$arity = -1);

    Opal.defn(self, '$getHelpMessage', TMP_21 = function $$getHelpMessage() {
      var self = this;

      return "";
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$parren_killer', TMP_22 = function $$parren_killer(string) {
      var $a, self = this;

      return (($a = Opal.cvars['@@bcdice']) == null ? nil : $a).$parren_killer(string);
    }, TMP_22.$$arity = 1);

    Opal.defn(self, '$changeText', TMP_23 = function $$changeText(string) {
      var self = this;

      self.$debug("DiceBot.parren_killer_add called");
      return string;
    }, TMP_23.$$arity = 1);

    Opal.defn(self, '$dice_command', TMP_24 = function $$dice_command(string, nick_e) {
      var $a, $b, self = this, secret_flg = nil, prefixsRegText = nil, pattern = nil, secretMarker = nil, command = nil, output_msg = nil;

      if ((($a = (self.$isGetOriginalMessage())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        string = (($a = Opal.cvars['@@bcdice']) == null ? nil : $a).$getOriginalMessage()};
      self.$debug("dice_command Begin string", string);
      secret_flg = false;
      prefixsRegText = self.$prefixs().$join("|");
      pattern = "(^|\\s)(S)?(" + (prefixsRegText) + ")(\\s|$)";
      if ((($a = ($scope.get('Regexp').$new(pattern, (($scope.get('Regexp')).$$scope.get('IGNORECASE')))['$=~'](string))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$debug("not match in prefixs");
        return ["1", secret_flg];
      };
      secretMarker = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2));
      command = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3));
      command = self.$removeDiceCommandMessage(command);
      self.$debug("dicebot after command", command);
      self.$debug("match");
      $b = self.$rollDiceCommandCatched(command), $a = Opal.to_ary($b), output_msg = ($a[0] == null ? nil : $a[0]), secret_flg = ($a[1] == null ? nil : $a[1]), $b;
      if ((($a = (((($b = output_msg['$nil?']()) !== false && $b !== nil && $b != null) ? $b : output_msg['$empty?']()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output_msg = "1"};
      ((($a = secret_flg) !== false && $a !== nil && $a != null) ? $a : secret_flg = false);
      if ((($a = (output_msg['$!=']("1"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output_msg = "" + (nick_e) + ": " + (output_msg)};
      if ((($a = (secretMarker)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = (output_msg['$!=']("1"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          secret_flg = true}};
      return [output_msg, secret_flg];
    }, TMP_24.$$arity = 2);

    Opal.defn(self, '$isGetOriginalMessage', TMP_25 = function $$isGetOriginalMessage() {
      var self = this;

      return false;
    }, TMP_25.$$arity = 0);

    Opal.defn(self, '$removeDiceCommandMessage', TMP_26 = function $$removeDiceCommandMessage(command) {
      var self = this;

      return command.$sub(/[\s　].+/, "");
    }, TMP_26.$$arity = 1);

    Opal.defn(self, '$rollDiceCommandCatched', TMP_27 = function $$rollDiceCommandCatched(command) {
      var $a, $b, self = this, result = nil, secret_flg = nil, e = nil;
      if ($gvars["@"] == null) $gvars["@"] = nil;

      result = nil;
      try {
        self.$debug("call rollDiceCommand command", command);
        $b = self.$rollDiceCommand(command), $a = Opal.to_ary($b), result = ($a[0] == null ? nil : $a[0]), secret_flg = ($a[1] == null ? nil : $a[1]), $b;
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('StandardError')])) {e = $err;
          try {
            self.$debug("executeCommand exception", e.$to_s(), $gvars["@"].$join("\n"))
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
      self.$debug("rollDiceCommand result", result);
      return [result, secret_flg];
    }, TMP_27.$$arity = 1);

    Opal.defn(self, '$rollDiceCommand', TMP_28 = function $$rollDiceCommand(command) {
      var self = this;

      return nil;
    }, TMP_28.$$arity = 1);

    Opal.defn(self, '$setDiceText', TMP_29 = function $$setDiceText(diceText) {
      var self = this;

      self.$debug("setDiceText diceText", diceText);
      return self.diceText = diceText;
    }, TMP_29.$$arity = 1);

    Opal.defn(self, '$setDiffText', TMP_30 = function $$setDiffText(diffText) {
      var self = this;

      return self.diffText = diffText;
    }, TMP_30.$$arity = 1);

    Opal.defn(self, '$dice_command_xRn', TMP_31 = function $$dice_command_xRn(string, nick_e) {
      var self = this;

      return "";
    }, TMP_31.$$arity = 2);

    Opal.defn(self, '$check_2D6', TMP_32 = function $$check_2D6(total_n, dice_n, signOfInequality, diff, dice_cnt, dice_max, n1, n_max) {
      var self = this;

      return "";
    }, TMP_32.$$arity = 8);

    Opal.defn(self, '$check_nD6', TMP_33 = function $$check_nD6(total_n, dice_n, signOfInequality, diff, dice_cnt, dice_max, n1, n_max) {
      var self = this;

      return "";
    }, TMP_33.$$arity = 8);

    Opal.defn(self, '$check_nD10', TMP_34 = function $$check_nD10(total_n, dice_n, signOfInequality, diff, dice_cnt, dice_max, n1, n_max) {
      var self = this;

      return "";
    }, TMP_34.$$arity = 8);

    Opal.defn(self, '$check_1D100', TMP_35 = function $$check_1D100(total_n, dice_n, signOfInequality, diff, dice_cnt, dice_max, n1, n_max) {
      var self = this;

      return "";
    }, TMP_35.$$arity = 8);

    Opal.defn(self, '$check_1D20', TMP_36 = function $$check_1D20(total_n, dice_n, signOfInequality, diff, dice_cnt, dice_max, n1, n_max) {
      var self = this;

      return "";
    }, TMP_36.$$arity = 8);

    Opal.defn(self, '$get_table_by_2d6', TMP_37 = function $$get_table_by_2d6(table) {
      var self = this;

      return self.$get_table_by_nD6(table, 2);
    }, TMP_37.$$arity = 1);

    Opal.defn(self, '$get_table_by_1d6', TMP_38 = function $$get_table_by_1d6(table) {
      var self = this;

      return self.$get_table_by_nD6(table, 1);
    }, TMP_38.$$arity = 1);

    Opal.defn(self, '$get_table_by_nD6', TMP_39 = function $$get_table_by_nD6(table, count) {
      var self = this;

      return self.$get_table_by_nDx(table, count, 6);
    }, TMP_39.$$arity = 2);

    Opal.defn(self, '$get_table_by_nDx', TMP_40 = function $$get_table_by_nDx(table, count, diceType) {
      var $a, $b, self = this, num = nil, text = nil;

      $b = self.$roll(count, diceType), $a = Opal.to_ary($b), num = ($a[0] == null ? nil : $a[0]), $b;
      text = self.$getTableValue(table['$[]']($rb_minus(num, count)));
      if ((($a = (text['$nil?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ["1", 0]};
      return [text, num];
    }, TMP_40.$$arity = 3);

    Opal.defn(self, '$get_table_by_1d3', TMP_41 = function $$get_table_by_1d3(table) {
      var $a, $b, self = this, count = nil, num = nil, index = nil, text = nil;

      self.$debug("get_table_by_1d3");
      count = 1;
      $b = self.$roll(count, 6), $a = Opal.to_ary($b), num = ($a[0] == null ? nil : $a[0]), $b;
      self.$debug("num", num);
      index = ($rb_divide(($rb_minus(num, 1)), 2));
      self.$debug("index", index);
      text = table['$[]'](index);
      if ((($a = (text['$nil?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ["1", 0]};
      return [text, num];
    }, TMP_41.$$arity = 1);

    Opal.defn(self, '$getD66', TMP_42 = function $$getD66(isSwap) {
      var self = this, number = nil;

      return number = self.$bcdice().$getD66(isSwap);
    }, TMP_42.$$arity = 1);

    Opal.defn(self, '$get_table_by_d66_swap', TMP_43 = function $$get_table_by_d66_swap(table) {
      var self = this, isSwap = nil, number = nil;

      isSwap = true;
      number = self.$bcdice().$getD66(isSwap);
      return [self.$get_table_by_number(number, table), number];
    }, TMP_43.$$arity = 1);

    Opal.defn(self, '$get_table_by_d66', TMP_44 = function $$get_table_by_d66(table) {
      var $a, $b, self = this, dice1 = nil, dummy = nil, dice2 = nil, num = nil, text = nil, indexText = nil;

      $b = self.$roll(1, 6), $a = Opal.to_ary($b), dice1 = ($a[0] == null ? nil : $a[0]), dummy = ($a[1] == null ? nil : $a[1]), $b;
      $b = self.$roll(1, 6), $a = Opal.to_ary($b), dice2 = ($a[0] == null ? nil : $a[0]), dummy = ($a[1] == null ? nil : $a[1]), $b;
      num = $rb_plus($rb_times(($rb_minus(dice1, 1)), 6), ($rb_minus(dice2, 1)));
      text = table['$[]'](num);
      indexText = "" + (dice1) + (dice2);
      if ((($a = (text['$nil?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ["1", indexText]};
      return [text, indexText];
    }, TMP_44.$$arity = 1);

    Opal.defn(self, '$getDiceRolledAdditionalText', TMP_45 = function $$getDiceRolledAdditionalText(n1, n_max, dice_max) {
      var self = this;

      return "";
    }, TMP_45.$$arity = 3);

    Opal.defn(self, '$getDiceRevision', TMP_46 = function $$getDiceRevision(n_max, dice_max, total_n) {
      var self = this;

      return ["", 0];
    }, TMP_46.$$arity = 3);

    Opal.defn(self, '$changeDiceValueByDiceText', TMP_47 = function $$changeDiceValueByDiceText(dice_now, dice_str, isCheckSuccess, dice_max) {
      var self = this;

      return dice_now;
    }, TMP_47.$$arity = 4);

    Opal.defn(self, '$setRatingTable', TMP_48 = function $$setRatingTable(nick_e, tnick, channel_to_list) {
      var self = this;

      return "1";
    }, TMP_48.$$arity = 3);

    Opal.defn(self, '$getJackUpValueOnAddRoll', TMP_49 = function $$getJackUpValueOnAddRoll(dice_n) {
      var self = this;

      return 0;
    }, TMP_49.$$arity = 1);

    Opal.defn(self, '$isD9', TMP_50 = function $$isD9() {
      var self = this;

      return false;
    }, TMP_50.$$arity = 0);

    Opal.defn(self, '$getGrichText', TMP_51 = function $$getGrichText(numberSpot1, dice_cnt_total, suc) {
      var self = this;

      return "";
    }, TMP_51.$$arity = 3);

    Opal.defn(self, '$check2dCritical', TMP_52 = function $$check2dCritical(critical, dice_new, dice_arry, loop_count) {
      var self = this;

      return nil;
    }, TMP_52.$$arity = 4);

    Opal.defn(self, '$is2dCritical', TMP_53 = function $$is2dCritical() {
      var self = this;

      return false;
    }, TMP_53.$$arity = 0);

    Opal.defn(self, '$getDiceList', TMP_54 = function $$getDiceList() {
      var self = this;

      return self.$getDiceListFromDiceText(self.diceText);
    }, TMP_54.$$arity = 0);

    Opal.defn(self, '$getDiceListFromDiceText', TMP_56 = function $$getDiceListFromDiceText(diceText) {
      var $a, $b, TMP_55, self = this, diceList = nil, diceString = nil;

      self.$debug("getDiceList diceText", diceText);
      diceList = [];
      if ((($a = (/\[([\d,]+)\]/['$=~'](diceText))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        diceText = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1))};
      if ((($a = (/([\d,]+)/['$=~'](diceText))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return diceList
      };
      diceString = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1));
      diceList = ($a = ($b = diceString.$split(/,/)).$collect, $a.$$p = (TMP_55 = function(i){var self = TMP_55.$$s || this;
if (i == null) i = nil;
      return i.$to_i()}, TMP_55.$$s = self, TMP_55.$$arity = 1, TMP_55), $a).call($b);
      self.$debug("diceList", diceList);
      return diceList;
    }, TMP_56.$$arity = 1);

    Opal.defn(self, '$get_table_by_number', TMP_58 = function $$get_table_by_number(index, table, default$) {try {

      var $a, $b, TMP_57, self = this;

      if (default$ == null) {
        default$ = "1";
      }
      ($a = ($b = table).$each, $a.$$p = (TMP_57 = function(item){var self = TMP_57.$$s || this, $c, number = nil;
if (item == null) item = nil;
      number = item['$[]'](0);
        if ((($c = ($rb_ge(number, index))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          Opal.ret(self.$getTableValue(item['$[]'](1)))
          } else {
          return nil
        };}, TMP_57.$$s = self, TMP_57.$$arity = 1, TMP_57), $a).call($b);
      return self.$getTableValue(default$);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_58.$$arity = -3);

    Opal.defn(self, '$getTableValue', TMP_59 = function $$getTableValue(data) {
      var $a, self = this;

      if ((($a = (data['$kind_of?']($scope.get('Proc')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return data.$call()};
      return data;
    }, TMP_59.$$arity = 1);

    return (Opal.defn(self, '$analyzeDiceCommandResultMethod', TMP_62 = function $$analyzeDiceCommandResultMethod(command) {try {

      var $a, $b, TMP_60, $c, TMP_61, self = this, methodList = nil;

      methodList = ($a = ($b = self.$public_methods()).$select, $a.$$p = (TMP_60 = function(method){var self = TMP_60.$$s || this;
if (method == null) method = nil;
      return method.$to_s()['$=~'](/^get.+DiceCommandResult$/)}, TMP_60.$$s = self, TMP_60.$$arity = 1, TMP_60), $a).call($b);
      ($a = ($c = methodList).$each, $a.$$p = (TMP_61 = function(method){var self = TMP_61.$$s || this, $d, result = nil;
if (method == null) method = nil;
      result = self.$send(method, command);
        if ((($d = result['$nil?']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return nil
          } else {
          Opal.ret(result)
        };}, TMP_61.$$s = self, TMP_61.$$arity = 1, TMP_61), $a).call($c);
      return nil;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_62.$$arity = 1), nil) && 'analyzeDiceCommandResultMethod';
  })($scope.base, null)
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
