/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$debug', '$gsub', '$new', '$const_get', '$to_s', '$===', '$downcase', '$map', '$to_proc', '$[]', '$raise', '$first', '$include?', '$each']);
  return (function($base, $super) {
    function $DiceBotLoader(){};
    var self = $DiceBotLoader = $klass($base, $super, 'DiceBotLoader', $DiceBotLoader);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_5;

    def.filenames = def.gameTitlePattern = def.diceBotClass = nil;
    Opal.defs(self, '$loadUnknownGame', TMP_1 = function $$loadUnknownGame(gameTitle) {
      var self = this, escapedGameTitle = nil, e = nil;

      self.$debug("loadUnknownGame gameTitle", gameTitle);
      escapedGameTitle = gameTitle.$gsub(/(\.\.|\/|:|-)/, "_");
      try {
        return $scope.get('Object').$const_get(gameTitle.$gsub(/[\.\/:-]/, "_")).$new()
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('LoadError'), $scope.get('StandardError')])) {e = $err;
          try {
            self.$debug("DiceBot load ERROR!!!", e.$to_s());
            return nil;
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
    }, TMP_1.$$arity = 1);

    Opal.defn(self, '$initialize', TMP_2 = function $$initialize(gameTitlePattern, options) {
      var $a, $b, self = this, $case = nil, defaultFilenames = nil;

      if (options == null) {
        options = $hash2([], {});
      }
      $case = gameTitlePattern;if ($scope.get('String')['$===']($case)) {self.gameTitlePattern = [gameTitlePattern.$downcase()]}else if ($scope.get('Array')['$===']($case)) {self.gameTitlePattern = ($a = ($b = gameTitlePattern).$map, $a.$$p = "downcase".$to_proc(), $a).call($b)}else if ($scope.get('Regexp')['$===']($case)) {if ((($a = options['$[]']("filenames")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "options[:filenames] is required when gameTitlePattern is a Regexp")
      };
      self.gameTitlePattern = gameTitlePattern;}else {self.$raise($scope.get('TypeError'), "gameTitlePattern must be a String or an Array<String> or a Regexp")};
      defaultFilenames = (function() {$case = gameTitlePattern;if ($scope.get('String')['$===']($case)) {return [gameTitlePattern]}else if ($scope.get('Array')['$===']($case)) {return [gameTitlePattern.$first()]}else if ($scope.get('Regexp')['$===']($case)) {return []}else { return nil }})();
      self.filenames = ((($a = options['$[]']("filenames")) !== false && $a !== nil && $a != null) ? $a : defaultFilenames);
      return self.diceBotClass = ((($a = options['$[]']("class")) !== false && $a !== nil && $a != null) ? $a : self.filenames.$first());
    }, TMP_2.$$arity = -2);

    Opal.defn(self, '$match?', TMP_3 = function(gameTitle) {
      var self = this, $case = nil;

      return (function() {$case = self.gameTitlePattern;if ($scope.get('Array')['$===']($case)) {return self.gameTitlePattern['$include?'](gameTitle.$downcase())}else if ($scope.get('Regexp')['$===']($case)) {return self.gameTitlePattern['$==='](gameTitle)}else { return nil }})();
    }, TMP_3.$$arity = 1);

    return (Opal.defn(self, '$loadDiceBot', TMP_5 = function $$loadDiceBot() {
      var $a, $b, TMP_4, self = this;

      ($a = ($b = self.filenames).$each, $a.$$p = (TMP_4 = function(filename){var self = TMP_4.$$s || this;
if (filename == null) filename = nil;
      return nil}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b);
      return $scope.get('Object').$const_get(self.diceBotClass).$new();
    }, TMP_5.$$arity = 0), nil) && 'loadDiceBot';
  })($scope.base, null)
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
Opal.loaded(["diceBot/DiceBotLoader"]);
/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$strip', '$empty?', '$find', '$match?', '$new']);
  self.$require("diceBot/DiceBotLoader");
  return (function($base, $super) {
    function $DiceBotLoaderList(){};
    var self = $DiceBotLoaderList = $klass($base, $super, 'DiceBotLoaderList', $DiceBotLoaderList);

    var def = self.$$proto, $scope = self.$$scope, TMP_2;

    Opal.defs(self, '$find', TMP_2 = function $$find(gameTitle) {
      var $a, $b, TMP_1, self = this, strippedTitle = nil;
      if (self.loaders == null) self.loaders = nil;

      strippedTitle = gameTitle.$strip();
      if ((($a = strippedTitle['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil};
      return ($a = ($b = self.loaders).$find, $a.$$p = (TMP_1 = function(loader){var self = TMP_1.$$s || this;
if (loader == null) loader = nil;
      return loader['$match?'](strippedTitle)}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);
    }, TMP_2.$$arity = 1);

    return self.loaders = [$scope.get('DiceBotLoader').$new(["Cthulhu", "COC"]), $scope.get('DiceBotLoader').$new(["Hieizan", "COCH"]), $scope.get('DiceBotLoader').$new(["Elric!", "EL"], $hash2(["filenames"], {"filenames": ["Elric"]})), $scope.get('DiceBotLoader').$new(["RuneQuest", "RQ"]), $scope.get('DiceBotLoader').$new(["Chill", "CH"]), $scope.get('DiceBotLoader').$new(["RoleMaster", "RM"]), $scope.get('DiceBotLoader').$new(["ShadowRun", "SR"]), $scope.get('DiceBotLoader').$new(["ShadowRun4", "SR4"]), $scope.get('DiceBotLoader').$new(["Pendragon", "PD"]), $scope.get('DiceBotLoader').$new(/\A(?:SwordWorld|SW)\s*2\.0\z/i, $hash2(["filenames", "class"], {"filenames": ["SwordWorld", "SwordWorld2_0"], "class": "SwordWorld2_0"})), $scope.get('DiceBotLoader').$new(["SwordWorld", "SW"]), $scope.get('DiceBotLoader').$new(["Arianrhod", "AR"]), $scope.get('DiceBotLoader').$new(/\A(?:Infinite\s*Fantasia|IF)\z/i, $hash2(["filenames"], {"filenames": ["InfiniteFantasia"]})), $scope.get('DiceBotLoader').$new("WARPS"), $scope.get('DiceBotLoader').$new(/\A(?:Demon\s*Parasite|DP)\z/i, $hash2(["filenames"], {"filenames": ["DemonParasite"]})), $scope.get('DiceBotLoader').$new(/\A(?:Parasite\s*Blood|PB)\z/i, $hash2(["filenames", "class"], {"filenames": ["DemonParasite", "ParasiteBlood"], "class": "ParasiteBlood"})), $scope.get('DiceBotLoader').$new(/\A(?:Gun\s*Dog|GD)\z/i, $hash2(["filenames"], {"filenames": ["Gundog"]})), $scope.get('DiceBotLoader').$new(/\A(?:Gun\s*Dog\s*Zero|GDZ)\z/i, $hash2(["filenames", "class"], {"filenames": ["Gundog", "GundogZero"], "class": "GundogZero"})), $scope.get('DiceBotLoader').$new(/\A(?:Tunnels\s*&\s*Trolls|TuT)\z/i, $hash2(["filenames"], {"filenames": ["TunnelsAndTrolls"]})), $scope.get('DiceBotLoader').$new(/\A(?:Nightmare\s*Hunter[=\s]*Deep|NHD)\z/i, $hash2(["filenames"], {"filenames": ["NightmareHunterDeep"]})), $scope.get('DiceBotLoader').$new(/\A(?:War\s*Hammer(FRP)?|WH)\z/i, $hash2(["filenames"], {"filenames": ["Warhammer"]})), $scope.get('DiceBotLoader').$new(/\A(?:Phantasm\s*Adventure|PA)\z/i, $hash2(["filenames"], {"filenames": ["PhantasmAdventure"]})), $scope.get('DiceBotLoader').$new(/\A(?:Chaos\s*Flare|CF)\z/i, $hash2(["filenames"], {"filenames": ["ChaosFlare"]})), $scope.get('DiceBotLoader').$new(/\A(?:Cthulhu\s*Tech|CT)\z/i, $hash2(["filenames"], {"filenames": ["CthulhuTech"]})), $scope.get('DiceBotLoader').$new(/\A(?:Tokumei\s*Tenkousei|ToT)\z/i, $hash2(["filenames"], {"filenames": ["TokumeiTenkousei"]})), $scope.get('DiceBotLoader').$new(/\A(?:Shinobi\s*Gami|SG)\z/i, $hash2(["filenames"], {"filenames": ["ShinobiGami"]})), $scope.get('DiceBotLoader').$new(/\A(?:Double\s*Cross|DX)\z/i, $hash2(["filenames"], {"filenames": ["DoubleCross"]})), $scope.get('DiceBotLoader').$new(/\A(?:Sata\s*Supe|SS)\z/i, $hash2(["filenames"], {"filenames": ["Satasupe"]})), $scope.get('DiceBotLoader').$new(/\A(?:Ars\s*Magica|AM)\z/i, $hash2(["filenames"], {"filenames": ["ArsMagica"]})), $scope.get('DiceBotLoader').$new(/\A(?:Dark\s*Blaze|DB)\z/i, $hash2(["filenames"], {"filenames": ["DarkBlaze"]})), $scope.get('DiceBotLoader').$new(/\A(?:Night\s*Wizard|NW)\z/i, $hash2(["filenames"], {"filenames": ["NightWizard"]})), $scope.get('DiceBotLoader').$new("TORG", $hash2(["filenames"], {"filenames": ["Torg"]})), $scope.get('DiceBotLoader').$new(/\ATORG1.5\z/i, $hash2(["filenames", "class"], {"filenames": ["Torg", "Torg1_5"], "class": "Torg1_5"})), $scope.get('DiceBotLoader').$new(/\A(?:hunters\s*moon|HM)\z/i, $hash2(["filenames"], {"filenames": ["HuntersMoon"]})), $scope.get('DiceBotLoader').$new(/\A(?:Blood\s*Crusade|BC)\z/i, $hash2(["filenames"], {"filenames": ["BloodCrusade"]})), $scope.get('DiceBotLoader').$new(/\A(?:Meikyu\s*Kingdom|MK)\z/i, $hash2(["filenames"], {"filenames": ["MeikyuKingdom"]})), $scope.get('DiceBotLoader').$new(/\A(?:Earth\s*Dawn|ED)\z/i, $hash2(["filenames"], {"filenames": ["EarthDawn"]})), $scope.get('DiceBotLoader').$new(/\A(?:(?:Earth\s*Dawn|ED)3)\z/i, $hash2(["filenames", "class"], {"filenames": ["EarthDawn", "EarthDawn3"], "class": "EarthDawn3"})), $scope.get('DiceBotLoader').$new(/\A(?:(?:Earth\s*Dawn|ED)4)\z/i, $hash2(["filenames", "class"], {"filenames": ["EarthDawn", "EarthDawn4"], "class": "EarthDawn4"})), $scope.get('DiceBotLoader').$new(/\A(?:Embryo\s*Machine|EM)\z/i, $hash2(["filenames"], {"filenames": ["EmbryoMachine"]})), $scope.get('DiceBotLoader').$new(/\A(?:Gehenna\s*An|GA)\z/i, $hash2(["filenames"], {"filenames": ["GehennaAn"]})), $scope.get('DiceBotLoader').$new(/\A(?:Magica\s*Logia|ML)\z/i, $hash2(["filenames"], {"filenames": ["MagicaLogia"]})), $scope.get('DiceBotLoader').$new(["Nechronica", "NC"]), $scope.get('DiceBotLoader').$new(/\A(?:Meikyu\s*Days|MD)\z/i, $hash2(["filenames"], {"filenames": ["MeikyuDays"]})), $scope.get('DiceBotLoader').$new(["Peekaboo", "PK"]), $scope.get('DiceBotLoader').$new(/\A(?:Barna\s*Kronika|BK)\z/i, $hash2(["filenames"], {"filenames": ["BarnaKronika"]})), $scope.get('DiceBotLoader').$new(["RokumonSekai2", "RS2"]), $scope.get('DiceBotLoader').$new(/\A(?:Monotone\s*Musium|MM)\z/i, $hash2(["filenames"], {"filenames": ["MonotoneMusium"]})), $scope.get('DiceBotLoader').$new(/\AZettai\s*Reido\z/i, $hash2(["filenames"], {"filenames": ["ZettaiReido"]})), $scope.get('DiceBotLoader').$new(/\AEclipse\s*Phase\z/i, $hash2(["filenames"], {"filenames": ["EclipsePhase"]})), $scope.get('DiceBotLoader').$new("NJSLYRBATTLE", $hash2(["filenames"], {"filenames": ["NjslyrBattle"]})), $scope.get('DiceBotLoader').$new(["ShinMegamiTenseiKakuseihen", "SMTKakuseihen"]), $scope.get('DiceBotLoader').$new("Ryutama"), $scope.get('DiceBotLoader').$new("CardRanker"), $scope.get('DiceBotLoader').$new("ShinkuuGakuen"), $scope.get('DiceBotLoader').$new("CrashWorld"), $scope.get('DiceBotLoader').$new("WitchQuest"), $scope.get('DiceBotLoader').$new("BattleTech"), $scope.get('DiceBotLoader').$new("Elysion"), $scope.get('DiceBotLoader').$new("GeishaGirlwithKatana"), $scope.get('DiceBotLoader').$new("GURPS", $hash2(["filenames"], {"filenames": ["Gurps"]})), $scope.get('DiceBotLoader').$new("GurpsFW"), $scope.get('DiceBotLoader').$new("FilledWith"), $scope.get('DiceBotLoader').$new("HarnMaster"), $scope.get('DiceBotLoader').$new("Insane"), $scope.get('DiceBotLoader').$new("KillDeathBusiness"), $scope.get('DiceBotLoader').$new("Kamigakari"), $scope.get('DiceBotLoader').$new("RecordOfSteam"), $scope.get('DiceBotLoader').$new("Oukahoushin3rd"), $scope.get('DiceBotLoader').$new("BeastBindTrinity"), $scope.get('DiceBotLoader').$new("BloodMoon"), $scope.get('DiceBotLoader').$new("Utakaze"), $scope.get('DiceBotLoader').$new("EndBreaker"), $scope.get('DiceBotLoader').$new("KanColle"), $scope.get('DiceBotLoader').$new("GranCrest"), $scope.get('DiceBotLoader').$new("HouraiGakuen"), $scope.get('DiceBotLoader').$new("TwilightGunsmoke"), $scope.get('DiceBotLoader').$new("Garako"), $scope.get('DiceBotLoader').$new("ShoujoTenrankai"), $scope.get('DiceBotLoader').$new("GardenOrder"), $scope.get('DiceBotLoader').$new("None", $hash2(["filenames", "class"], {"filenames": [], "class": "DiceBot"}))];
  })($scope.base, null);
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
