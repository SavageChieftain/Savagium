/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$setPrefixes', '$debug', '$gsub', '$checkRoll', '$=~', '$to_i', '$parren_killer', '$rokumon2_roll', '$rokumon2_suc_rank', '$!=', '$+', '$roll', '$abs', '$collect', '$split', '$times', '$<', '$shift', '$pop', '$each', '$>=', '$<=', '$==', '$[]']);
  return (function($base, $super) {
    function $RokumonSekai2(){};
    var self = $RokumonSekai2 = $klass($base, $super, 'RokumonSekai2', $RokumonSekai2);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_7, TMP_8, TMP_9, TMP_13, TMP_14;

    self.$setPrefixes(["\\d+RS"]);

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      self.sendMode = 2;
      return self.sortType = 1;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "六門世界2nd";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "RokumonSekai2";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "・判定\naRSm<=t\n能力値a,修正値m,目標値tで判定ロールを行います。\nRコマンド(3R6m<=t[a])に読み替えます。\n成功度、評価、ボーナスダイスを自動表示します。\n　例) 3RS+1<=9　3R6+1<=9[3]\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$changeText', TMP_7 = function $$changeText(string) {
      var $a, $b, TMP_5, $c, TMP_6, self = this;

      self.$debug("parren_killer_add begin stirng", string);
      string = ($a = ($b = string).$gsub, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $c;

      return "3R6" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](2))) + "<=" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](3))) + "[" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))) + "]"}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b, /(\d+)RS([\+\-][\+\-\d]+)<=(\d+)/i);
      string = ($a = ($c = string).$gsub, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $d;

      return "3R6<=" + ((($d = $gvars['~']) === nil ? nil : $d['$[]'](2))) + "[" + ((($d = $gvars['~']) === nil ? nil : $d['$[]'](1))) + "]"}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($c, /(\d+)RS<=(\d+)/i);
      self.$debug("parren_killer_add end stirng", string);
      return string;
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$dice_command_xRn', TMP_8 = function $$dice_command_xRn(string, nick_e) {
      var self = this;

      return self.$checkRoll(string, nick_e);
    }, TMP_8.$$arity = 2);

    Opal.defn(self, '$checkRoll', TMP_9 = function $$checkRoll(string, nick_e) {
      var $a, $b, self = this, output = nil, modText = nil, target = nil, abl = nil, mod = nil, dstr = nil, suc = nil, sum = nil;

      output = "1";
      if ((($a = (/3R6([\+\-\d]*)<=(\d+)\[(\d+)\]/i['$=~'](string))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return output
      };
      modText = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1));
      target = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$to_i();
      abl = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3)).$to_i();
      mod = 0;
      if ((($a = (modText)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        mod = self.$parren_killer("(0" + (modText) + ")").$to_i()};
      $b = self.$rokumon2_roll(mod, target, abl), $a = Opal.to_ary($b), dstr = ($a[0] == null ? nil : $a[0]), suc = ($a[1] == null ? nil : $a[1]), sum = ($a[2] == null ? nil : $a[2]), $b;
      output = "" + (sum) + "[" + (dstr) + "] ＞ " + (suc) + " ＞ 評価" + (self.$rokumon2_suc_rank(suc));
      if ((($a = (suc['$!='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = $rb_plus(output, "(+" + (suc) + "d6)")};
      output = "" + (nick_e) + ": (" + (string) + ") ＞ " + (output);
      return output;
    }, TMP_9.$$arity = 2);

    Opal.defn(self, '$rokumon2_roll', TMP_13 = function $$rokumon2_roll(mod, target, abl) {
      var $a, $b, TMP_10, $c, TMP_11, $d, TMP_12, self = this, suc = nil, _ = nil, dicestr = nil, dice = nil, cnt5 = nil, cnt2 = nil, sum = nil;

      suc = 0;
      $b = self.$roll($rb_plus(3, mod.$abs()), 6, 1), $a = Opal.to_ary($b), _ = ($a[0] == null ? nil : $a[0]), dicestr = ($a[1] == null ? nil : $a[1]), $b;
      dice = ($a = ($b = dicestr.$split(/,/)).$collect, $a.$$p = (TMP_10 = function(i){var self = TMP_10.$$s || this;
if (i == null) i = nil;
      return i.$to_i()}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($b);
      ($a = ($c = mod.$abs()).$times, $a.$$p = (TMP_11 = function(i){var self = TMP_11.$$s || this, $d;
if (i == null) i = nil;
      if ((($d = ($rb_lt(mod, 0))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return dice.$shift()
          } else {
          return dice.$pop()
        }}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($c);
      cnt5 = 0;
      cnt2 = 0;
      sum = 0;
      ($a = ($d = dice).$each, $a.$$p = (TMP_12 = function(die1){var self = TMP_12.$$s || this, $e;
if (die1 == null) die1 = nil;
      if ((($e = ($rb_ge(die1, 5))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
          cnt5 = $rb_plus(cnt5, 1)};
        if ((($e = ($rb_le(die1, 2))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
          cnt2 = $rb_plus(cnt2, 1)};
        if ((($e = ($rb_le(die1, abl))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
          suc = $rb_plus(suc, 1)};
        return sum = $rb_plus(sum, die1);}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $a).call($d);
      if ((($a = ($rb_lt(sum, target))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        suc = $rb_plus(suc, 2)
      } else if ((($a = (sum['$=='](target))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        suc = $rb_plus(suc, 1)};
      if ((($a = ($rb_ge(cnt5, 3))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        suc = 0};
      if ((($a = ($rb_ge(cnt2, 3))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        suc = 5};
      return [dicestr, suc, sum];
    }, TMP_13.$$arity = 3);

    return (Opal.defn(self, '$rokumon2_suc_rank', TMP_14 = function $$rokumon2_suc_rank(suc) {
      var self = this, suc_rank = nil;

      suc_rank = ["E", "D", "C", "B", "A", "S"];
      return suc_rank['$[]'](suc);
    }, TMP_14.$$arity = 1), nil) && 'rokumon2_suc_rank';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
