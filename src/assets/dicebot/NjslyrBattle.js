/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$!=', '$checkSuccess', '$getJuuten', '$+', '$<=', '$getDiceList', '$length', '$each', '$==', '$[]', '$>']);
  return (function($base, $super) {
    function $NjslyrBattle(){};
    var self = $NjslyrBattle = $klass($base, $super, 'NjslyrBattle', $NjslyrBattle);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_7;

    Opal.defn(self, '$gameName', TMP_1 = function $$gameName() {
      var self = this;

      return "NJSLYRBATTLE";
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_2 = function $$gameType() {
      var self = this;

      return "NJSLYRBATTLE";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_3 = function $$getHelpMessage() {
      var self = this;

      return "・カラテロール\n2d6<=(カラテ点)\n例）2d6<=5\n(2D6<=5) ＞ 2[1,1] ＞ 2 ＞ 成功 重点 3 溜まる\n";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$check_2D6', TMP_4 = function $$check_2D6(total_n, dice_n, signOfInequality, diff, dice_cnt, dice_max, n1, n_max) {
      var $a, self = this, success = nil, juuten = nil;

      if ((($a = (signOfInequality['$!=']("<="))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ""};
      success = self.$checkSuccess(total_n, diff);
      juuten = self.$getJuuten();
      return $rb_plus(success, juuten);
    }, TMP_4.$$arity = 8);

    Opal.defn(self, '$checkSuccess', TMP_5 = function $$checkSuccess(total_n, diff) {
      var $a, self = this;

      if ((($a = ($rb_le(total_n, diff))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ 成功"};
      return " ＞ 失敗";
    }, TMP_5.$$arity = 2);

    return (Opal.defn(self, '$getJuuten', TMP_7 = function $$getJuuten() {
      var $a, $b, TMP_6, self = this, diceList = nil, juuten = nil;

      diceList = self.$getDiceList();
      if ((($a = (diceList.$length()['$!='](2))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ""};
      juuten = 0;
      ($a = ($b = diceList).$each, $a.$$p = (TMP_6 = function(i){var self = TMP_6.$$s || this, $c;
if (i == null) i = nil;
      if ((($c = (i['$=='](1))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          juuten = $rb_plus(juuten, 1)};
        if ((($c = (i['$=='](6))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return juuten = $rb_plus(juuten, 1)
          } else {
          return nil
        };}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($b);
      if ((($a = (diceList['$[]'](0)['$=='](diceList['$[]'](1)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        juuten = $rb_plus(juuten, 1)};
      if ((($a = ($rb_gt(juuten, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " 重点 " + (juuten) + " 溜まる"};
      return "";
    }, TMP_7.$$arity = 0), nil) && 'getJuuten';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
