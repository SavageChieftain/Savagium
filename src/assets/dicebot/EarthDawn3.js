/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$setPrefixes', '$ed_step', '$getStepResult', '$=~', '$to_i', '$>', '$<', '$getStepTable', '$[]', '$-', '$===', '$+', '$debug', '$rollStep', '$!=', '$==', '$>=', '$empty?', '$times', '$roll']);
  return (function($base, $super) {
    function $EarthDawn(){};
    var self = $EarthDawn = $klass($base, $super, 'EarthDawn', $EarthDawn);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_10;

    def.isFailed = nil;
    self.$setPrefixes(["\\d+e.*"]);

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      self.sendMode = 2;
      return self.sortType = 1;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "アースドーン";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "EarthDawn";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "ステップダイス　(xEn+k)\nステップx、目標値n(省略可能）、カルマダイスk(D2-D20)でステップダイスをロールします。\n振り足しも自動。\n例）9E　10E8　10E+D12\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$rollDiceCommand', TMP_5 = function $$rollDiceCommand(command) {
      var self = this;

      return self.$ed_step(command);
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$ed_step', TMP_6 = function $$ed_step(str) {
      var self = this, output = nil;

      output = self.$getStepResult(str);
      return output;
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$getStepResult', TMP_7 = function $$getStepResult(str) {
      var $a, $b, self = this, stepTotal = nil, step2 = nil, step = nil, targetNumber = nil, hasKarmaDice = nil, karmaDiceCount = nil, karmaDiceType = nil, stable = nil, nmod = nil, d20step = nil, d12step = nil, d10step = nil, d8step = nil, d6step = nil, d4step = nil, $case = nil, string = nil, output = nil, excelentSuccessNumber = nil, superSuccessNumber = nil, goodSuccessNumber = nil, failedNumber = nil;

      if ((($a = (/(\d+)E(\d+)?(\+)?(\d+)?(d\d+)?/i['$=~'](str))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      stepTotal = 0;
      self.isFailed = true;
      step2 = 0;
      step = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$to_i();
      targetNumber = 0;
      hasKarmaDice = false;
      karmaDiceCount = 0;
      karmaDiceType = 0;
      if ((($a = ($rb_gt(step, 40))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        step2 = step;
        step = 40;};
      if ((($a = ((($b = $gvars['~']) === nil ? nil : $b['$[]'](2)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        targetNumber = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$to_i();
        if ((($a = ($rb_gt(targetNumber, 43))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          targetNumber = 42};};
      if ((($a = ((($b = $gvars['~']) === nil ? nil : $b['$[]'](3)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        hasKarmaDice = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3)).$to_i()};
      if ((($a = ((($b = $gvars['~']) === nil ? nil : $b['$[]'](4)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        karmaDiceCount = (($a = $gvars['~']) === nil ? nil : $a['$[]'](4)).$to_i()};
      if ((($a = ((($b = $gvars['~']) === nil ? nil : $b['$[]'](5)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        karmaDiceType = ((($a = $gvars['~']) === nil ? nil : $a['$[]'](5)))};
      if ((($a = ($rb_lt(targetNumber, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil};
      stable = self.$getStepTable();
      nmod = stable['$[]'](0)['$[]']($rb_minus(step, 1));
      d20step = stable['$[]'](1)['$[]']($rb_minus(step, 1));
      d12step = stable['$[]'](2)['$[]']($rb_minus(step, 1));
      d10step = stable['$[]'](3)['$[]']($rb_minus(step, 1));
      d8step = stable['$[]'](4)['$[]']($rb_minus(step, 1));
      d6step = stable['$[]'](5)['$[]']($rb_minus(step, 1));
      d4step = stable['$[]'](6)['$[]']($rb_minus(step, 1));
      if ((($a = (hasKarmaDice)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        $case = karmaDiceType;if (/d20/i['$===']($case)) {d20step = $rb_plus(d20step, karmaDiceCount)}else if (/d12/i['$===']($case)) {d12step = $rb_plus(d12step, karmaDiceCount)}else if (/d10/i['$===']($case)) {d10step = $rb_plus(d10step, karmaDiceCount)}else if (/d8/i['$===']($case)) {d8step = $rb_plus(d8step, karmaDiceCount)}else if (/d6/i['$===']($case)) {d6step = $rb_plus(d6step, karmaDiceCount)}else if (/d4/i['$===']($case)) {d4step = $rb_plus(d4step, karmaDiceCount)}else {nmod = $rb_plus(nmod, karmaDiceCount)}};
      string = "";
      self.$debug("d20step, d12step, d10step, d8step, d6step, d4step", d20step, d12step, d10step, d8step, d6step, d4step);
      stepTotal = $rb_plus(stepTotal, self.$rollStep(20, d20step, string));
      stepTotal = $rb_plus(stepTotal, self.$rollStep(12, d12step, string));
      stepTotal = $rb_plus(stepTotal, self.$rollStep(10, d10step, string));
      stepTotal = $rb_plus(stepTotal, self.$rollStep(8, d8step, string));
      stepTotal = $rb_plus(stepTotal, self.$rollStep(6, d6step, string));
      stepTotal = $rb_plus(stepTotal, self.$rollStep(4, d4step, string));
      if ((($a = ($rb_gt(nmod, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        string = $rb_plus(string, "+")};
      if ((($a = (nmod['$!='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        string = $rb_plus(string, "" + (nmod));
        stepTotal = $rb_plus(stepTotal, nmod);};
      string = $rb_plus(string, " ＞ " + (stepTotal));
      output = "ステップ" + (step) + " ＞ " + (string);
      if ((($a = (targetNumber['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return output};
      string = $rb_plus(string, " ＞ ");
      excelentSuccessNumber = stable['$[]'](7)['$[]']($rb_minus(targetNumber, 1));
      superSuccessNumber = stable['$[]'](8)['$[]']($rb_minus(targetNumber, 1));
      goodSuccessNumber = stable['$[]'](9)['$[]']($rb_minus(targetNumber, 1));
      failedNumber = stable['$[]'](11)['$[]']($rb_minus(targetNumber, 1));
      if ((($a = (self.isFailed)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        string = $rb_plus(string, "自動失敗")
      } else if ((($a = ($rb_ge(stepTotal, excelentSuccessNumber))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        string = $rb_plus(string, "最良成功")
      } else if ((($a = ($rb_ge(stepTotal, superSuccessNumber))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        string = $rb_plus(string, "優成功")
      } else if ((($a = ($rb_ge(stepTotal, goodSuccessNumber))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        string = $rb_plus(string, "良成功")
      } else if ((($a = ($rb_ge(stepTotal, targetNumber))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        string = $rb_plus(string, "成功")
      } else if ((($a = ($rb_lt(stepTotal, failedNumber))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        string = $rb_plus(string, "大失敗")
        } else {
        string = $rb_plus(string, "失敗")
      };
      output = "ステップ" + (step) + ">=" + (targetNumber) + " ＞ " + (string);
      return output;
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$getStepTable', TMP_8 = function $$getStepTable() {
      var self = this, mod = nil, d20 = nil, d12 = nil, d10 = nil, d8 = nil, d6 = nil, d4 = nil, exsuc = nil, ssuc = nil, gsuc = nil, nsuc = nil, fsuc = nil, stable = nil;

      mod = [-2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      d20 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      d12 = [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];
      d10 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 2, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 3, 2, 1, 1, 1, 2, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 2, 1];
      d8 = [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0];
      d6 = [0, 0, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 0];
      d4 = [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      exsuc = [6, 8, 10, 12, 14, 17, 19, 20, 22, 24, 25, 27, 29, 32, 33, 35, 37, 38, 39, 41, 42, 44, 45, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 65, 67, 68, 70, 71, 72];
      ssuc = [4, 6, 8, 10, 11, 13, 15, 16, 18, 19, 21, 22, 24, 26, 27, 29, 30, 32, 33, 34, 35, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62];
      gsuc = [2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54];
      nsuc = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42];
      fsuc = [0, 1, 1, 1, 1, 2, 2, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 11, 12, 13, 13, 14, 15, 16, 17, 18, 18, 18, 20, 21, 22, 23, 23, 24, 25, 26, 26, 27, 28, 29, 30];
      stable = [mod, d20, d12, d10, d8, d6, d4, exsuc, ssuc, gsuc, nsuc, fsuc];
      return stable;
    }, TMP_8.$$arity = 0);

    return (Opal.defn(self, '$rollStep', TMP_10 = function $$rollStep(diceType, diceCount, string) {
      var $a, $b, TMP_9, self = this, stepTotal = nil;

      self.$debug("rollStep diceType, diceCount, string", diceType, diceCount, string);
      stepTotal = 0;
      if ((($a = ($rb_gt(diceCount, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return stepTotal
      };
      if ((($a = (string['$empty?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        string = $rb_plus(string, "+")
      };
      string = $rb_plus(string, "" + (diceCount) + "d" + (diceType) + "[");
      self.$debug("rollStep string", string);
      ($a = ($b = diceCount).$times, $a.$$p = (TMP_9 = function(i){var self = TMP_9.$$s || this, $c, $d, $e, dice_now = nil, dummy = nil, dice_in = nil;
if (i == null) i = nil;
      $d = self.$roll(1, diceType), $c = Opal.to_ary($d), dice_now = ($c[0] == null ? nil : $c[0]), dummy = ($c[1] == null ? nil : $c[1]), $d;
        if ((($c = (dice_now['$!='](1))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          self.isFailed = false};
        dice_in = dice_now;
        while ((($d = (dice_now['$=='](diceType))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
        $e = self.$roll(1, diceType), $d = Opal.to_ary($e), dice_now = ($d[0] == null ? nil : $d[0]), dummy = ($d[1] == null ? nil : $d[1]), $e;
        dice_in = $rb_plus(dice_in, dice_now);};
        stepTotal = $rb_plus(stepTotal, dice_in);
        if ((($c = (i['$!='](0))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          string = $rb_plus(string, ",")};
        return string = $rb_plus(string, "" + (dice_in));}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($b);
      string = $rb_plus(string, "]");
      return stepTotal;
    }, TMP_10.$$arity = 3), nil) && 'rollStep';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
Opal.loaded(["diceBot/EarthDawn"]);
/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$setPrefixes', '$ed_step', '$getStepResult', '$=~', '$to_i', '$min', '$!', '$nil?', '$max', '$new', '$[]=', '$<', '$getStepInfo', '$debug', '$each', '$+', '$rollStep', '$shift', '$getModifyText', '$==', '$getSuccess', '$>', '$getBaseStepTable', '$first', '$last', '$<=', '$get_table_by_number', '$-', '$floor', '$/', '$size', '$times', '$addStepToResult', '$%', '$[]', '$getSuccessTable', '$>=', '$empty?', '$roll', '$!=']);
  self.$require("diceBot/EarthDawn");
  return (function($base, $super) {
    function $EarthDawn3(){};
    var self = $EarthDawn3 = $klass($base, $super, 'EarthDawn3', $EarthDawn3);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_9, TMP_10, TMP_11, TMP_13, TMP_15, TMP_16, TMP_17, TMP_19;

    def.isFailed = nil;
    self.$setPrefixes(["\\d+e.*"]);

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      self.sendMode = 2;
      return self.sortType = 1;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "アースドーン3版";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "EarthDawn3";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "ステップダイス　(xEn+k)\nステップx、目標値n(省略可能）、カルマダイスk(D2～D20)でステップダイスをロールします。\n振り足しも自動。\n例）ステップ10：10E\n　　ステップ10、目標値8：10E8\n　　ステップ12、目標値8、カルマダイスD12：10E8+1D6\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$rollDiceCommand', TMP_5 = function $$rollDiceCommand(command) {
      var self = this;

      return self.$ed_step(command);
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$ed_step', TMP_6 = function $$ed_step(str) {
      var self = this, output = nil;

      output = self.$getStepResult(str);
      return output;
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$getStepResult', TMP_9 = function $$getStepResult(str) {
      var $a, $b, TMP_7, $c, TMP_8, self = this, stepTotal = nil, step = nil, targetNumber = nil, hasKarmaDice = nil, karmaDiceCount = nil, karmaDiceType = nil, diceModify = nil, karmaDiceInfo = nil, stepInfo = nil, string = nil, diceTypes = nil, modify = nil, output = nil;

      if ((($a = (/^(\d+)E(\d+)?(\+(\d*)D(\d+))?(\+\d)?/i['$=~'](str))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      stepTotal = 0;
      self.isFailed = true;
      step = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$to_i();
      targetNumber = [(($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$to_i(), 20].$min();
      hasKarmaDice = ((($a = $gvars['~']) === nil ? nil : $a['$[]'](3))['$nil?']()['$!']());
      karmaDiceCount = [1, (($a = $gvars['~']) === nil ? nil : $a['$[]'](4)).$to_i()].$max();
      karmaDiceType = (($a = $gvars['~']) === nil ? nil : $a['$[]'](5)).$to_i();
      diceModify = (($a = $gvars['~']) === nil ? nil : $a['$[]'](6)).$to_i();
      karmaDiceInfo = $scope.get('Hash').$new(0);
      if ((($a = (hasKarmaDice)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        karmaDiceInfo['$[]='](karmaDiceType, karmaDiceCount)};
      if ((($a = ($rb_lt(targetNumber, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil};
      stepInfo = self.$getStepInfo(step);
      self.$debug("stepInfo", stepInfo);
      string = "";
      diceTypes = [20, 12, 10, 8, 6, 4];
      ($a = ($b = diceTypes).$each, $a.$$p = (TMP_7 = function(type){var self = TMP_7.$$s || this;
if (type == null) type = nil;
      return stepTotal = $rb_plus(stepTotal, self.$rollStep(type, stepInfo.$shift(), string))}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b);
      modify = stepInfo.$shift();
      ($a = ($c = karmaDiceInfo).$each, $a.$$p = (TMP_8 = function(diceType, diceCount){var self = TMP_8.$$s || this;
if (diceType == null) diceType = nil;if (diceCount == null) diceCount = nil;
      return stepTotal = $rb_plus(stepTotal, self.$rollStep(diceType, diceCount, string))}, TMP_8.$$s = self, TMP_8.$$arity = 2, TMP_8), $a).call($c);
      string = $rb_plus(string, ($rb_plus(self.$getModifyText(modify), self.$getModifyText(diceModify))));
      stepTotal = $rb_plus(stepTotal, ($rb_plus(modify, diceModify)));
      string = $rb_plus(string, " ＞ " + (stepTotal));
      output = "ステップ" + (step) + " ＞ " + (string);
      if ((($a = (targetNumber['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return output};
      string = $rb_plus(string, $rb_plus(" ＞ ", self.$getSuccess(targetNumber, stepTotal)));
      output = "ステップ" + (step) + ">=" + (targetNumber) + " ＞ " + (string);
      return output;
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$getModifyText', TMP_10 = function $$getModifyText(modify) {
      var $a, self = this, string = nil;

      string = "";
      if ((($a = (modify['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return string};
      if ((($a = ($rb_gt(modify, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        string = $rb_plus(string, "+")};
      string = $rb_plus(string, "" + (modify));
      return string;
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$getBaseStepTable', TMP_11 = function $$getBaseStepTable() {
      var self = this, stepTable = nil;

      stepTable = [[1, [0, 0, 0, 0, 1, 0, -3]], [2, [0, 0, 0, 0, 1, 0, -2]], [3, [0, 0, 0, 0, 1, 0, -1]], [4, [0, 0, 0, 0, 1, 0, 0]], [5, [0, 0, 0, 1, 0, 0, 0]], [6, [0, 0, 1, 0, 0, 0, 0]], [7, [0, 1, 0, 0, 0, 0, 0]]];
      return stepTable;
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$getStepInfo', TMP_13 = function $$getStepInfo(step) {
      var $a, $b, TMP_12, self = this, baseStepTable = nil, baseMaxStep = nil, baseStepInfo = nil, overStep = nil, stepRythm = nil, result = nil, loopCount = nil, index = nil, restStepInfo = nil;

      baseStepTable = self.$getBaseStepTable();
      baseMaxStep = baseStepTable.$last().$first();
      if ((($a = ($rb_le(step, baseMaxStep))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$get_table_by_number(step, baseStepTable)};
      baseStepInfo = [0, 1, 0, 0, 0, 0, 0];
      overStep = $rb_minus($rb_minus(step, baseMaxStep), 1);
      stepRythm = [[0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 2, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0]];
      result = [0, 0, 0, 0, 0, 0, 0];
      loopCount = ($rb_divide(overStep, stepRythm.$size())).$floor();
      ($a = ($b = loopCount).$times, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;

      return self.$addStepToResult(result, baseStepInfo)}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $a).call($b);
      index = (overStep['$%'](stepRythm.$size()));
      restStepInfo = stepRythm['$[]'](index);
      self.$addStepToResult(result, restStepInfo);
      return result;
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$addStepToResult', TMP_15 = function $$addStepToResult(result, step) {
      var $a, $b, TMP_14, self = this;

      ($a = ($b = result.$size()).$times, $a.$$p = (TMP_14 = function(i){var self = TMP_14.$$s || this, $c, $d;
if (i == null) i = nil;
      return ($c = i, $d = result, $d['$[]=']($c, $rb_plus($d['$[]']($c), step['$[]'](i))))}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($b);
      return result;
    }, TMP_15.$$arity = 2);

    Opal.defn(self, '$getSuccess', TMP_16 = function $$getSuccess(targetNumber, stepTotal) {
      var $a, $b, self = this, successTable = nil, successInfo = nil, pathetic = nil, poor = nil, average = nil, good = nil, excelent = nil, extraordinary = nil;

      if ((($a = (self.isFailed)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return "自動失敗"};
      successTable = self.$getSuccessTable();
      successInfo = self.$get_table_by_number(targetNumber, successTable);
      $b = successInfo, $a = Opal.to_ary($b), pathetic = ($a[0] == null ? nil : $a[0]), poor = ($a[1] == null ? nil : $a[1]), average = ($a[2] == null ? nil : $a[2]), good = ($a[3] == null ? nil : $a[3]), excelent = ($a[4] == null ? nil : $a[4]), extraordinary = ($a[5] == null ? nil : $a[5]), $b;
      if ((($a = ($rb_ge(stepTotal, extraordinary))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return "Extraordinary(極上)"};
      if ((($a = ($rb_ge(stepTotal, excelent))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return "Excelent(最高)"};
      if ((($a = ($rb_ge(stepTotal, good))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return "Good(上出来)"};
      if ((($a = ($rb_ge(stepTotal, average))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return "Average(そこそこ)"};
      if ((($a = ($rb_ge(stepTotal, poor))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return "Poor(お粗末)"};
      if ((($a = ($rb_ge(stepTotal, pathetic))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return "Pathetic(惨め)"
        } else {
        return nil
      };
    }, TMP_16.$$arity = 2);

    Opal.defn(self, '$getSuccessTable', TMP_17 = function $$getSuccessTable() {
      var self = this, successTable = nil;

      successTable = [[2, [0, 1, 2, 5, 7, 9]], [3, [0, 1, 3, 6, 8, 10]], [4, [0, 1, 4, 7, 10, 12]], [5, [1, 2, 5, 8, 11, 14]], [6, [1, 2, 6, 9, 13, 17]], [7, [1, 3, 7, 11, 15, 19]], [8, [1, 4, 8, 13, 16, 20]], [9, [1, 5, 9, 15, 18, 22]], [10, [1, 6, 10, 16, 20, 24]], [11, [1, 6, 11, 17, 21, 25]], [12, [1, 7, 12, 18, 23, 27]], [13, [1, 7, 13, 20, 25, 29]], [14, [1, 8, 14, 21, 26, 31]], [15, [1, 9, 15, 23, 27, 31]], [16, [1, 10, 16, 24, 28, 33]], [17, [1, 11, 17, 25, 30, 34]], [18, [1, 12, 18, 26, 31, 36]], [19, [1, 12, 19, 28, 33, 37]], [20, [1, 13, 20, 29, 34, 39]], [21, [1, 14, 21, 30, 36, 41]], [22, [1, 15, 22, 31, 37, 42]], [23, [1, 16, 23, 33, 38, 43]], [24, [1, 16, 24, 34, 39, 44]], [25, [1, 17, 25, 35, 41, 46]], [26, [1, 18, 26, 36, 42, 47]], [27, [1, 19, 27, 37, 43, 49]], [28, [1, 19, 28, 39, 45, 50]], [29, [1, 21, 29, 40, 46, 51]], [30, [1, 21, 30, 41, 47, 53]], [31, [1, 22, 31, 42, 48, 54]], [32, [1, 23, 32, 43, 49, 55]], [33, [1, 24, 33, 45, 51, 57]], [34, [1, 24, 34, 46, 52, 58]], [35, [1, 25, 35, 47, 53, 60]], [36, [1, 26, 36, 48, 54, 60]], [37, [1, 27, 37, 49, 56, 62]], [38, [1, 28, 38, 51, 57, 63]], [39, [1, 29, 39, 52, 58, 64]], [40, [1, 30, 40, 53, 59, 66]]];
      return successTable;
    }, TMP_17.$$arity = 0);

    return (Opal.defn(self, '$rollStep', TMP_19 = function $$rollStep(diceType, diceCount, string) {
      var $a, $b, TMP_18, self = this, stepTotal = nil;

      self.$debug("rollStep diceType, diceCount, string", diceType, diceCount, string);
      stepTotal = 0;
      if ((($a = ($rb_gt(diceCount, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return stepTotal
      };
      if ((($a = (string['$empty?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        string = $rb_plus(string, "+")
      };
      string = $rb_plus(string, "" + (diceCount) + "d" + (diceType) + "[");
      self.$debug("rollStep string", string);
      ($a = ($b = diceCount).$times, $a.$$p = (TMP_18 = function(i){var self = TMP_18.$$s || this, $c, $d, $e, dice_now = nil, dummy = nil, dice_in = nil;
if (i == null) i = nil;
      $d = self.$roll(1, diceType), $c = Opal.to_ary($d), dice_now = ($c[0] == null ? nil : $c[0]), dummy = ($c[1] == null ? nil : $c[1]), $d;
        if ((($c = (dice_now['$!='](1))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          self.isFailed = false};
        dice_in = dice_now;
        while ((($d = (dice_now['$=='](diceType))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
        $e = self.$roll(1, diceType), $d = Opal.to_ary($e), dice_now = ($d[0] == null ? nil : $d[0]), dummy = ($d[1] == null ? nil : $d[1]), $e;
        dice_in = $rb_plus(dice_in, dice_now);};
        stepTotal = $rb_plus(stepTotal, dice_in);
        if ((($c = (i['$!='](0))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          string = $rb_plus(string, ",")};
        return string = $rb_plus(string, "" + (dice_in));}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18), $a).call($b);
      string = $rb_plus(string, "]");
      return stepTotal;
    }, TMP_19.$$arity = 3), nil) && 'rollStep';
  })($scope.base, $scope.get('EarthDawn'));
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
