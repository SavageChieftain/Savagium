/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$setPrefixes', '$===', '$to_i', '$nil?', '$==', '$checkRoll', '$>', '$roll', '$collect', '$split', '$each', '$<=', '$+', '$empty?', '$!=', '$*']);
  return (function($base, $super) {
    function $Alsetto(){};
    var self = $Alsetto = $klass($base, $super, 'Alsetto', $Alsetto);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_8;

    def.sortType = nil;
    self.$setPrefixes(["\\d+AL(C|G)?(\\d+)?(x|\\*)\\d+", "\\d+ALC?(\\d+)?"]);

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      return self.sortType = 1;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "詩片のアルセット";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "Alsetto";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "・成功判定：nAL[m]　　　　・トライアンフ無し：nALC[m]\n・命中判定：nAL[m]*p　　　・トライアンフ無し：nALC[m]*p\n・命中判定（ガンスリンガーの根源詩）：nALG[m]*p\n[]内は省略可能。\n\nALコマンドはトライアンフの分だけ、自動で振り足し処理を行います。\n「n」でダイス数を指定。\n「m」で目標値を指定。省略時は、デフォルトの「3」が使用されます。\n「p」で攻撃力を指定。「*」は「x」でも可。\n攻撃力指定で命中判定となり、成功数ではなく、ダメージを結果表示します。\n\nALCコマンドはトライアンフ無しで、成功数、ダメージを結果表示します。\nALGコマンドは「2以下」でトライアンフ処理を行います。\n\n【書式例】\n・5AL → 5d6で目標値3。\n・5ALC → 5d6で目標値3。トライアンフ無し。\n・6AL2 → 6d6で目標値2。\n・4AL*5 → 4d6で目標値3、攻撃力5の命中判定。\n・7AL2x10 → 7d6で目標値2、攻撃力10の命中判定。\n・8ALC4x5 → 8d6で目標値4、攻撃力5、トライアンフ無しの命中判定。\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$rollDiceCommand', TMP_5 = function $$rollDiceCommand(command) {
      var $a, $b, self = this, rapid = nil, isCritical = nil, criticalNumber = nil, target = nil, damage = nil;

      if ((($a = /(\d+)AL(C|G)?(\d+)?((x|\*)(\d+))?$/i['$==='](command)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        rapid = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$to_i();
        isCritical = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2))['$nil?']();
        if ((($a = (isCritical)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          criticalNumber = 1
        } else if ((($a = ((($b = $gvars['~']) === nil ? nil : $b['$[]'](2))['$==']("G"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          isCritical = true;
          criticalNumber = 2;
          } else {
          criticalNumber = 0
        };
        target = (((($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](3))) !== false && $a !== nil && $a != null) ? $a : 3)).$to_i();
        damage = (((($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](6))) !== false && $a !== nil && $a != null) ? $a : 0)).$to_i();
        return self.$checkRoll(rapid, target, damage, isCritical, criticalNumber);};
      return nil;
    }, TMP_5.$$arity = 1);

    return (Opal.defn(self, '$checkRoll', TMP_8 = function $$checkRoll(rapid, target, damage, isCritical, criticalNumber) {
      var $a, $b, $c, TMP_6, $d, TMP_7, self = this, totalSuccessCount = nil, totalCriticalCount = nil, text = nil, rollCount = nil, dice = nil, diceText = nil, diceArray = nil, successCount = nil, criticalCount = nil, isDamage = nil, totalDamage = nil, result = nil;

      totalSuccessCount = 0;
      totalCriticalCount = 0;
      text = "";
      rollCount = rapid;
      while ((($b = $rb_gt(rollCount, 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
      $c = self.$roll(rollCount, 6, self.sortType), $b = Opal.to_ary($c), dice = ($b[0] == null ? nil : $b[0]), diceText = ($b[1] == null ? nil : $b[1]), $c;
      diceArray = ($b = ($c = diceText.$split(/,/)).$collect, $b.$$p = (TMP_6 = function(i){var self = TMP_6.$$s || this;
if (i == null) i = nil;
      return i.$to_i()}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $b).call($c);
      successCount = 0;
      criticalCount = 0;
      ($b = ($d = diceArray).$each, $b.$$p = (TMP_7 = function(i){var self = TMP_7.$$s || this, $e;
if (i == null) i = nil;
      if ((($e = ($rb_le(i, target))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
          successCount = $rb_plus(successCount, 1)};
        if ((($e = ($rb_le(i, criticalNumber))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
          return criticalCount = $rb_plus(criticalCount, 1)
          } else {
          return nil
        };}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $b).call($d);
      totalSuccessCount = $rb_plus(totalSuccessCount, successCount);
      if (criticalCount['$=='](0)) {
        } else {
        totalCriticalCount = $rb_plus(totalCriticalCount, 1)
      };
      if ((($b = (text['$empty?']())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        } else {
        text = $rb_plus(text, "+")
      };
      text = $rb_plus(text, "" + (successCount) + "[" + (diceText) + "]");
      if ((($b = (isCritical)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        } else {
        break;
      };
      rollCount = criticalCount;};
      isDamage = (damage['$!='](0));
      if ((($a = (isDamage)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        totalDamage = $rb_times(totalSuccessCount, damage);
        result = "(" + (rapid) + "D6<=" + (target) + ") ＞ " + (text) + " ＞ Hits：" + (totalSuccessCount) + "*" + (damage) + " ＞ " + (totalDamage) + "ダメージ";
        if ((($a = (isCritical)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result = $rb_plus(result, " / " + (totalCriticalCount) + "トライアンフ")};
        } else {
        result = "(" + (rapid) + "D6<=" + (target) + ") ＞ " + (text) + " ＞ 成功数：" + (totalSuccessCount);
        if ((($a = (isCritical)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result = $rb_plus(result, " / " + (totalCriticalCount) + "トライアンフ")};
      };
      return result;
    }, TMP_8.$$arity = 5), nil) && 'checkRoll';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
