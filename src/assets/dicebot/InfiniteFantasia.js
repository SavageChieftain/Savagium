/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$==', '$<=', '$/']);
  return (function($base, $super) {
    function $InfiniteFantasia(){};
    var self = $InfiniteFantasia = $klass($base, $super, 'InfiniteFantasia', $InfiniteFantasia);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

    Opal.defn(self, '$gameName', TMP_1 = function $$gameName() {
      var self = this;

      return "無限のファンタジア";
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_2 = function $$gameType() {
      var self = this;

      return "InfiniteFantasia";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_3 = function $$getHelpMessage() {
      var self = this;

      return "失敗、成功レベルの自動判定を行います。\n";
    }, TMP_3.$$arity = 0);

    return (Opal.defn(self, '$check_1D20', TMP_4 = function $$check_1D20(total_n, dice_n, signOfInequality, diff, dice_cnt, dice_max, n1, n_max) {
      var $a, self = this, critical = nil;

      if ((($a = (signOfInequality['$==']("<="))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return ""
      };
      if ((($a = ($rb_le(total_n, diff))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return " ＞ 失敗"
      };
      critical = "";
      if ((($a = ($rb_le(total_n, 1))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        critical = "/クリティカル"};
      if ((($a = ($rb_le(total_n, ($rb_divide(diff, 32))))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ 32レベル成功(32Lv+)" + (critical)
      } else if ((($a = ($rb_le(total_n, ($rb_divide(diff, 16))))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ 16レベル成功(16LV+)" + (critical)
      } else if ((($a = ($rb_le(total_n, ($rb_divide(diff, 8))))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ 8レベル成功" + (critical)
      } else if ((($a = ($rb_le(total_n, ($rb_divide(diff, 4))))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ 4レベル成功" + (critical)
      } else if ((($a = ($rb_le(total_n, ($rb_divide(diff, 2))))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ 2レベル成功" + (critical)};
      return " ＞ 1レベル成功" + (critical);
    }, TMP_4.$$arity = 8), nil) && 'check_1D20';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
