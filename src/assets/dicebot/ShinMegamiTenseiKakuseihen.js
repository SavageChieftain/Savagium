/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$==', '$%', '$getTwoDice', '$+', '$*', '$getCheckResultText', '$min', '$max', '$first', '$getDiceList', '$floor', '$/', '$getCheckResult', '$sprintf', '$>=', '$getSuccessResult', '$getFailResult']);
  return (function($base, $super) {
    function $ShinMegamiTenseiKakuseihen(){};
    var self = $ShinMegamiTenseiKakuseihen = $klass($base, $super, 'ShinMegamiTenseiKakuseihen', $ShinMegamiTenseiKakuseihen);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10;

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      return ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "真・女神転生TRPG　覚醒編";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "SMTKakuseihen";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "・判定\n1D100<=(目標値) でスワップ・通常・逆スワップ判定を判定。\n威力ダイスは nU6[6] (nはダイス個数)でロール可能です。\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$check_1D100', TMP_5 = function $$check_1D100(total_n, dice_n, signOfInequality, diff, dice_cnt, dice_max, n1, n_max) {
      var $a, $b, self = this, dice1 = nil, dice2 = nil, total1 = nil, total2 = nil, isRepdigit = nil, result = nil;

      if ((($a = (signOfInequality['$==']("<="))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return ""
      };
      total_n = total_n['$%'](100);
      $b = self.$getTwoDice(), $a = Opal.to_ary($b), dice1 = ($a[0] == null ? nil : $a[0]), dice2 = ($a[1] == null ? nil : $a[1]), $b;
      total1 = $rb_plus($rb_times(dice1, 10), dice2);
      total2 = $rb_plus($rb_times(dice2, 10), dice1);
      isRepdigit = (dice1['$=='](dice2));
      result = " ＞ スワップ";
      result = $rb_plus(result, self.$getCheckResultText(diff, [total1, total2].$min(), isRepdigit));
      result = $rb_plus(result, "／通常");
      result = $rb_plus(result, self.$getCheckResultText(diff, total_n, isRepdigit));
      result = $rb_plus(result, "／逆スワップ");
      result = $rb_plus(result, self.$getCheckResultText(diff, [total1, total2].$max(), isRepdigit));
      return result;
    }, TMP_5.$$arity = 8);

    Opal.defn(self, '$getTwoDice', TMP_6 = function $$getTwoDice() {
      var $a, self = this, value = nil, dice1 = nil, dice2 = nil;

      value = self.$getDiceList().$first();
      ((($a = value) !== false && $a !== nil && $a != null) ? $a : value = 0);
      value = value['$%'](100);
      dice1 = ($rb_divide(value, 10)).$floor();
      dice2 = value['$%'](10);
      return [dice1, dice2];
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$getCheckResultText', TMP_7 = function $$getCheckResultText(diff, total, isRepdigit) {
      var self = this, checkResult = nil, text = nil;

      checkResult = self.$getCheckResult(diff, total, isRepdigit);
      text = self.$sprintf("(%02d)%s", total, checkResult);
      return text;
    }, TMP_7.$$arity = 3);

    Opal.defn(self, '$getCheckResult', TMP_8 = function $$getCheckResult(diff, total, isRepdigit) {
      var $a, self = this;

      if ((($a = ($rb_ge(diff, total))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$getSuccessResult(isRepdigit)};
      return self.$getFailResult(isRepdigit);
    }, TMP_8.$$arity = 3);

    Opal.defn(self, '$getSuccessResult', TMP_9 = function $$getSuccessResult(isRepdigit) {
      var $a, self = this;

      if ((($a = (isRepdigit)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return "絶対成功"};
      return "成功";
    }, TMP_9.$$arity = 1);

    return (Opal.defn(self, '$getFailResult', TMP_10 = function $$getFailResult(isRepdigit) {
      var $a, self = this;

      if ((($a = (isRepdigit)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return "絶対失敗"};
      return "失敗";
    }, TMP_10.$$arity = 1), nil) && 'getFailResult';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
