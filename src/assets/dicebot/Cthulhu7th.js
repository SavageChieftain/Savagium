/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$setPrefixes', '$===', '$getCheckResult', '$getCombineRoll', '$getFullAutoResult', '$=~', '$to_i', '$<=', '$include?', '$min', '$max', '$+', '$rollPercentD10', '$getTotalLists', '$getTotal', '$getCheckResultText', '$join', '$roll', '$==', '$abs', '$times', '$*', '$push', '$>=', '$/', '$<', '$debug', '$>', '$rollFullAuto', '$each', '$getNextDifficltyMessage', '$getHitResultInfos', '$getHitResultText', '$getHitType', '$getBulletResults', '$[]', '$[]=', '$-', '$getFumbleable', '$getSuccessListImpaleBulletList', '$getSetOfBullet', '$getHitBulletCountBase', '$to_f', '$!', '$isLastBulletTurn', '$floor', '$ceil', '$getLastHitBulletCount']);
  return (function($base, $super) {
    function $Cthulhu7th(){};
    var self = $Cthulhu7th = $klass($base, $super, 'Cthulhu7th', $Cthulhu7th);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26;

    def.bonus_dice_range = nil;
    self.$setPrefixes(["CC\\(\\d+\\)", "CC.*", "CBR\\(\\d+,\\d+\\)", "FAR\\(\\d+\\)", "FAR.*"]);

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      return self.bonus_dice_range = ($range(-2, 2, false));
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "クトゥルフ第7版";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "Cthulhu7th";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "※私家翻訳のため、用語・ルールの詳細については原本を参照願います。\n\n・判定　CC(x)<=（目標値）\n　x：ボーナス・ペナルティダイス：Bonus/Penalty Dice (2～－2)。省略可。\n　致命的失敗：Fumble／失敗：Failure／通常成功：Regular success／\n　困難な成功：Hard success／極限の成功：Extreme success／\n　決定的成功：Critical success　を自動判定。\n例）CC<=30　CC(2)<=50　CC(-1)<=75\n\n・組み合わせ判定　(CBR(x,y))\n　目標値 x と y で％ロールを行い、成否を判定。\n　例）CBR(50,20)\n\n・連射（Full Auto）判定　FAR(w,x,y,z)\n　w：弾数(1～100）、x：技能値（1～100）、y：故障ナンバー、\n　z：ボーナス・ペナルティダイス(-2～2)。省略可。\n　命中数と貫通数、残弾数のみ算出。ダメージ算出はありません。\n例）FAR(25,70,98)　FAR(50,80,98,-1)\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$rollDiceCommand', TMP_5 = function $$rollDiceCommand(command) {
      var self = this, $case = nil;

      $case = command;if (/CC/i['$===']($case)) {return self.$getCheckResult(command)}else if (/CBR/i['$===']($case)) {return self.$getCombineRoll(command)}else if (/FAR/i['$===']($case)) {return self.$getFullAutoResult(command)};
      return nil;
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$getCheckResult', TMP_6 = function $$getCheckResult(command) {
      var $a, self = this, bonus_dice_count = nil, diff = nil, output = nil, units_digit = nil, total_list = nil, total = nil, result_text = nil;

      if ((($a = (/^CC([-\d]+)?<=(\d+)/i['$=~'](command))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        nil
      };
      bonus_dice_count = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$to_i();
      diff = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$to_i();
      if ((($a = ($rb_le(diff, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return "エラー。目標値は1以上です。"};
      if ((($a = (self.bonus_dice_range['$include?'](bonus_dice_count))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return "エラー。ボーナス・ペナルティダイスの値は" + (self.bonus_dice_range.$min()) + "～" + (self.bonus_dice_range.$max()) + "です。"
      };
      output = "";
      output = $rb_plus(output, "(1D100<=" + (diff) + ")");
      output = $rb_plus(output, " ボーナス・ペナルティダイス[" + (bonus_dice_count) + "]");
      units_digit = self.$rollPercentD10();
      total_list = self.$getTotalLists(bonus_dice_count, units_digit);
      total = self.$getTotal(total_list, bonus_dice_count);
      result_text = self.$getCheckResultText(total, diff);
      output = $rb_plus(output, " ＞ " + (total_list.$join(", ")) + " ＞ " + (total) + " ＞ " + (result_text));
      return output;
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$rollPercentD10', TMP_7 = function $$rollPercentD10() {
      var $a, $b, self = this, dice = nil;

      $b = self.$roll(1, 10), $a = Opal.to_ary($b), dice = ($a[0] == null ? nil : $a[0]), $b;
      if ((($a = (dice['$=='](10))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        dice = 0};
      return dice;
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$getTotalLists', TMP_9 = function $$getTotalLists(bonus_dice_count, units_digit) {
      var $a, $b, TMP_8, self = this, total_list = nil, tens_digit_count = nil;

      total_list = [];
      tens_digit_count = $rb_plus(1, bonus_dice_count.$abs());
      ($a = ($b = tens_digit_count).$times, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $c, bonus = nil, total = nil;

      bonus = self.$rollPercentD10();
        total = $rb_plus(($rb_times(bonus, 10)), units_digit);
        if ((($c = (total['$=='](0))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          total = 100};
        return total_list.$push(total);}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($b);
      return total_list;
    }, TMP_9.$$arity = 2);

    Opal.defn(self, '$getTotal', TMP_10 = function $$getTotal(total_list, bonus_dice_count) {
      var $a, self = this;

      if ((($a = ($rb_ge(bonus_dice_count, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return total_list.$min()};
      return total_list.$max();
    }, TMP_10.$$arity = 2);

    Opal.defn(self, '$getCheckResultText', TMP_11 = function $$getCheckResultText(total, diff, fumbleable) {
      var $a, self = this, fumble_text = nil;

      if (fumbleable == null) {
        fumbleable = false;
      }
      if ((($a = ($rb_le(total, diff))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = (total['$=='](1))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "決定的成功"};
        if ((($a = ($rb_le(total, ($rb_divide(diff, 5))))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "極限の成功"};
        if ((($a = ($rb_le(total, ($rb_divide(diff, 2))))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "困難な成功"};
        return "通常成功";};
      fumble_text = "致命的失敗";
      if ((($a = (total['$=='](100))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return fumble_text};
      if ((($a = ($rb_ge(total, 96))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ($rb_lt(diff, 50))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return fumble_text
        } else if (fumbleable !== false && fumbleable !== nil && fumbleable != null) {
          return fumble_text}};
      return "失敗";
    }, TMP_11.$$arity = -3);

    Opal.defn(self, '$getCombineRoll', TMP_12 = function $$getCombineRoll(command) {
      var $a, $b, self = this, diff_1 = nil, diff_2 = nil, total = nil, result_1 = nil, result_2 = nil, successList = nil, succesCount = nil, rank = nil;

      if ((($a = (/CBR\((\d+),(\d+)\)/i['$=~'](command))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      diff_1 = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$to_i();
      diff_2 = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$to_i();
      $b = self.$roll(1, 100), $a = Opal.to_ary($b), total = ($a[0] == null ? nil : $a[0]), $b;
      result_1 = self.$getCheckResultText(total, diff_1);
      result_2 = self.$getCheckResultText(total, diff_2);
      successList = ["決定的成功", "極限の成功", "困難な成功", "通常成功"];
      succesCount = 0;
      if ((($a = successList['$include?'](result_1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        succesCount = $rb_plus(succesCount, 1)};
      if ((($a = successList['$include?'](result_2)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        succesCount = $rb_plus(succesCount, 1)};
      self.$debug("succesCount", succesCount);
      rank = (function() {if ((($a = ($rb_ge(succesCount, 2))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return "成功"
      } else if ((($a = (succesCount['$=='](1))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return "部分的成功"
        } else {
        return "失敗"
      }; return nil; })();
      return "(1d100<=" + (diff_1) + "," + (diff_2) + ") ＞ " + (total) + "[" + (result_1) + "," + (result_2) + "] ＞ " + (rank);
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$getFullAutoResult', TMP_13 = function $$getFullAutoResult(command) {
      var $a, $b, self = this, bullet_count = nil, diff = nil, broken_number = nil, bonus_dice_count = nil, output = nil, bullet_count_limit = nil;

      if ((($a = (/^FAR\((-?\d+)(,(-?\d+))(,(-?\d+))(,(-?\d+))?\)/i['$=~'](command))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      bullet_count = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$to_i();
      diff = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3)).$to_i();
      broken_number = (($a = $gvars['~']) === nil ? nil : $a['$[]'](5)).$to_i();
      bonus_dice_count = (((($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](7))) !== false && $a !== nil && $a != null) ? $a : 0)).$to_i();
      output = "";
      bullet_count_limit = 100;
      if ((($a = ($rb_gt(bullet_count, bullet_count_limit))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = $rb_plus(output, "\n弾薬が多すぎます。装填された弾薬を" + (bullet_count_limit) + "発に変更します。\n");
        bullet_count = bullet_count_limit;};
      if ((($a = ($rb_le(bullet_count, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return "弾薬は正の数です。"};
      if ((($a = ($rb_le(diff, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return "目標値は正の数です。"};
      if ((($a = ($rb_lt(broken_number, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = $rb_plus(output, "\n故障ナンバーは正の数です。マイナス記号を外します。\n");
        broken_number = broken_number.$abs();};
      if ((($a = (self.bonus_dice_range['$include?'](bonus_dice_count))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return "\nエラー。ボーナス・ペナルティダイスの値は" + (self.bonus_dice_range.$min()) + "～" + (self.bonus_dice_range.$max()) + "です。"
      };
      output = $rb_plus(output, "ボーナス・ペナルティダイス[" + (bonus_dice_count) + "]");
      output = $rb_plus(output, self.$rollFullAuto(bullet_count, diff, broken_number, bonus_dice_count));
      return output;
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$rollFullAuto', TMP_15 = function $$rollFullAuto(bullet_count, diff, broken_number, dice_num) {try {

      var $a, $b, TMP_14, self = this, output = nil, loopCount = nil, counts = nil;

      output = "";
      loopCount = 0;
      counts = $hash2(["hit_bullet", "impale_bullet", "bullet"], {"hit_bullet": 0, "impale_bullet": 0, "bullet": bullet_count});
      ($a = ($b = ($range(0, 3, false))).$each, $a.$$p = (TMP_14 = function(more_difficlty){var self = TMP_14.$$s || this, $c, $d, $e, hit_result = nil, total = nil, total_list = nil, hit_type = nil, hit_bullet = nil, impale_bullet = nil, lost_bullet = nil;
        if (self.bonus_dice_range == null) self.bonus_dice_range = nil;
if (more_difficlty == null) more_difficlty = nil;
      output = $rb_plus(output, self.$getNextDifficltyMessage(more_difficlty));
        while ((($d = ($rb_ge(dice_num, self.bonus_dice_range.$min()))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
        loopCount = $rb_plus(loopCount, 1);
        $e = self.$getHitResultInfos(dice_num, diff, more_difficlty), $d = Opal.to_ary($e), hit_result = ($d[0] == null ? nil : $d[0]), total = ($d[1] == null ? nil : $d[1]), total_list = ($d[2] == null ? nil : $d[2]), $e;
        output = $rb_plus(output, "\n" + (loopCount) + "回目: ＞ " + (total_list.$join(", ")) + " ＞ " + (hit_result));
        if ((($d = ($rb_ge(total, broken_number))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          output = $rb_plus(output, "ジャム");
          Opal.ret(self.$getHitResultText(output, counts));};
        hit_type = self.$getHitType(more_difficlty, hit_result);
        $e = self.$getBulletResults(counts['$[]']("bullet"), hit_type, diff), $d = Opal.to_ary($e), hit_bullet = ($d[0] == null ? nil : $d[0]), impale_bullet = ($d[1] == null ? nil : $d[1]), lost_bullet = ($d[2] == null ? nil : $d[2]), $e;
        ($d = "hit_bullet", $e = counts, $e['$[]=']($d, $rb_plus($e['$[]']($d), hit_bullet)));
        ($d = "impale_bullet", $e = counts, $e['$[]=']($d, $rb_plus($e['$[]']($d), impale_bullet)));
        ($d = "bullet", $e = counts, $e['$[]=']($d, $rb_minus($e['$[]']($d), lost_bullet)));
        if ((($d = ($rb_le(counts['$[]']("bullet"), 0))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          Opal.ret(self.$getHitResultText(output, counts))};
        dice_num = $rb_minus(dice_num, 1);};
        return dice_num = $rb_plus(dice_num, 1);}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($b);
      return self.$getHitResultText(output, counts);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_15.$$arity = 4);

    Opal.defn(self, '$getHitResultInfos', TMP_16 = function $$getHitResultInfos(dice_num, diff, more_difficlty) {
      var self = this, units_digit = nil, total_list = nil, total = nil, fumbleable = nil, hit_result = nil;

      units_digit = self.$rollPercentD10();
      total_list = self.$getTotalLists(dice_num, units_digit);
      total = self.$getTotal(total_list, dice_num);
      fumbleable = self.$getFumbleable(more_difficlty);
      hit_result = self.$getCheckResultText(total, diff, fumbleable);
      return [hit_result, total, total_list];
    }, TMP_16.$$arity = 3);

    Opal.defn(self, '$getHitResultText', TMP_17 = function $$getHitResultText(output, counts) {
      var self = this;

      return "" + (output) + "\n＞ " + (counts['$[]']("hit_bullet")) + "発が命中、" + (counts['$[]']("impale_bullet")) + "発が貫通、残弾" + (counts['$[]']("bullet")) + "発";
    }, TMP_17.$$arity = 2);

    Opal.defn(self, '$getHitType', TMP_18 = function $$getHitType(more_difficlty, hit_result) {
      var $a, $b, self = this, successList = nil, impaleBulletList = nil;

      $b = self.$getSuccessListImpaleBulletList(more_difficlty), $a = Opal.to_ary($b), successList = ($a[0] == null ? nil : $a[0]), impaleBulletList = ($a[1] == null ? nil : $a[1]), $b;
      if ((($a = successList['$include?'](hit_result)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return "hit"};
      if ((($a = impaleBulletList['$include?'](hit_result)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return "impale"};
      return "";
    }, TMP_18.$$arity = 2);

    Opal.defn(self, '$getBulletResults', TMP_19 = function $$getBulletResults(bullet_count, hit_type, diff) {
      var $a, self = this, bullet_set_count = nil, hit_bullet_count_base = nil, impale_bullet_count_base = nil, lost_bullet_count = nil, hit_bullet_count = nil, impale_bullet_count = nil, $case = nil, halfbull = nil;

      bullet_set_count = self.$getSetOfBullet(diff);
      hit_bullet_count_base = self.$getHitBulletCountBase(diff, bullet_set_count);
      impale_bullet_count_base = ($rb_divide(bullet_set_count, (2).$to_f()));
      lost_bullet_count = 0;
      hit_bullet_count = 0;
      impale_bullet_count = 0;
      if ((($a = (self.$isLastBulletTurn(bullet_count, bullet_set_count)['$!']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        $case = hit_type;if ("hit"['$===']($case)) {hit_bullet_count = hit_bullet_count_base}else if ("impale"['$===']($case)) {hit_bullet_count = impale_bullet_count_base.$floor();
        impale_bullet_count = impale_bullet_count_base.$ceil();};
        lost_bullet_count = bullet_set_count;
        } else {
        $case = hit_type;if ("hit"['$===']($case)) {hit_bullet_count = self.$getLastHitBulletCount(bullet_count)}else if ("impale"['$===']($case)) {halfbull = $rb_divide(bullet_count, (2).$to_f());
        hit_bullet_count = halfbull.$floor();
        impale_bullet_count = halfbull.$ceil();};
        lost_bullet_count = bullet_count;
      };
      return [hit_bullet_count, impale_bullet_count, lost_bullet_count];
    }, TMP_19.$$arity = 3);

    Opal.defn(self, '$getSuccessListImpaleBulletList', TMP_20 = function $$getSuccessListImpaleBulletList(more_difficlty) {
      var self = this, successList = nil, impaleBulletList = nil, $case = nil;

      successList = [];
      impaleBulletList = [];
      $case = more_difficlty;if ((0)['$===']($case)) {successList = ["困難な成功", "通常成功"];
      impaleBulletList = ["決定的成功", "極限の成功"];}else if ((1)['$===']($case)) {successList = ["困難な成功"];
      impaleBulletList = ["決定的成功", "極限の成功"];}else if ((2)['$===']($case)) {successList = [];
      impaleBulletList = ["決定的成功", "極限の成功"];}else if ((3)['$===']($case)) {successList = ["決定的成功"];
      impaleBulletList = [];};
      return [successList, impaleBulletList];
    }, TMP_20.$$arity = 1);

    Opal.defn(self, '$getNextDifficltyMessage', TMP_21 = function $$getNextDifficltyMessage(more_difficlty) {
      var self = this, $case = nil;

      $case = more_difficlty;if ((1)['$===']($case)) {return "\n    難易度が困難な成功に変更"}else if ((2)['$===']($case)) {return "\n    難易度が極限の成功に変更"}else if ((3)['$===']($case)) {return "\n    難易度が決定的成功に変更"};
      return "";
    }, TMP_21.$$arity = 1);

    Opal.defn(self, '$getSetOfBullet', TMP_22 = function $$getSetOfBullet(diff) {
      var $a, $b, self = this, bullet_set_count = nil;

      bullet_set_count = ($rb_divide(diff, 10)).$floor();
      if ((($a = (($b = ($rb_ge(diff, 1)), $b !== false && $b !== nil && $b != null ?($rb_lt(diff, 10)) : $b))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        bullet_set_count = 1};
      return bullet_set_count;
    }, TMP_22.$$arity = 1);

    Opal.defn(self, '$getHitBulletCountBase', TMP_23 = function $$getHitBulletCountBase(diff, bullet_set_count) {
      var $a, $b, self = this, hit_bullet_count_base = nil;

      hit_bullet_count_base = ($rb_divide(bullet_set_count, 2)).$floor();
      if ((($a = (($b = ($rb_ge(diff, 1)), $b !== false && $b !== nil && $b != null ?($rb_lt(diff, 10)) : $b))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        hit_bullet_count_base = 1};
      return hit_bullet_count_base;
    }, TMP_23.$$arity = 2);

    Opal.defn(self, '$isLastBulletTurn', TMP_24 = function $$isLastBulletTurn(bullet_count, bullet_set_count) {
      var self = this;

      return ($rb_lt(($rb_minus(bullet_count, bullet_set_count)), 0));
    }, TMP_24.$$arity = 2);

    Opal.defn(self, '$getLastHitBulletCount', TMP_25 = function $$getLastHitBulletCount(bullet_count) {
      var $a, self = this, count = nil;

      if ((($a = (bullet_count['$=='](1))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return 1};
      count = ($rb_divide(bullet_count, (2).$to_f())).$floor();
      return count;
    }, TMP_25.$$arity = 1);

    return (Opal.defn(self, '$getFumbleable', TMP_26 = function $$getFumbleable(more_difficlty) {
      var self = this;

      return ($rb_ge(more_difficlty, 1));
    }, TMP_26.$$arity = 1), nil) && 'getFumbleable';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
