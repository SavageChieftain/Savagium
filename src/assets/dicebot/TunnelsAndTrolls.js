/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$setPrefixes', '$debug', '$=~', '$+', '$*', '$to_i', '$sub', '$gsub', '$tandt_berserk', '$==', '$getMaxSuccessLevel', '$>=', '$getExperiencePoint', '$-', '$<=', '$>', '$/', '$is_int?', '$sprintf', '$parren_killer', '$push', '$loop', '$shift', '$roll', '$&', '$sortType', '$collect', '$split', '$times', '$each', '$[]=', '$[]', '$<', '$length', '$-@', '$!=', '$sendMode']);
  return (function($base, $super) {
    function $TunnelsAndTrolls(){};
    var self = $TunnelsAndTrolls = $klass($base, $super, 'TunnelsAndTrolls', $TunnelsAndTrolls);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_23;

    def.diffText = nil;
    self.$setPrefixes(["(\\d+H?BS)"]);

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      self.sendMode = 2;
      self.sortType = 1;
      return self.sameDiceRerollCount = 1;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "トンネルズ＆トロールズ";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "Tunnels & Trolls";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "・行為判定　(nD6+x>=nLV)\n失敗、成功、自動失敗の自動判定とゾロ目の振り足し経験値の自動計算を行います。\nSAVEの難易度を「レベル」で表記することが出来ます。\n例えば「2Lv」と書くと「25」に置換されます。\n判定時以外は悪意ダメージを表示します。\nバーサークとハイパーバーサーク用に専用コマンドが使えます。\n例）2D6+1>=1Lv\n　 (2D6+1>=20) ＞ 7[2,5]+1 ＞ 8 ＞ 失敗\n　判定時にはゾロ目を自動で振り足します。\n\n・バーサークとハイパーバーサーク　(nBS+x or nHBS+x)\n　\"(ダイス数)BS(修正値)\"でバーサーク、\"(ダイス数)HBS(修正値)\"でハイパーバーサークでロールできます。\n　最初のダイスの読替は、個別の出目はそのままで表示。\n　下から２番目の出目をずらした分だけ合計にマイナス修正を追加して表示します。\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$changeText', TMP_10 = function $$changeText(string) {
      var $a, $b, TMP_5, $c, TMP_6, $d, TMP_7, $e, TMP_8, $f, TMP_9, self = this, level_diff = nil;

      self.$debug("Tunnels & Trolls parren_killer begin string", string);
      if ((($a = (/(\d+)LV/i['$=~'](string))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        level_diff = $rb_plus($rb_times(((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$to_i()), 5), 15);
        string = ($a = ($b = string).$sub, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

        return "" + (level_diff)}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b, /(\d+)LV/i);};
      if ((($a = (/BS/i['$=~'](string))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        string = ($a = ($c = string).$gsub, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $d;

        return "" + ((($d = $gvars['~']) === nil ? nil : $d['$[]'](1))) + "R6" + ((($d = $gvars['~']) === nil ? nil : $d['$[]'](2))) + "[H]"}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($c, /(\d+)HBS([^\d\s][\+\-\d]+)/i);
        string = ($a = ($d = string).$gsub, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $e;

        return "" + ((($e = $gvars['~']) === nil ? nil : $e['$[]'](1))) + "R6[H]"}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($d, /(\d+)HBS/i);
        string = ($a = ($e = string).$gsub, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $f;

        return "" + ((($f = $gvars['~']) === nil ? nil : $f['$[]'](1))) + "R6" + ((($f = $gvars['~']) === nil ? nil : $f['$[]'](2)))}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($e, /(\d+)BS([^\d\s][\+\-\d]+)/i);
        string = ($a = ($f = string).$gsub, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $g;

        return "" + ((($g = $gvars['~']) === nil ? nil : $g['$[]'](1))) + "R6"}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($f, /(\d+)BS/i);};
      return string;
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$dice_command_xRn', TMP_11 = function $$dice_command_xRn(string, nick_e) {
      var self = this;

      return self.$tandt_berserk(string, nick_e);
    }, TMP_11.$$arity = 2);

    Opal.defn(self, '$check_2D6', TMP_12 = function $$check_2D6(total_n, dice_n, signOfInequality, diff, dice_cnt, dice_max, n1, n_max) {
      var $a, self = this, experiencePoint = nil;

      self.$debug("Tunnels & Trolls check_2D6 begin");
      if ((($a = (signOfInequality['$=='](">="))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return ""
      };
      self.$debug("Tunnels & Trolls check_2D6 pass1");
      if ((($a = (dice_n['$=='](3))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ 自動失敗"};
      if ((($a = (self.diffText['$==']("?"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$getMaxSuccessLevel(total_n, dice_n)};
      if ((($a = ($rb_ge(total_n, diff))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        experiencePoint = self.$getExperiencePoint(diff, dice_n);
        return " ＞ 成功 ＞ 経験値" + (experiencePoint);};
      return " ＞ 失敗";
    }, TMP_12.$$arity = 8);

    Opal.defn(self, '$getMaxSuccessLevel', TMP_13 = function $$getMaxSuccessLevel(total_n, dice_n) {
      var $a, $b, self = this, sucLv = nil;

      sucLv = 1;
      while ((($b = ($rb_ge(total_n, ($rb_plus($rb_times(sucLv, 5), 15))))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
      sucLv = $rb_plus(sucLv, 1)};
      sucLv = $rb_minus(sucLv, 1);
      if ((($a = ($rb_le(sucLv, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ 失敗 ＞ 経験値" + (dice_n)};
      return " ＞ " + (sucLv) + "Lv成功 ＞ 経験値" + (dice_n);
    }, TMP_13.$$arity = 2);

    Opal.defn(self, '$getDiceRolledAdditionalText', TMP_14 = function $$getDiceRolledAdditionalText(n1, n_max, dice_max) {
      var $a, $b, self = this;

      self.$debug("getDiceRolledAdditionalText n1, n_max, dice_max", n1, n_max, dice_max);
      if ((($a = (($b = ($rb_gt(n_max, 0)), $b !== false && $b !== nil && $b != null ?(dice_max['$=='](6)) : $b))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ 悪意" + (n_max)};
      return "";
    }, TMP_14.$$arity = 3);

    Opal.defn(self, '$getExperiencePoint', TMP_15 = function $$getExperiencePoint(diff, dice_n) {
      var $a, self = this, experiencePoint = nil;

      self.$debug("diff", diff);
      self.$debug("dice_n", dice_n);
      experiencePoint = ($rb_times($rb_divide($rb_times(1.0, ($rb_minus(diff, 15))), 5), dice_n));
      if ((($a = (self['$is_int?'](experiencePoint))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        experiencePoint = experiencePoint.$to_i()
        } else {
        experiencePoint = self.$sprintf("%.1f", experiencePoint)
      };
      self.$debug("experiencePoint", experiencePoint);
      return experiencePoint;
    }, TMP_15.$$arity = 2);

    Opal.defn(self, '$is_int?', TMP_16 = function(v) {
      var self = this;

      return (v['$=='](v.$to_i()));
    }, TMP_16.$$arity = 1);

    return (Opal.defn(self, '$tandt_berserk', TMP_23 = function $$tandt_berserk(string, nick_e) {
      var $a, $b, TMP_17, self = this, output = nil, reg2 = nil, reg3 = nil, reg4 = nil, reg5 = nil, reg6 = nil, dice_c = nil, bonus = nil, isHyperBerserk = nil, dice_arr = nil, dice_now = nil, dice_str = nil, isFirstLoop = nil, n_max = nil, total_n = nil, bonus2 = nil;

      self.$debug("tandt_berserk string", string);
      output = "1";
      if ((($a = (/(^|\s)S?((\d+)[rR]6([\+\-\d]*)(\[(\w+)\])?)(\s|$)/i['$=~'](string))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return output
      };
      self.$debug("tandt_berserk matched");
      reg2 = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2));
      reg3 = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3));
      reg4 = (($a = $gvars['~']) === nil ? nil : $a['$[]'](4));
      reg5 = (($a = $gvars['~']) === nil ? nil : $a['$[]'](5));
      reg6 = (($a = $gvars['~']) === nil ? nil : $a['$[]'](6));
      string = reg2;
      dice_c = reg3.$to_i();
      bonus = 0;
      if ((($a = (reg4)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        bonus = self.$parren_killer("(0" + (reg4) + ")").$to_i()};
      isHyperBerserk = false;
      if ((($a = ((($b = reg5 !== false && reg5 !== nil && reg5 != null) ? (reg6['$=~'](/[Hh]/)) : reg5))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        isHyperBerserk = true};
      dice_arr = [];
      dice_now = 0;
      dice_str = "";
      isFirstLoop = true;
      n_max = 0;
      total_n = 0;
      bonus2 = 0;
      self.$debug("isHyperBerserk", isHyperBerserk);
      dice_arr.$push(dice_c);
      ($a = ($b = self).$loop, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this, $c, $d, TMP_18, $e, TMP_19, $f, TMP_20, $g, TMP_21, $h, TMP_22, dice_wk = nil, rollTotal = nil, rollDiceResultText = nil, roll_cnt1 = nil, rollDiceMaxCount = nil, roll_n_max = nil, roll_cnt_suc = nil, roll_cnt_re = nil, dice_num = nil, diceType = nil, dice_face = nil, min1 = nil, min2 = nil;

      self.$debug("loop dice_arr", dice_arr);
        dice_wk = dice_arr.$shift();
        self.$debug("roll dice_wk d6", dice_wk);
        $d = self.$roll(dice_wk, 6, (self.$sortType()['$&'](1))), $c = Opal.to_ary($d), rollTotal = ($c[0] == null ? nil : $c[0]), rollDiceResultText = ($c[1] == null ? nil : $c[1]), roll_cnt1 = ($c[2] == null ? nil : $c[2]), rollDiceMaxCount = ($c[3] == null ? nil : $c[3]), roll_n_max = ($c[4] == null ? nil : $c[4]), roll_cnt_suc = ($c[5] == null ? nil : $c[5]), roll_cnt_re = ($c[6] == null ? nil : $c[6]), $d;
        self.$debug("rollTotal, rollDiceResultText, roll_cnt1, rollDiceMaxCount, roll_n_max, roll_cnt_suc, roll_cnt_re", rollTotal, rollDiceResultText, roll_cnt1, rollDiceMaxCount, roll_n_max, roll_cnt_suc, roll_cnt_re);
        if ((($c = ($rb_ge(dice_wk, 2))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          dice_num = ($c = ($d = rollDiceResultText.$split(/,/)).$collect, $c.$$p = (TMP_18 = function(i){var self = TMP_18.$$s || this;
if (i == null) i = nil;
          return i.$to_i()}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18), $c).call($d);
          self.$debug("dice_num", dice_num);
          diceType = 6;
          dice_face = [];
          ($c = ($e = diceType).$times, $c.$$p = (TMP_19 = function(i){var self = TMP_19.$$s || this;
if (i == null) i = nil;
          return dice_face.$push(0)}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $c).call($e);
          ($c = ($f = dice_num).$each, $c.$$p = (TMP_20 = function(dice_o){var self = TMP_20.$$s || this, $g, $h;
if (dice_o == null) dice_o = nil;
          return ($g = $rb_minus(dice_o, 1), $h = dice_face, $h['$[]=']($g, $rb_plus($h['$[]']($g), 1)))}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20), $c).call($f);
          ($c = ($g = dice_face).$each, $c.$$p = (TMP_21 = function(dice_o){var self = TMP_21.$$s || this, $h;
if (dice_o == null) dice_o = nil;
          if ((($h = ($rb_ge(dice_o, 2))) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
              if ((($h = (isHyperBerserk)) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                dice_o = $rb_plus(dice_o, 1)};
              return dice_arr.$push(dice_o);
              } else {
              return nil
            }}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21), $c).call($g);
          if ((($c = ((($h = isFirstLoop !== false && isFirstLoop !== nil && isFirstLoop != null) ? ($rb_lt(dice_arr.$length(), 1)) : isFirstLoop))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            min1 = 0;
            min2 = 0;
            ($c = ($h = diceType).$times, $c.$$p = (TMP_22 = function(i){var self = TMP_22.$$s || this, $i, index = nil;
if (i == null) i = nil;
            index = $rb_minus($rb_minus(diceType, i), 1);
              self.$debug("diceType index", index);
              if ((($i = ($rb_gt(dice_face['$[]'](index), 0))) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
                min2 = min1;
                return min1 = index;
                } else {
                return nil
              };}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $c).call($h);
            self.$debug("min1, min2", min1, min2);
            bonus2 = ($rb_minus(min2, min1))['$-@']();
            if ((($c = (min2['$=='](5))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              rollDiceMaxCount = $rb_minus(rollDiceMaxCount, 1)};
            if ((($c = (isHyperBerserk)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              dice_arr.$push(3)
              } else {
              dice_arr.$push(2)
            };};};
        dice_now = $rb_plus(dice_now, rollTotal);
        if ((($c = (dice_str['$!='](""))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          dice_str = $rb_plus(dice_str, "][")};
        dice_str = $rb_plus(dice_str, rollDiceResultText);
        n_max = $rb_plus(n_max, rollDiceMaxCount);
        isFirstLoop = false;
        self.$debug("loop last chek dice_arr", dice_arr);
        if ((($c = (dice_arr.$length()['$=='](0))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          
          Opal.brk(nil, $brk)
          } else {
          return nil
        };}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17), $a).call($b);
      self.$debug("loop breaked");
      self.$debug("dice_now, bonus, bonus2", dice_now, bonus, bonus2);
      total_n = $rb_plus($rb_plus(dice_now, bonus), bonus2);
      dice_str = "[" + (dice_str) + "]";
      output = "" + (dice_now) + (dice_str);
      if ((($a = ($rb_lt(bonus2, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$debug("bonus2", bonus2);
        output = $rb_plus(output, "" + (bonus2));};
      self.$debug("bonus", bonus);
      if ((($a = ($rb_gt(bonus, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = $rb_plus(output, "+" + (bonus))
      } else if ((($a = ($rb_lt(bonus, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = $rb_plus(output, "" + (bonus))};
      if ((($a = ($rb_gt(self.$sendMode(), 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = (output['$=~'](/[^\d\[\]]+/))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          output = "" + (nick_e) + ": (" + (string) + ") ＞ " + (output) + " ＞ " + (total_n)
          } else {
          output = "" + (nick_e) + ": (" + (string) + ") ＞ " + (total_n)
        }
        } else {
        output = "" + (nick_e) + ": (" + (string) + ") ＞ " + (total_n)
      };
      if ((($a = (($rb_gt(n_max, 0)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = $rb_plus(output, " ＞ 悪意" + (n_max))};
      return output;
    }, TMP_23.$$arity = 2), nil) && 'tandt_berserk';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
