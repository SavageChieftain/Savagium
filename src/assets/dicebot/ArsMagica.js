/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$setPrefixes', '$=~', '$gsub', '$arsmagica_stress', '$!=', '$>=', '$to_i', '$marshalSignOfInequality', '$empty?', '$parren_killer', '$rand', '$==', '$times', '$+', '$push', '$sortType', '$sort', '$join', '$>', '$<', '$*', '$sub', '$sendMode', '$die', '$check_suc']);
  return (function($base, $super) {
    function $ArsMagica(){};
    var self = $ArsMagica = $klass($base, $super, 'ArsMagica', $ArsMagica);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_9, TMP_10, TMP_11, TMP_12, TMP_14;

    self.$setPrefixes(["ArS"]);

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      return self.sendMode = 2;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "アルスマギカ";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "ArsMagica";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "・ストレスダイス　(ArSx+y)\n　\"ArS(ボッチダイス)+(修正)\"です。判定にも使えます。Rコマンド(1R10+y[m])に読替をします。\n　ボッチダイスと修正は省略可能です。(ボッチダイスを省略すると1として扱います)\n　botchダイスの0の数が2以上の時は、数えて表示します。\n　（注意！） botchの判断が発生したときには、そのダイスを含めてロールした全てのダイスを[]の中に並べて表示します。\n　例) (1R10[5]) ＞ 0[0,1,8,0,8,1] ＞ Botch!\n　　最初の0が判断基準で、その右側5つがボッチダイスです。1*2,8*2,0*1なので1botchという訳です。\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$changeText', TMP_9 = function $$changeText(string) {
      var $a, $b, TMP_5, $c, TMP_6, $d, TMP_7, $e, TMP_8, self = this;

      if ((($a = (/ArS/i['$=~'](string))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return string
      };
      string = ($a = ($b = string).$gsub, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $c;

      return "1R10" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](2))) + "[" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))) + "]"}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b, /ArS(\d+)([^\d\s][\+\-\d]+)/i);
      string = ($a = ($c = string).$gsub, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $d;

      return "1R10" + ((($d = $gvars['~']) === nil ? nil : $d['$[]'](1)))}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($c, /ArS([^\d\s][\+\-\d]+)/i);
      string = ($a = ($d = string).$gsub, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $e;

      return "1R10[" + ((($e = $gvars['~']) === nil ? nil : $e['$[]'](1))) + "]"}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($d, /ArS(\d+)/i);
      string = ($a = ($e = string).$gsub, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

      return "1R10"}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($e, /ArS/i);
      return string;
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$dice_command_xRn', TMP_10 = function $$dice_command_xRn(string, nick_e) {
      var self = this;

      return self.$arsmagica_stress(string, nick_e);
    }, TMP_10.$$arity = 2);

    Opal.defn(self, '$check_nD10', TMP_11 = function $$check_nD10(total_n, dice_n, signOfInequality, diff, dice_cnt, dice_max, n1, n_max) {
      var $a, self = this;

      if ((($a = (signOfInequality['$!='](">="))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ""};
      if ((($a = ($rb_ge(total_n, diff))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ 成功"};
      return " ＞ 失敗";
    }, TMP_11.$$arity = 8);

    Opal.defn(self, '$check_1D10', TMP_12 = function $$check_1D10(total_n, dice_n, signOfInequality, diff, dice_cnt, dice_max, n1, n_max) {
      var $a, self = this;

      if ((($a = (signOfInequality['$!='](">="))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ""};
      if ((($a = ($rb_ge(total_n, diff))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ 成功"};
      return " ＞ 失敗";
    }, TMP_12.$$arity = 8);

    return (Opal.defn(self, '$arsmagica_stress', TMP_14 = function $$arsmagica_stress(string, nick_e) {
      var $a, $b, TMP_13, $c, self = this, output = nil, diff = nil, botch = nil, bonus = nil, crit_mul = nil, total = nil, signOfInequality = nil, bonusText = nil, die = nil, count0 = nil, dice_n = nil, crit_dice = nil;
      if ($gvars.bonus == null) $gvars.bonus = nil;

      output = "1";
      if ((($a = (/(^|\s)S?(1[rR]10([\+\-\d]*)(\[(\d+)\])?(([>=]+)(\d+))?)(\s|$)/i['$=~'](string))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return "1"
      };
      diff = 0;
      botch = 1;
      bonus = 0;
      crit_mul = 1;
      total = 0;
      signOfInequality = "";
      bonusText = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3));
      if ((($a = ((($b = $gvars['~']) === nil ? nil : $b['$[]'](4)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        botch = (($a = $gvars['~']) === nil ? nil : $a['$[]'](5)).$to_i()};
      if ((($a = ((($b = $gvars['~']) === nil ? nil : $b['$[]'](6)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        diff = (($a = $gvars['~']) === nil ? nil : $a['$[]'](8));
        signOfInequality = self.$marshalSignOfInequality((($a = $gvars['~']) === nil ? nil : $a['$[]'](7)));};
      if ((($a = (bonusText['$empty?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        bonus = self.$parren_killer("(0" + (bonusText) + ")").$to_i()
      };
      die = self.$rand(10);
      output = "(" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](2))) + ") ＞ ";
      if ((($a = (die['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        count0 = 0;
        dice_n = [];
        ($a = ($b = botch).$times, $a.$$p = (TMP_13 = function(i){var self = TMP_13.$$s || this, $c, botch_die = nil;
if (i == null) i = nil;
        botch_die = self.$rand(10);
          if ((($c = (botch_die['$=='](0))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            count0 = $rb_plus(count0, 1)};
          return dice_n.$push(botch_die);}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $a).call($b);
        if ((($a = (self.$sortType()['$!='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          dice_n = dice_n.$sort()};
        output = $rb_plus(output, "0[" + (die) + "," + (dice_n.$join(",")) + "]");
        if ((($a = (count0['$!='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          bonus = 0;
          if ((($a = ($rb_gt(count0, 1))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            output = $rb_plus(output, " ＞ " + (count0) + "Botch!")
            } else {
            output = $rb_plus(output, " ＞ Botch!")
          };
          signOfInequality = "";
          } else {
          if ((($a = ($rb_gt(bonus, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            output = $rb_plus(output, "+" + (bonus) + " ＞ " + (bonus))
          } else if ((($a = ($rb_lt(bonus, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            output = $rb_plus(output, "" + (bonus) + " ＞ " + (bonus))
            } else {
            output = $rb_plus(output, " ＞ 0")
          };
          total = bonus;
        };
      } else if ((($a = (die['$=='](1))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        crit_dice = "";
        while ((($c = (die['$=='](1))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
        crit_mul = $rb_times(crit_mul, 2);
        die = $rb_plus(self.$rand(10), 1);
        crit_dice = $rb_plus(crit_dice, "" + (die) + ",");};
        total = $rb_times(die, crit_mul);
        crit_dice = crit_dice.$sub(/,$/, "");
        output = $rb_plus(output, "" + (total));
        if ((($a = (self.$sendMode()['$!='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          output = $rb_plus(output, "[1," + (crit_dice) + "]")};
        total = $rb_plus(total, bonus);
        if ((($a = ($rb_gt(bonus, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          output = $rb_plus(output, "+" + (bonus) + " ＞ " + (total))
        } else if ((($a = ($rb_lt(bonus, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          output = $rb_plus(output, "" + (bonus) + " ＞ " + (total))};
        } else {
        total = $rb_plus(die, bonus);
        if ((($a = ($rb_gt(bonus, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          output = $rb_plus(output, "" + (die) + "+" + (bonus) + " ＞ " + (total))
        } else if ((($a = ($rb_lt(bonus, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          output = $rb_plus(output, "" + (self.$die($gvars.bonus)) + " ＞ " + (total))
          } else {
          output = $rb_plus(output, "" + (total))
        };
      };
      if ((($a = (signOfInequality['$!='](""))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = $rb_plus(output, self.$check_suc(total, 0, signOfInequality, diff, 1, 10, 0, 0))};
      return output;
    }, TMP_14.$$arity = 2), nil) && 'arsmagica_stress';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
