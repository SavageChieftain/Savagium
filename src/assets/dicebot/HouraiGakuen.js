/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$setPrefixes', '$===', '$getRollResult', '$getMedResult', '$getResResult', '$getInnyouResult', '$getHattokuResult', '$getGogyouResult', '$=~', '$to_i', '$roll', '$getCheckResult', '$getDiceListFromText', '$isFamble', '$isCritical', '$<=', '$sort', '$collect', '$split', '$getTargetFromValue', '$+', '$-', '$getResistCheckResult', '$getResultRank', '$>', '$<', '$index', '$times', '$==', '$%', '$<<', '$getOddEven', '$join', '$getGogyouTable', '$get_table_by_1d6']);
  return (function($base, $super) {
    function $HouraiGakuen(){};
    var self = $HouraiGakuen = $klass($base, $super, 'HouraiGakuen', $HouraiGakuen);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_17, TMP_19, TMP_20, TMP_21, TMP_22;

    self.$setPrefixes(["ROL.*", "MED\\(\\d+,\\d+\\)", "RES\\(\\d+,\\d+\\)", "INY.*", "HTK.*", "GOG.*"]);

    Opal.defn(self, '$gameName', TMP_1 = function $$gameName() {
      var self = this;

      return "蓬莱学園の冒険!!";
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_2 = function $$gameType() {
      var self = this;

      return "HouraiGakuen";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_3 = function $$getHelpMessage() {
      var self = this;

      return "・基本ロール：ROL(x+n)\n  ROLL(自分の能力値 + 簡単値 + 応石 or 蓬莱パワー)と記述します。3D6をロールし、成功したかどうかを表示します。\n  例）ROL(4+6)\n・対人判定：MED(x,y)\n  自分の能力値 x と 相手の能力値 y でロールを行い、成功したかどうかを表示します。\n  例）MED(5,2)\n・対抗判定：RES(x,y)\n  自分の能力値 x と 相手の能力値 y で相互にロールし、どちらが成功したかを表示します。両者とも成功 or 失敗の場合は引き分けとなります。\n  例）RES(6,4)\n・陰陽コマンド INY\n  例）Hourai : 陽（奇数の方が多い）\n・五行コマンド：GOG\n  例）Hourai : 五行表(3) → 五行【土】\n・八徳コマンド：HTK\n  例）Hourai : 仁義八徳は、【義】(奇数、奇数、偶数)\n";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$rollDiceCommand', TMP_4 = function $$rollDiceCommand(command) {
      var self = this, $case = nil;

      $case = command;if (/^ROL/i['$===']($case)) {return self.$getRollResult(command)}else if (/^MED/i['$===']($case)) {return self.$getMedResult(command)}else if (/^RES/i['$===']($case)) {return self.$getResResult(command)}else if (/^INY/i['$===']($case)) {return self.$getInnyouResult(command)}else if (/^HTK/i['$===']($case)) {return self.$getHattokuResult(command)}else if (/^GOG$/i['$===']($case)) {return self.$getGogyouResult(command)};
      return nil;
    }, TMP_4.$$arity = 1);

    (Opal.cvars['@@critical'] = "大成功");

    (Opal.cvars['@@success'] = "成功");

    (Opal.cvars['@@failure'] = "失敗");

    (Opal.cvars['@@famble'] = "大失敗");

    Opal.defn(self, '$getRollResult', TMP_5 = function $$getRollResult(command) {
      var $a, $b, self = this, target = nil, total = nil, diceText = nil, result = nil;

      if ((($a = (/rol([-\d]+)/i['$=~'](command))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      target = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$to_i();
      $b = self.$roll(3, 6), $a = Opal.to_ary($b), total = ($a[0] == null ? nil : $a[0]), diceText = ($a[1] == null ? nil : $a[1]), $b;
      result = self.$getCheckResult(diceText, total, target);
      return "(3d6<=" + (target) + ") ＞ 出目" + (diceText) + "＝合計" + (total) + " ＞ " + (result);
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$getCheckResult', TMP_6 = function $$getCheckResult(diceText, total, target) {
      var $a, self = this, diceList = nil;

      diceList = self.$getDiceListFromText(diceText);
      if ((($a = self.$isFamble(diceList)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($a = Opal.cvars['@@famble']) == null ? nil : $a)};
      if ((($a = self.$isCritical(diceList)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($a = Opal.cvars['@@critical']) == null ? nil : $a)};
      if ((($a = ($rb_le(total, target))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($a = Opal.cvars['@@success']) == null ? nil : $a)};
      return (($a = Opal.cvars['@@failure']) == null ? nil : $a);
    }, TMP_6.$$arity = 3);

    Opal.defn(self, '$getDiceListFromText', TMP_8 = function $$getDiceListFromText(diceText) {
      var $a, $b, TMP_7, self = this, diceList = nil;

      diceList = ($a = ($b = diceText.$split(/,/)).$collect, $a.$$p = (TMP_7 = function(i){var self = TMP_7.$$s || this;
if (i == null) i = nil;
      return i.$to_i()}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b).$sort();
      return diceList;
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$isFamble', TMP_9 = function $$isFamble(diceList) {
      var self = this;

      return diceList['$===']([6, 6, 6]);
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$isCritical', TMP_10 = function $$isCritical(diceList) {
      var self = this;

      return diceList['$===']([1, 2, 3]);
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$getMedResult', TMP_11 = function $$getMedResult(command) {
      var $a, $b, self = this, yourValue = nil, enemyValue = nil, target = nil, total = nil, diceText = nil, result = nil;

      if ((($a = (/med\((\d+),(\d+)\)/i['$=~'](command))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      yourValue = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$to_i();
      enemyValue = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$to_i();
      target = self.$getTargetFromValue(yourValue, enemyValue);
      $b = self.$roll(3, 6), $a = Opal.to_ary($b), total = ($a[0] == null ? nil : $a[0]), diceText = ($a[1] == null ? nil : $a[1]), $b;
      result = self.$getCheckResult(diceText, total, target);
      return "(あなたの値" + (yourValue) + "、相手の値" + (enemyValue) + "、3d6<=" + (target) + ") ＞ 出目" + (diceText) + "＝合計" + (total) + " ＞ " + (result);
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$getTargetFromValue', TMP_12 = function $$getTargetFromValue(yourValue, enemyValue) {
      var self = this;

      return $rb_plus(yourValue, ($rb_minus(10, enemyValue)));
    }, TMP_12.$$arity = 2);

    Opal.defn(self, '$getResResult', TMP_13 = function $$getResResult(command) {
      var $a, $b, self = this, yourValue = nil, enemyValue = nil, yourTarget = nil, enemyTarget = nil, yourTotal = nil, yourDiceText = nil, enemyTotal = nil, enemyDiceText = nil, yourResult = nil, enemyResult = nil, result = nil;

      if ((($a = (/res\((\d+),(\d+)\)/i['$=~'](command))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      yourValue = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$to_i();
      enemyValue = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$to_i();
      yourTarget = self.$getTargetFromValue(yourValue, enemyValue);
      enemyTarget = self.$getTargetFromValue(enemyValue, yourValue);
      $b = self.$roll(3, 6), $a = Opal.to_ary($b), yourTotal = ($a[0] == null ? nil : $a[0]), yourDiceText = ($a[1] == null ? nil : $a[1]), $b;
      $b = self.$roll(3, 6), $a = Opal.to_ary($b), enemyTotal = ($a[0] == null ? nil : $a[0]), enemyDiceText = ($a[1] == null ? nil : $a[1]), $b;
      yourResult = self.$getCheckResult(yourDiceText, yourTotal, yourTarget);
      enemyResult = self.$getCheckResult(enemyDiceText, enemyTotal, enemyTarget);
      result = self.$getResistCheckResult(yourResult, enemyResult);
      return "あなたの値" + (yourValue) + "、相手の値" + (enemyValue) + "\n(あなたのロール 3d6<=" + (yourTarget) + ") ＞ " + (yourDiceText) + "=" + (yourTotal) + " ＞ " + (yourResult) + "\n(相手のロール 3d6<=" + (enemyTarget) + ") ＞ " + (enemyDiceText) + "=" + (enemyTotal) + " ＞ " + (enemyResult) + "\n＞" + (result);
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$getResistCheckResult', TMP_14 = function $$getResistCheckResult(yourResult, enemyResult) {
      var $a, self = this, yourRank = nil, enemyRank = nil;

      yourRank = self.$getResultRank(yourResult);
      enemyRank = self.$getResultRank(enemyResult);
      if ((($a = $rb_gt(yourRank, enemyRank)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return "あなたが勝利"};
      if ((($a = $rb_lt(yourRank, enemyRank)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return "相手が勝利"};
      return "引き分け";
    }, TMP_14.$$arity = 2);

    Opal.defn(self, '$getResultRank', TMP_15 = function $$getResultRank(result) {
      var $a, self = this, ranks = nil;

      ranks = [(($a = Opal.cvars['@@famble']) == null ? nil : $a), (($a = Opal.cvars['@@failure']) == null ? nil : $a), (($a = Opal.cvars['@@success']) == null ? nil : $a), (($a = Opal.cvars['@@critical']) == null ? nil : $a)];
      return ranks.$index(result);
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$getInnyouResult', TMP_17 = function $$getInnyouResult(command) {
      var $a, $b, TMP_16, self = this, oddCount = nil, evenCount = nil;

      oddCount = 0;
      evenCount = 0;
      ($a = ($b = (3)).$times, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this, $c, $d, dice = nil;

      $d = self.$roll(1, 6), $c = Opal.to_ary($d), dice = ($c[0] == null ? nil : $c[0]), $d;
        if ((dice['$%'](2))['$=='](0)) {
          return evenCount = $rb_plus(evenCount, 1)
          } else {
          return oddCount = $rb_plus(oddCount, 1)
        };}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16), $a).call($b);
      if ((($a = $rb_lt(evenCount, oddCount)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return "陽（奇数の方が多い）"
        } else {
        return "陰（偶数の方が多い）"
      };
    }, TMP_17.$$arity = 1);

    Opal.defn(self, '$getHattokuResult', TMP_19 = function $$getHattokuResult(command) {
      var $a, $b, TMP_18, self = this, oddEvenList = nil, oddEvenText = nil, $case = nil;

      oddEvenList = [];
      ($a = ($b = (3)).$times, $a.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this;

      return oddEvenList['$<<'](self.$getOddEven())}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18), $a).call($b);
      oddEvenText = oddEvenList.$join("、");
      return (function() {$case = oddEvenText;if ("奇数、奇数、奇数"['$===']($case)) {return "仁義八徳は、【仁】(" + (oddEvenText) + ")"}else if ("奇数、奇数、偶数"['$===']($case)) {return "仁義八徳は、【義】(" + (oddEvenText) + ")"}else if ("奇数、偶数、奇数"['$===']($case)) {return "仁義八徳は、【礼】(" + (oddEvenText) + ")"}else if ("奇数、偶数、偶数"['$===']($case)) {return "仁義八徳は、【智】(" + (oddEvenText) + ")"}else if ("偶数、奇数、奇数"['$===']($case)) {return "仁義八徳は、【忠】(" + (oddEvenText) + ")"}else if ("偶数、奇数、偶数"['$===']($case)) {return "仁義八徳は、【信】(" + (oddEvenText) + ")"}else if ("偶数、偶数、奇数"['$===']($case)) {return "仁義八徳は、【孝】(" + (oddEvenText) + ")"}else if ("偶数、偶数、偶数"['$===']($case)) {return "仁義八徳は、【悌】(" + (oddEvenText) + ")"}else {return "異常終了"}})();
    }, TMP_19.$$arity = 1);

    Opal.defn(self, '$getOddEven', TMP_20 = function $$getOddEven() {
      var $a, $b, self = this, dice = nil;

      $b = self.$roll(1, 6), $a = Opal.to_ary($b), dice = ($a[0] == null ? nil : $a[0]), $b;
      if ((dice['$%'](2))['$=='](0)) {
        return "偶数"};
      return "奇数";
    }, TMP_20.$$arity = 0);

    Opal.defn(self, '$getGogyouResult', TMP_21 = function $$getGogyouResult(command) {
      var $a, $b, self = this, type = nil, table = nil, text = nil, number = nil, output = nil;

      type = "五行表";
      table = self.$getGogyouTable();
      $b = self.$get_table_by_1d6(table), $a = Opal.to_ary($b), text = ($a[0] == null ? nil : $a[0]), number = ($a[1] == null ? nil : $a[1]), $b;
      output = "" + (type) + "(" + (number) + ") ＞ " + (text);
      return output;
    }, TMP_21.$$arity = 1);

    return (Opal.defn(self, '$getGogyouTable', TMP_22 = function $$getGogyouTable() {
      var self = this, table = nil;

      table = ["五行【木】", "五行【火】", "五行【土】", "五行【金】", "五行【水】", "五行は【任意選択】"];
      return table;
    }, TMP_22.$$arity = 0), nil) && 'getGogyouTable';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
