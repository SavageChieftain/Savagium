/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$setPrefixes', '$gsub', '$==', '$getDiceList', '$[]', '$>=', '$>']);
  return (function($base, $super) {
    function $Gorilla(){};
    var self = $Gorilla = $klass($base, $super, 'Gorilla', $Gorilla);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_7, TMP_8;

    self.$setPrefixes(["G.*"]);

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

      TMP_1.$$p = null;
      return ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = null, $a).call($b);
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "ゴリラTRPG";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "Gorilla";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "2D6ロール時のゴリティカル自動判定を行います。\n\nG = 2D6のショートカット\n\n例) G>=7 : 2D6して7以上なら成功\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$isGetOriginalMessage', TMP_5 = function $$isGetOriginalMessage() {
      var self = this;

      return false;
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$changeText', TMP_7 = function $$changeText(string) {
      var $a, $b, TMP_6, self = this;

      string = ($a = ($b = string).$gsub, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $c;

      return "" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))) + "2D6"}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($b, /^(S)?G/i);
      return string;
    }, TMP_7.$$arity = 1);

    return (Opal.defn(self, '$check_2D6', TMP_8 = function $$check_2D6(totalValue, dice_n, signOfInequality, diff, dice_cnt, dice_max, n1, n_max) {
      var $a, self = this, diceList = nil;

      if ((($a = (dice_n['$=='](10))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        diceList = self.$getDiceList();
        if ((($a = (diceList['$[]'](0)['$=='](5))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " ＞ ゴリティカル（自動的成功）"};};
      if ((($a = (signOfInequality['$=='](">="))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ($rb_ge(totalValue, diff))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " ＞ 成功"}};
      if ((($a = (signOfInequality['$=='](">"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ($rb_gt(totalValue, diff))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " ＞ 成功"}};
      return " ＞ 失敗";
    }, TMP_8.$$arity = 8), nil) && 'check_2D6';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
