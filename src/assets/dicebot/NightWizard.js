/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$setPrefixes', '$=~', '$gsub', '$empty?', '$checkRoll', '$==', '$>=', '$debug', '$new', '$to_i', '$marshalSignOfInequality', '$split', '$parren_killer', '$nw_dice', '$!=', '$+', '$check_suc', '$<', '$getValuesFromText', '$roll', '$include?', '$getFumbleTextAndTotal', '$checkCritical', '$collect', '$getCriticalValue']);
  return (function($base, $super) {
    function $NightWizard(){};
    var self = $NightWizard = $klass($base, $super, 'NightWizard', $NightWizard);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_18, TMP_19, TMP_20;

    def.criticalValues = def.fumbleValues = nil;
    self.$setPrefixes(["\\d+NW"]);

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      return self.sendMode = 2;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "ナイトウィザード2版";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "NightWizard";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$prefixs', TMP_4 = function $$prefixs() {
      var self = this;

      return ["\\d+NW"];
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_5 = function $$getHelpMessage() {
      var self = this;

      return "・判定用コマンド　(nNW+m@x#y)\n　\"(基本値)NW(常時および常時に準じる特技等及び状態異常（省略可）)@(クリティカル値)#(ファンブル値)（常時以外の特技等及び味方の支援効果等の影響（省略可））\"でロールします。\n　Rコマンド(2R6m[n,m]c[x]f[y]>=t tは目標値)に読替されます。\n　クリティカル値、ファンブル値が無い場合は1や13などのあり得ない数値を入れてください。\n　例）12NW-5@7#2　　1NW　　50nw+5@7,10#2,5　50nw-5+10@7,10#2,5+15+25\n";
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$changeText', TMP_9 = function $$changeText(string) {
      var $a, $b, TMP_6, $c, TMP_7, $d, TMP_8, self = this;

      if ((($a = (string['$=~'](/NW/i))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return string
      };
      string = ($a = ($b = string).$gsub, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $c, $d, modify = nil;

      modify = (function() {if ((($c = (($d = $gvars['~']) === nil ? nil : $d['$[]'](5))['$empty?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return ""
          } else {
          return "," + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](5)))
        }; return nil; })();
        return "2R6m[" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))) + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](2))) + (modify) + "]c[" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](3))) + "]f[" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](4))) + "]";}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($b, /([\-\d]+)NW([\+\-\d]*)@([,\d]+)#([,\d]+)([\+\-\d]*)/i);
      string = ($a = ($c = string).$gsub, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $d;

      return "2R6m[" + ((($d = $gvars['~']) === nil ? nil : $d['$[]'](1))) + ((($d = $gvars['~']) === nil ? nil : $d['$[]'](2))) + "]"}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($c, /([\-\d]+)NW([\+\-\d]*)/i);
      return string = ($a = ($d = string).$gsub, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $e;

      return "2R6m[0" + ((($e = $gvars['~']) === nil ? nil : $e['$[]'](1))) + "]"}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($d, /NW([\+\-\d]*)/i);
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$dice_command_xRn', TMP_10 = function $$dice_command_xRn(string, nick_e) {
      var self = this;

      return self.$checkRoll(string, nick_e);
    }, TMP_10.$$arity = 2);

    Opal.defn(self, '$check_2D6', TMP_11 = function $$check_2D6(total_n, dice_n, signOfInequality, diff, dice_cnt, dice_max, n1, n_max) {
      var $a, self = this;

      if ((($a = (signOfInequality['$=='](">="))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return ""
      };
      if ((($a = ($rb_ge(total_n, diff))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ 成功"};
      return " ＞ 失敗";
    }, TMP_11.$$arity = 8);

    Opal.defn(self, '$checkRoll', TMP_12 = function $$checkRoll(string, nick_e) {
      var $a, $b, self = this, output = nil, num = nil, pattern = nil, base_and_modify = nil, criticalText = nil, criticalValue = nil, fumbleText = nil, fumbleValue = nil, judgeText = nil, judgeOperator = nil, judgeValue = nil, crit = nil, fumble = nil, signOfInequality = nil, diff = nil, base = nil, modify = nil, total = nil, out_str = nil;

      self.$debug("checkRoll string", string);
      output = "1";
      num = "[,\\d\\+\\-]+";
      pattern = "(^|\\s)S?(2R6m\\[(" + (num) + ")\\](c\\[(" + (num) + ")\\])?(f\\[(" + (num) + ")\\])?(([>=]+)(d+))?)( |$)";
      if ((($a = ($scope.get('Regexp').$new(pattern, (($scope.get('Regexp')).$$scope.get('IGNORECASE')))['$=~'](string))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return output
      };
      self.$debug("is valid string");
      string = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2));
      base_and_modify = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3));
      criticalText = (($a = $gvars['~']) === nil ? nil : $a['$[]'](4));
      criticalValue = (($a = $gvars['~']) === nil ? nil : $a['$[]'](5));
      fumbleText = (($a = $gvars['~']) === nil ? nil : $a['$[]'](6));
      fumbleValue = (($a = $gvars['~']) === nil ? nil : $a['$[]'](7));
      judgeText = (($a = $gvars['~']) === nil ? nil : $a['$[]'](8));
      judgeOperator = (($a = $gvars['~']) === nil ? nil : $a['$[]'](9));
      judgeValue = (($a = $gvars['~']) === nil ? nil : $a['$[]'](10)).$to_i();
      crit = "0";
      fumble = "0";
      signOfInequality = "";
      diff = 0;
      if ((($a = (criticalText)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        crit = criticalValue};
      if ((($a = (fumbleText)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        fumble = fumbleValue};
      if ((($a = (judgeText)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        diff = judgeValue;
        self.$debug("judgeOperator", judgeOperator);
        signOfInequality = self.$marshalSignOfInequality(judgeOperator);};
      $b = base_and_modify.$split(/,/), $a = Opal.to_ary($b), base = ($a[0] == null ? nil : $a[0]), modify = ($a[1] == null ? nil : $a[1]), $b;
      base = self.$parren_killer("(0" + (base) + ")").$to_i();
      modify = self.$parren_killer("(0" + (modify) + ")").$to_i();
      self.$debug("base_and_modify, base, modify", base_and_modify, base, modify);
      $b = self.$nw_dice(base, modify, crit, fumble), $a = Opal.to_ary($b), total = ($a[0] == null ? nil : $a[0]), out_str = ($a[1] == null ? nil : $a[1]), $b;
      output = "" + (nick_e) + ": (" + (string) + ") ＞ " + (out_str);
      if ((($a = (signOfInequality['$!='](""))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = $rb_plus(output, self.$check_suc(total, 0, signOfInequality, diff, 3, 6, 0, 0))};
      return output;
    }, TMP_12.$$arity = 2);

    Opal.defn(self, '$getValueText', TMP_13 = function $$getValueText(text) {
      var $a, self = this, value = nil;

      value = text.$to_i();
      if ((($a = ($rb_lt(value, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return "" + (value)};
      return "+" + (value);
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$nw_dice', TMP_14 = function $$nw_dice(base, modify, criticalText, fumbleText) {
      var $a, $b, self = this, total = nil, output = nil, dice_n = nil, dice_str = nil, fumble_text = nil;

      self.$debug("nw_dice : base, modify, criticalText, fumbleText", base, modify, criticalText, fumbleText);
      self.criticalValues = self.$getValuesFromText(criticalText, [10]);
      self.fumbleValues = self.$getValuesFromText(fumbleText, [5]);
      total = 0;
      output = "";
      self.$debug("@criticalValues", self.criticalValues);
      self.$debug("@fumbleValues", self.fumbleValues);
      $b = self.$roll(2, 6, 0), $a = Opal.to_ary($b), dice_n = ($a[0] == null ? nil : $a[0]), dice_str = ($a[1] == null ? nil : $a[1]), $b;
      total = 0;
      if ((($a = (self.fumbleValues['$include?'](dice_n))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        $b = self.$getFumbleTextAndTotal(base, modify, dice_str), $a = Opal.to_ary($b), fumble_text = ($a[0] == null ? nil : $a[0]), total = ($a[1] == null ? nil : $a[1]), $b;
        output = "" + (fumble_text) + " ＞ ファンブル ＞ " + (total);
        } else {
        total = $rb_plus(base, modify);
        $b = self.$checkCritical(total, dice_str, dice_n), $a = Opal.to_ary($b), total = ($a[0] == null ? nil : $a[0]), output = ($a[1] == null ? nil : $a[1]), $b;
      };
      return [total, output];
    }, TMP_14.$$arity = 4);

    Opal.defn(self, '$getFumbleTextAndTotal', TMP_15 = function $$getFumbleTextAndTotal(base, modify, dice_str) {
      var self = this, total = nil, text = nil;

      total = base;
      total = $rb_plus(total, -10);
      text = "" + (base) + "-10[" + (dice_str) + "]";
      return [text, total];
    }, TMP_15.$$arity = 3);

    Opal.defn(self, '$setCriticalValues', TMP_16 = function $$setCriticalValues(text) {
      var self = this;

      return self.criticalValues = self.$getValuesFromText(text, [10]);
    }, TMP_16.$$arity = 1);

    Opal.defn(self, '$getValuesFromText', TMP_18 = function $$getValuesFromText(text, default$) {
      var $a, $b, TMP_17, self = this;

      if ((($a = (text['$==']("0"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return default$};
      return ($a = ($b = text.$split(/,/)).$collect, $a.$$p = (TMP_17 = function(i){var self = TMP_17.$$s || this;
if (i == null) i = nil;
      return i.$to_i()}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17), $a).call($b);
    }, TMP_18.$$arity = 2);

    Opal.defn(self, '$checkCritical', TMP_19 = function $$checkCritical(total, dice_str, dice_n) {
      var $a, $b, $c, self = this, output = nil, criticalText = nil, criticalValue = nil;

      self.$debug("addRollWhenCritical begin total, dice_str", total, dice_str);
      output = "" + (total);
      criticalText = "";
      criticalValue = self.$getCriticalValue(dice_n);
      while ((($b = (criticalValue)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
      total = $rb_plus(total, 10);
      output = $rb_plus(output, "+10[" + (dice_str) + "]");
      criticalText = "＞ クリティカル ";
      $c = self.$roll(2, 6, 0), $b = Opal.to_ary($c), dice_n = ($b[0] == null ? nil : $b[0]), dice_str = ($b[1] == null ? nil : $b[1]), $c;
      criticalValue = self.$getCriticalValue(dice_n);
      self.$debug("criticalValue", criticalValue);};
      total = $rb_plus(total, dice_n);
      output = $rb_plus(output, "+" + (dice_n) + "[" + (dice_str) + "] " + (criticalText) + "＞ " + (total));
      return [total, output];
    }, TMP_19.$$arity = 3);

    return (Opal.defn(self, '$getCriticalValue', TMP_20 = function $$getCriticalValue(dice_n) {
      var self = this;

      return self.criticalValues['$include?'](dice_n);
    }, TMP_20.$$arity = 1), nil) && 'getCriticalValue';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
