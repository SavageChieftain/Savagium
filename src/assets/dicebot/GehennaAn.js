/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$setPrefixes', '$gsub', '$checkGehenaAn', '$=~', '$to_i', '$parren_killer', '$roll', '$&', '$sortType', '$collect', '$split', '$each', '$!=', '$<', '$>=', '$+', '$>', '$*', '$-', '$getAnastasisBonusText', '$==', '$/', '$getTougiBonus', '$get_table_by_number']);
  return (function($base, $super) {
    function $GehennaAn(){};
    var self = $GehennaAn = $klass($base, $super, 'GehennaAn', $GehennaAn);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_9, TMP_10, TMP_13, TMP_14, TMP_15;

    self.$setPrefixes(["(\\d+G\\d+|\\d+GA\\d+)"]);

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      self.sendMode = 3;
      return self.sortType = 3;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "ゲヘナ・アナスタシス";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "GehennaAn";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "戦闘判定と通常判定に対応。幸運の助け、連撃増加値(戦闘判定)、闘技チット(戦闘判定)を自動表示します。\n・戦闘判定　(nGAt+m)\n　ダイス数n、目標値t、修正値mで戦闘判定を行います。\n　幸運の助け、連撃増加値、闘技チットを自動処理します。\n・通常判定　(nGt+m)\n　ダイス数n、目標値t、修正値mで通常判定を行います。\n　幸運の助けを自動処理します。(連撃増加値、闘技チットを表示抑制します)\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$changeText', TMP_9 = function $$changeText(string) {
      var $a, $b, TMP_5, $c, TMP_6, $d, TMP_7, $e, TMP_8, self = this;

      string = ($a = ($b = string).$gsub, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $c;

      return "" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))) + "R6" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](3))) + ">=" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](2))) + "[1]"}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b, /(\d+)GA(\d+)([\+\-][\+\-\d]+)/);
      string = ($a = ($c = string).$gsub, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $d;

      return "" + ((($d = $gvars['~']) === nil ? nil : $d['$[]'](1))) + "R6>=" + ((($d = $gvars['~']) === nil ? nil : $d['$[]'](2))) + "[1]"}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($c, /(\d+)GA(\d+)/);
      string = ($a = ($d = string).$gsub, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $e;

      return "" + ((($e = $gvars['~']) === nil ? nil : $e['$[]'](1))) + "R6" + ((($e = $gvars['~']) === nil ? nil : $e['$[]'](3))) + ">=" + ((($e = $gvars['~']) === nil ? nil : $e['$[]'](2))) + "[0]"}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($d, /(\d+)G(\d+)([\+\-][\+\-\d]+)/);
      return string = ($a = ($e = string).$gsub, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $f;

      return "" + ((($f = $gvars['~']) === nil ? nil : $f['$[]'](1))) + "R6>=" + ((($f = $gvars['~']) === nil ? nil : $f['$[]'](2))) + "[0]"}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($e, /(\d+)G(\d+)/);
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$dice_command_xRn', TMP_10 = function $$dice_command_xRn(string, nick_e) {
      var self = this;

      return self.$checkGehenaAn(string, nick_e);
    }, TMP_10.$$arity = 2);

    Opal.defn(self, '$checkGehenaAn', TMP_13 = function $$checkGehenaAn(string, nick_e) {
      var $a, $b, TMP_11, $c, TMP_12, $d, self = this, output = nil, diceCount = nil, modText = nil, diff = nil, mode = nil, mod = nil, diceValue = nil, diceText = nil, diceArray = nil, dice_1st = nil, isLuck = nil, success = nil, failed = nil;

      output = "1";
      if ((($a = (/(^|\s)S?((\d+)[rR]6([\+\-\d]+)?([>=]+(\d+))(\[(\d)\]))(\s|$)/i['$=~'](string))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return output
      };
      string = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2));
      diceCount = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3)).$to_i();
      modText = (($a = $gvars['~']) === nil ? nil : $a['$[]'](4));
      diff = (($a = $gvars['~']) === nil ? nil : $a['$[]'](6)).$to_i();
      mode = (($a = $gvars['~']) === nil ? nil : $a['$[]'](8)).$to_i();
      mod = self.$parren_killer("(0" + (modText) + ")").$to_i();
      $b = self.$roll(diceCount, 6, (self.$sortType()['$&'](1))), $a = Opal.to_ary($b), diceValue = ($a[0] == null ? nil : $a[0]), diceText = ($a[1] == null ? nil : $a[1]), $b;
      diceArray = ($a = ($b = diceText.$split(/,/)).$collect, $a.$$p = (TMP_11 = function(i){var self = TMP_11.$$s || this;
if (i == null) i = nil;
      return i.$to_i()}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b);
      dice_1st = "";
      isLuck = true;
      diceValue = 0;
      ($a = ($c = diceArray).$each, $a.$$p = (TMP_12 = function(i){var self = TMP_12.$$s || this, $d, $e;
if (i == null) i = nil;
      if ((($d = (dice_1st['$!='](""))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          if ((($d = (((($e = dice_1st['$!='](i)) !== false && $e !== nil && $e != null) ? $e : $rb_lt(i, diff)))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            isLuck = false}
          } else {
          dice_1st = i
        };
        if ((($d = ($rb_ge(i, diff))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return diceValue = $rb_plus(diceValue, 1)
          } else {
          return nil
        };}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $a).call($c);
      if ((($a = ((($d = isLuck !== false && isLuck !== nil && isLuck != null) ? ($rb_gt(diceCount, 1)) : isLuck))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        diceValue = $rb_times(diceValue, 2)};
      output = "" + (diceValue) + "[" + (diceText) + "]";
      success = $rb_plus(diceValue, mod);
      if ((($a = ($rb_lt(success, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        success = 0};
      failed = $rb_minus(diceCount, diceValue);
      if ((($a = ($rb_lt(failed, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        failed = 0};
      if ((($a = ($rb_gt(mod, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = $rb_plus(output, "+" + (mod))
      } else if ((($a = ($rb_lt(mod, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = $rb_plus(output, "" + (mod))};
      if ((($a = (/[^\d\[\]]+/['$=~'](output))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = "" + (nick_e) + ": (" + (string) + ") ＞ " + (output) + " ＞ 成功" + (success) + "、失敗" + (failed)
        } else {
        output = "" + (nick_e) + ": (" + (string) + ") ＞ " + (output)
      };
      output = $rb_plus(output, self.$getAnastasisBonusText(mode, success));
      return output;
    }, TMP_13.$$arity = 2);

    Opal.defn(self, '$getAnastasisBonusText', TMP_14 = function $$getAnastasisBonusText(mode, success) {
      var $a, self = this, ma_bonus = nil, bonus_str = nil;

      if ((($a = (mode['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ""};
      ma_bonus = ($rb_divide(($rb_minus(success, 1)), 2)).$to_i();
      if ((($a = ($rb_gt(ma_bonus, 7))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        ma_bonus = 7};
      bonus_str = "";
      if ((($a = ($rb_gt(ma_bonus, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        bonus_str = $rb_plus(bonus_str, "連撃[+" + (ma_bonus) + "]/")};
      bonus_str = $rb_plus(bonus_str, "闘技[" + (self.$getTougiBonus(success)) + "]");
      return " ＞ " + (bonus_str);
    }, TMP_14.$$arity = 2);

    return (Opal.defn(self, '$getTougiBonus', TMP_15 = function $$getTougiBonus(success) {
      var self = this, table = nil;

      table = [[6, "1"], [13, "2"], [18, "3"], [22, "4"], [99, "5"]];
      return self.$get_table_by_number(success, table);
    }, TMP_15.$$arity = 1), nil) && 'getTougiBonus';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
