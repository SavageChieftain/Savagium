/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$==', '$>=', '$<=', '$to_i', '$/', '$-', '$*', '$+']);
  return (function($base, $super) {
    function $Gundog(){};
    var self = $Gundog = $klass($base, $super, 'Gundog', $Gundog);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6;

    Opal.defn(self, '$gameName', TMP_1 = function $$gameName() {
      var self = this;

      return "ガンドッグ";
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_2 = function $$gameType() {
      var self = this;

      return "Gundog";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$prefixs', TMP_3 = function $$prefixs() {
      var self = this;

      return [];
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "失敗、成功、クリティカル、ファンブルとロールの達成値の自動判定を行います。\nnD9ロールも対応。\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$check_1D100', TMP_5 = function $$check_1D100(total_n, dice_n, signOfInequality, diff, dice_cnt, dice_max, n1, n_max) {
      var $a, self = this, dig10 = nil, dig1 = nil;

      if ((($a = (signOfInequality['$==']("<="))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return ""
      };
      if ((($a = ($rb_ge(total_n, 100))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ ファンブル"};
      if ((($a = ($rb_le(total_n, 1))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ 絶対成功(達成値1+SL)"};
      if ((($a = ($rb_le(total_n, diff))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        dig10 = ($rb_divide(total_n, 10)).$to_i();
        dig1 = $rb_minus((total_n), $rb_times(dig10, 10));
        if ((($a = ($rb_ge(dig10, 10))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          dig10 = 0};
        if ((($a = ($rb_ge(dig1, 10))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          dig1 = 0};
        if ((($a = ($rb_le(dig1, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " ＞ クリティカル(達成値20+SL)"};
        return " ＞ 成功(達成値" + (($rb_plus(dig10, dig1))) + "+SL)";};
      return " ＞ 失敗";
    }, TMP_5.$$arity = 8);

    return (Opal.defn(self, '$isD9', TMP_6 = function $$isD9() {
      var self = this;

      return true;
    }, TMP_6.$$arity = 0), nil) && 'isD9';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
