/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$setPrefixes', '$==', '$<=', '$>=', '$+', '$getRandumMonster', '$upcase', '$===', '$to_i', '$getMonster', '$getColorTable', '$get_table_by_1d6', '$getMonsterTables', '$-', '$get_table_by_2d6', '$[]', '$<', '$index', '$debug', '$nil?']);
  return (function($base, $super) {
    function $CardRanker(){};
    var self = $CardRanker = $klass($base, $super, 'CardRanker', $CardRanker);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10;

    self.$setPrefixes(["RM", "CM.*"]);

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      self.sendMode = 2;
      self.sortType = 1;
      return self.d66Type = 2;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "カードランカー";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "CardRanker";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "ランダムでモンスターカードを選ぶ (RM)\n特定のモンスターカードを選ぶ (CMxy　x：色、y：番号）\n　白：W、青：U、緑：V、金：G、赤：R、黒：B\n　例）CMW1→白の2：白竜　CMG12→金の12：土精霊\n場所表 (ST)\n街中場所表 (CST)\n郊外場所表 (OST)\n学園場所表 (SST)\n運命表 (DT)\n大会運命表 (TDT)\n学園運命表 (GDT)\n崩壊運命表 (CDT)\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$check_2D6', TMP_5 = function $$check_2D6(total_n, dice_n, signOfInequality, diff, dice_cnt, dice_max, n1, n_max) {
      var $a, self = this;

      if ((($a = (signOfInequality['$=='](">="))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return ""
      };
      if ((($a = ($rb_le(dice_n, 2))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ ファンブル"
      } else if ((($a = ($rb_ge(dice_n, 12))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $rb_plus(" ＞ スペシャル ＞ ", self.$getRandumMonster())
      } else if ((($a = ($rb_ge(total_n, diff))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ 成功"
        } else {
        return " ＞ 失敗"
      };
    }, TMP_5.$$arity = 8);

    Opal.defn(self, '$rollDiceCommand', TMP_6 = function $$rollDiceCommand(command) {
      var $a, self = this, $case = nil, color = nil, index = nil;

      command = command.$upcase();
      $case = command;if (/^RM$/i['$===']($case)) {return self.$getRandumMonster()}else if (/^CM(\w)(\d+)$/i['$===']($case)) {color = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$upcase();
      index = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$to_i();
      return self.$getMonster(color, index);};
      return nil;
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$getRandumMonster', TMP_7 = function $$getRandumMonster() {
      var $a, $b, self = this, type = nil, colorTable = nil, color = nil, colorIndex = nil, monsters = nil, monsterName = nil, monsterIndex = nil, output = nil;

      type = "ランダムモンスター選択";
      colorTable = self.$getColorTable();
      $b = self.$get_table_by_1d6(colorTable), $a = Opal.to_ary($b), color = ($a[0] == null ? nil : $a[0]), colorIndex = ($a[1] == null ? nil : $a[1]), $b;
      monsters = self.$getMonsterTables($rb_minus(colorIndex, 1));
      $b = self.$get_table_by_2d6(monsters), $a = Opal.to_ary($b), monsterName = ($a[0] == null ? nil : $a[0]), monsterIndex = ($a[1] == null ? nil : $a[1]), $b;
      output = "" + (type) + "(" + (colorIndex) + "," + (monsterIndex) + ") ＞ " + (color) + "の" + (monsterIndex) + "：" + (monsterName);
      return output;
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$getColorTable', TMP_8 = function $$getColorTable() {
      var self = this;

      return ["白", "青", "緑", "金", "赤", "黒"];
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$getMonsterTables', TMP_9 = function $$getMonsterTables(colorIndex) {
      var self = this, tables = nil;

      tables = [["白竜", "僧侶", "格闘家", "斧使い", "剣士", "槍士", "歩兵", "弓兵", "砲兵", "天使", "軍神"], ["水竜", "魚", "魚人", "イカ", "蟹", "探偵", "海賊", "魔術師", "使い魔", "雲", "水精霊"], ["緑竜", "ワーム", "鳥人", "鳥", "獣", "獣人", "エルフ", "妖精", "昆虫", "植物", "森精霊"], ["金竜", "宝石", "岩石", "鋼", "錬金術師", "魔法生物", "ドワーフ", "機械", "運命", "女神", "土精霊"], ["火竜", "竜人", "恐竜", "戦車", "蛮族", "小鬼", "大鬼", "巨人", "雷", "炎", "火精霊"], ["黒竜", "闇騎士", "怪物", "忍者", "妖怪", "蝙蝠", "吸血鬼", "不死者", "幽霊", "悪魔", "邪神"]];
      return tables['$[]'](colorIndex);
    }, TMP_9.$$arity = 1);

    return (Opal.defn(self, '$getMonster', TMP_10 = function $$getMonster(color, monsterIndex) {
      var $a, self = this, type = nil, colorWords = nil, colorIndex = nil, colorTable = nil, monsters = nil, monsterName = nil, output = nil;

      if ((($a = ($rb_lt(monsterIndex, 2))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil};
      type = "モンスター選択";
      colorWords = ["W", "U", "V", "G", "R", "B"];
      colorIndex = colorWords.$index(color);
      self.$debug("colorIndex");
      if ((($a = (colorIndex['$nil?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil};
      colorTable = self.$getColorTable();
      color = colorTable['$[]'](colorIndex);
      monsters = self.$getMonsterTables(colorIndex);
      self.$debug("monsters", monsters);
      self.$debug("monsterIndex", monsterIndex);
      monsterName = monsters['$[]']($rb_minus(monsterIndex, 2));
      if ((($a = (monsterName['$nil?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil};
      output = "" + (type) + " ＞ " + (color) + "の" + (monsterIndex) + "：" + (monsterName);
      return output;
    }, TMP_10.$$arity = 2), nil) && 'getMonster';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
