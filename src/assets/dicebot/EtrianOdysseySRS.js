/* Generated by Opal 0.10.5 */
Opal.modules["diceBot/SRS"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$setPrefixes', '$checkRoll', '$empty?', '$=~', '$to_i', '$nil?', '$parren_killer', '$roll', '$+', '$<', '$abs', '$>=', '$<=']);
  return (function($base, $super) {
    function $SRS(){};
    var self = $SRS = $klass($base, $super, 'SRS', $SRS);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6;

    def.sortType = nil;
    self.$setPrefixes(["2D6.*"]);

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      self.sendMode = 2;
      return self.sortType = 1;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "Standard RPG System";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "SRS";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "・判定\n　・通常判定　　　　　　2D6+m>=t[c,f]\n　　修正値m,目標値t,クリティカル値c,ファンブル値fで判定ロールを行います。\n　　クリティカル値、ファンブル値は省略可能です。([]ごと省略できます)\n　　自動成功、自動失敗、成功、失敗を自動表示します。\n\n　　例) 2d6+2>=10       修整+2、目標値10で判定\n　　例) 2d6+2>=10[11]   ↑をクリティカル値11で判定\n　　例) 2d6+2>=10[12,4] ↑をクリティカル値12、ファンブル値4で判定\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$rollDiceCommand', TMP_5 = function $$rollDiceCommand(command) {
      var $a, self = this, result = nil;

      result = self.$checkRoll(command);
      if ((($a = (result['$empty?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil
        } else {
        return result
      };
    }, TMP_5.$$arity = 1);

    return (Opal.defn(self, '$checkRoll', TMP_6 = function $$checkRoll(string) {
      var $a, $b, $c, self = this, output = nil, crit = nil, fumble = nil, modText = nil, target = nil, mod = nil, total = nil, dice_str = nil, total_n = nil;

      output = "";
      crit = 12;
      fumble = 2;
      if ((($a = (/^2D6([\+\-\d]*)>=(\d+)(\[(\d+)?(,(\d+))?\])?$/i['$=~'](string))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return output
      };
      modText = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1));
      target = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$to_i();
      if ((($a = ((($b = $gvars['~']) === nil ? nil : $b['$[]'](4)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        crit = (($a = $gvars['~']) === nil ? nil : $a['$[]'](4)).$to_i()};
      if ((($a = ((($b = $gvars['~']) === nil ? nil : $b['$[]'](6)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        fumble = (($a = $gvars['~']) === nil ? nil : $a['$[]'](6)).$to_i()};
      mod = 0;
      if ((($a = (modText['$nil?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        mod = self.$parren_killer("(0" + (modText) + ")")
      };
      $b = self.$roll(2, 6, ($c = self.sortType, $c !== false && $c !== nil && $c != null ?1 : $c)), $a = Opal.to_ary($b), total = ($a[0] == null ? nil : $a[0]), dice_str = ($a[1] == null ? nil : $a[1]), $b;
      total_n = $rb_plus(total, mod.$to_i());
      if ((($a = ($rb_lt(mod.$to_i(), 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = "" + (total) + "[" + (dice_str) + "]－" + (mod.$to_i().$abs()) + " ＞ " + (total_n)
        } else {
        output = "" + (total) + "[" + (dice_str) + "]＋" + (mod) + " ＞ " + (total_n)
      };
      if ((($a = ($rb_ge(total, crit))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = $rb_plus(output, " ＞ 自動成功")
      } else if ((($a = ($rb_le(total, fumble))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = $rb_plus(output, " ＞ 自動失敗")
      } else if ((($a = ($rb_ge(total_n, target))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = $rb_plus(output, " ＞ 成功")
        } else {
        output = $rb_plus(output, " ＞ 失敗")
      };
      output = "(" + (string) + ") ＞ " + (output);
      return output;
    }, TMP_6.$$arity = 1), nil) && 'checkRoll';
  })($scope.base, $scope.get('DiceBot'))
};

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$setPrefixes', '$gsub']);
  self.$require("diceBot/SRS");
  return (function($base, $super) {
    function $EtrianOdysseySRS(){};
    var self = $EtrianOdysseySRS = $klass($base, $super, 'EtrianOdysseySRS', $EtrianOdysseySRS);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_6;

    self.$setPrefixes(["2D6.*", "EO.*", "SQ.*"]);

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      self.sendMode = 2;
      self.d66Type = 1;
      return self.sortType = 1;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "世界樹の迷宮SRS";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "EtrianOdysseySRS";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "・判定\n　・通常判定　　　　　　2D6+m>=t[c,f]\n　　修正値m,目標値t,クリティカル値c,ファンブル値fで判定ロールを行います。\n　　クリティカル値、ファンブル値は省略可能です。([]ごと省略できます)\n　　自動成功、自動失敗、成功、失敗を自動表示します。\n\n　　例) 2d6+2>=10       修整+2、目標値10で判定\n　　例) 2d6+2>=10[11]   ↑をクリティカル値11で判定\n　　例) 2d6+2>=10[12,4] ↑をクリティカル値12、ファンブル値4で判定\n　　例) SQ+2>=10        2d6+2>=10と同じ（SQが2D6のショートカットコマンド）\n \n・D66ダイス(入れ替え無し)あり\n";
    }, TMP_4.$$arity = 0);

    return (Opal.defn(self, '$changeText', TMP_6 = function $$changeText(string) {
      var $a, $b, TMP_5, self = this;

      string = ($a = ($b = string).$gsub, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $c;

      return "" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))) + "2D6"}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b, /^(S)?(EO|SQ)/i);
      return string;
    }, TMP_6.$$arity = 1), nil) && 'changeText';
  })($scope.base, $scope.get('SRS'));
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
