/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$setPrefixes', '$debug', '$===', '$getaRoll', '$empty?', '$roll', '$collect', '$to_i', '$split', '$+', '$[]']);
  return (function($base, $super) {
    function $Paranoia(){};
    var self = $Paranoia = $klass($base, $super, 'Paranoia', $Paranoia);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_8;

    self.$setPrefixes(["geta"]);

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      return ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "パラノイア";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "Paranoia";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "※「パラノイア」は完璧なゲームであるため特殊なダイスコマンドを必要としません。\n※このダイスボットは部屋のシステム名表示用となります。\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$isGetOriginalMessage', TMP_5 = function $$isGetOriginalMessage() {
      var self = this;

      return true;
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$rollDiceCommand', TMP_6 = function $$rollDiceCommand(command) {
      var $a, self = this, result = nil, $case = nil;

      self.$debug("rollDiceCommand command", command);
      result = "";
      $case = command;if (/geta/i['$===']($case)) {result = self.$getaRoll()};
      if ((($a = result['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil};
      return "" + (command) + " ＞ " + (result);
    }, TMP_6.$$arity = 1);

    return (Opal.defn(self, '$getaRoll', TMP_8 = function $$getaRoll() {
      var $a, $b, TMP_7, self = this, result = nil, _ = nil, diceText = nil, diceList = nil, getaString = nil, $case = nil;

      result = "";
      $b = self.$roll(1, 2), $a = Opal.to_ary($b), _ = ($a[0] == null ? nil : $a[0]), diceText = ($a[1] == null ? nil : $a[1]), $b;
      diceList = ($a = ($b = diceText.$split(/,/)).$collect, $a.$$p = (TMP_7 = function(i){var self = TMP_7.$$s || this;
if (i == null) i = nil;
      return i.$to_i()}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b);
      result = $rb_plus(result, "幸福ですか？ ＞ ");
      getaString = "";
      $case = (diceList['$[]'](0));if ((1)['$===']($case)) {getaString = "幸福です"}else if ((2)['$===']($case)) {getaString = "幸福ではありません"};
      result = $rb_plus(result, getaString);
      return result;
    }, TMP_8.$$arity = 0), nil) && 'getaRoll';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
