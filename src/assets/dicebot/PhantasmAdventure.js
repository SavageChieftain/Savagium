/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$==', '$<', '$-', '$>', '$+', '$roll', '$>=', '$<=', '$sendMode', '$*']);
  return (function($base, $super) {
    function $PhantasmAdventure(){};
    var self = $PhantasmAdventure = $klass($base, $super, 'PhantasmAdventure', $PhantasmAdventure);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5;

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      return self.sendMode = 2;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "ファンタズムアドベンチャー";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "PhantasmAdventure";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "成功、失敗、決定的成功、決定的失敗の表示とクリティカル・ファンブル値計算の実装。\n";
    }, TMP_4.$$arity = 0);

    return (Opal.defn(self, '$check_1D20', TMP_5 = function $$check_1D20(total_n, dice_n, signOfInequality, diff, dice_cnt, dice_max, n1, n_max) {
      var $a, $b, self = this, skill_mod = nil, fumble = nil, critical = nil, dice_now = nil, fum_num = nil, fum_str = nil, crit_num = nil;

      if ((($a = (signOfInequality['$==']("<="))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return ""
      };
      skill_mod = 0;
      if ((($a = ($rb_lt(diff, 1))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        skill_mod = $rb_minus(diff, 1)
      } else if ((($a = ($rb_gt(diff, 20))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        skill_mod = $rb_minus(diff, 20)};
      fumble = $rb_plus(20, skill_mod);
      if ((($a = ($rb_gt(fumble, 20))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        fumble = 20};
      critical = $rb_plus(1, skill_mod);
      $b = self.$roll(1, 20), $a = Opal.to_ary($b), dice_now = ($a[0] == null ? nil : $a[0]), $b;
      if ((($a = (((($b = $rb_ge(total_n, fumble)) !== false && $b !== nil && $b != null) ? $b : $rb_ge(total_n, 20)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        fum_num = $rb_minus(dice_now, skill_mod);
        if ((($a = ($rb_gt(fum_num, 20))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          fum_num = 20};
        if ((($a = ($rb_lt(fum_num, 1))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          fum_num = 1};
        if ((($a = ($rb_le(self.$sendMode(), 1))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " ＞ 致命的失敗(" + (fum_num) + ")"};
        fum_str = "" + (dice_now);
        if ((($a = ($rb_lt(skill_mod, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          fum_str = $rb_plus(fum_str, "+" + ($rb_times(skill_mod, -1)) + "=" + (fum_num))
          } else {
          fum_str = $rb_plus(fum_str, "-" + (skill_mod) + "=" + (fum_num))
        };
        return " ＞ 致命的失敗(" + (fum_str) + ")";
      } else if ((($a = (((($b = $rb_le(total_n, critical)) !== false && $b !== nil && $b != null) ? $b : $rb_le(total_n, 1)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        crit_num = $rb_plus(dice_now, skill_mod);
        if ((($a = ($rb_gt(crit_num, 20))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          crit_num = 20};
        if ((($a = ($rb_lt(crit_num, 1))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          crit_num = 1};
        if ((($a = ($rb_lt(skill_mod, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " ＞ 成功"};
        if ((($a = ($rb_gt(self.$sendMode(), 1))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " ＞ 決定的成功(" + (dice_now) + "+" + (skill_mod) + "=" + (crit_num) + ")"};
        return " ＞ 決定的成功(" + (crit_num) + ")";
      } else if ((($a = ($rb_le(total_n, diff))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ 成功"
        } else {
        return " ＞ 失敗"
      };
    }, TMP_5.$$arity = 8), nil) && 'check_1D20';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
