/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$setPrefixes', '$gsub', '$torg_check', '$=~', '$debug', '$to_i', '$parren_killer', '$torg_dice', '$get_torg_bonus', '$>', '$+', '$to_s', '$!=', '$roll', '$shift', '$empty?', '$==', '$upcase', '$===', '$get_torg_success_level', '$get_torg_interaction_result_intimidate_test', '$get_torg_interaction_result_taunt_trick', '$get_torg_interaction_result_maneuver', '$get_torg_damage_ords', '$get_torg_damage_posibility', '$get_torg_bonus_text', '$get_torg_table_result', '$each', '$[]', '$get_torg_damage', '$<', '$-', '$length', '$<=', '$/', '$split', '$join', '$getTorgBonusOutputTextWhenModDefined']);
  return (function($base, $super) {
    function $Torg(){};
    var self = $Torg = $klass($base, $super, 'Torg', $Torg);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22;

    self.$setPrefixes(["(TG.*|RT.*|Result.*|IT.*|Initimidate.*|TT.*|Taunt.*|Trick.*|CT.*|MT.*|Maneuver.*|ODT.*|ords.*|odamage.*|DT.*|damage.*|BT.*|bonus.*|total.*)"]);

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      return self.sendMode = 2;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "トーグ";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "TORG";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "・判定　(TGm)\n　TORG専用の判定コマンドです。\n　\"TG(技能基本値)\"でロールします。Rコマンドに読替されます。\n　振り足しを自動で行い、20の出目が出たときには技能無し値も並記します。\n・各種表　\"(表コマンド)(数値)\"で振ります。\n　・一般結果表 成功度出力「RTx or RESULTx」\n　・威圧/威嚇 対人行為結果表「ITx or INTIMIDATEx or TESTx」\n　・挑発/トリック 対人行為結果表「TTx or TAUNTx or TRICKx or CTx」\n　・間合い 対人行為結果表「MTx or MANEUVERx」\n　・オーズ（一般人）ダメージ　「ODTx or ORDSx or ODAMAGEx」\n　・ポシビリティー能力者ダメージ「DTx or DAMAGEx」\n　・ボーナス表「BTx+y or BONUSx+y or TOTALx+y」 xは数値, yは技能基本値\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$changeText', TMP_6 = function $$changeText(string) {
      var $a, $b, TMP_5, self = this;

      string = string.$gsub(/Result/i, "RT");
      string = string.$gsub(/(Intimidate|Test)/i, "IT");
      string = string.$gsub(/(Taunt|Trick|CT)/i, "TT");
      string = string.$gsub(/Maneuver/i, "MT");
      string = string.$gsub(/(ords|odamage)/i, "ODT");
      string = string.$gsub(/damage/i, "DT");
      string = string.$gsub(/(bonus|total)/i, "BT");
      string = ($a = ($b = string).$gsub, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $c;

      return "1R20+" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1)))}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b, /TG(\d+)/i);
      string = string.$gsub(/TG/i, "1R20");
      return string;
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$dice_command_xRn', TMP_7 = function $$dice_command_xRn(string, nick_e) {
      var self = this;

      return self.$torg_check(string, nick_e);
    }, TMP_7.$$arity = 2);

    Opal.defn(self, '$torg_check', TMP_8 = function $$torg_check(string, nick_e) {
      var $a, $b, self = this, output = nil, mod = nil, skilled = nil, unskilled = nil, dice_str = nil, sk_bonus = nil;

      output = "1";
      if ((($a = (/(^|\s)S?(1R20([+-]\d+)*)(\s|$)/i['$=~'](string))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return "1"
      };
      string = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2));
      mod = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3));
      self.$debug(mod);
      if ((($a = (mod)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        mod = self.$parren_killer("(0" + (mod) + ")").$to_i()};
      self.$debug(mod);
      mod = mod.$to_i();
      $b = self.$torg_dice(), $a = Opal.to_ary($b), skilled = ($a[0] == null ? nil : $a[0]), unskilled = ($a[1] == null ? nil : $a[1]), dice_str = ($a[2] == null ? nil : $a[2]), $b;
      sk_bonus = self.$get_torg_bonus(skilled);
      if ((($a = (mod)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ($rb_gt(mod, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          output = "" + (sk_bonus) + "[" + (dice_str) + "]+" + (mod)
          } else {
          output = "" + (sk_bonus) + "[" + (dice_str) + "]" + (mod)
        }
        } else {
        output = "" + (sk_bonus) + "[" + (dice_str) + "]"
      };
      output = $rb_plus(output, $rb_plus(" ＞ ", ($rb_plus(sk_bonus, mod)).$to_s()));
      if ((($a = (skilled['$!='](unskilled))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = $rb_plus(output, $rb_plus($rb_plus("(技能無", ($rb_plus(self.$get_torg_bonus(unskilled), mod)).$to_s()), ")"))};
      output = "" + (nick_e) + ": (" + (string) + ") ＞ " + (output);
      return output;
    }, TMP_8.$$arity = 2);

    Opal.defn(self, '$torg_dice', TMP_9 = function $$torg_dice() {
      var $a, $b, self = this, isSkilledCritical = nil, isCritical = nil, skilled = nil, unskilled = nil, dice_str = nil, dummy = nil, dice_n = nil;

      isSkilledCritical = true;
      isCritical = true;
      skilled = 0;
      unskilled = 0;
      dice_str = "";
      while ((($b = (isSkilledCritical)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
      dummy = self.$roll(1, 20, 0);
      dice_n = dummy.$shift();
      skilled = $rb_plus(skilled, dice_n);
      if ((($b = (isCritical)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        unskilled = $rb_plus(unskilled, dice_n)};
      if ((($b = (dice_str['$empty?']())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        } else {
        dice_str = $rb_plus(dice_str, ",")
      };
      dice_str = $rb_plus(dice_str, "" + (dice_n));
      if ((($b = (dice_n['$=='](20))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        isCritical = false
      } else if ((($b = (dice_n['$!='](10))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        isSkilledCritical = false;
        isCritical = false;};};
      return [skilled, unskilled, dice_str];
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$rollDiceCommand', TMP_10 = function $$rollDiceCommand(command) {
      var $a, $b, self = this, string = nil, output = nil, ttype = nil, value = nil, type = nil, num = nil, $case = nil;

      string = command.$upcase();
      output = "1";
      ttype = "";
      value = 0;
      if ((($a = (/([RITMDB]T)(\d+([\+\-]\d+)*)/i['$=~'](string))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return "1"
      };
      type = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1));
      num = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2));
      $case = type;if ("RT"['$===']($case)) {value = self.$parren_killer("(0" + (num) + ")").$to_i();
      output = self.$get_torg_success_level(value);
      ttype = "一般結果";}else if ("IT"['$===']($case)) {value = self.$parren_killer("(0" + (num) + ")").$to_i();
      output = self.$get_torg_interaction_result_intimidate_test(value);
      ttype = "威圧/威嚇";}else if ("TT"['$===']($case)) {value = self.$parren_killer("(0" + (num) + ")").$to_i();
      output = self.$get_torg_interaction_result_taunt_trick(value);
      ttype = "挑発/トリック";}else if ("MT"['$===']($case)) {value = self.$parren_killer("(0" + (num) + ")").$to_i();
      output = self.$get_torg_interaction_result_maneuver(value);
      ttype = "間合い";}else if ("DT"['$===']($case)) {value = self.$parren_killer("(0" + (num) + ")").$to_i();
      if ((($a = (string['$=~'](/ODT/i))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = self.$get_torg_damage_ords(value);
        ttype = "オーズダメージ";
        } else {
        output = self.$get_torg_damage_posibility(value);
        ttype = "ポシビリティ能力者ダメージ";
      };}else if ("BT"['$===']($case)) {$b = self.$get_torg_bonus_text(num), $a = Opal.to_ary($b), output = ($a[0] == null ? nil : $a[0]), value = ($a[1] == null ? nil : $a[1]), $b;
      ttype = "ボーナス";};
      if ((($a = (ttype['$!='](""))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = "" + (ttype) + "表[" + (value) + "] ＞ " + (output)};
      return output;
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$get_torg_success_level', TMP_11 = function $$get_torg_success_level(value) {
      var self = this, success_table = nil;

      success_table = [[0, "ぎりぎり"], [1, "ふつう"], [3, "まあよい"], [7, "かなりよい"], [12, "すごい"]];
      return self.$get_torg_table_result(value, success_table);
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$get_torg_interaction_result_intimidate_test', TMP_12 = function $$get_torg_interaction_result_intimidate_test(value) {
      var self = this, interaction_results_table = nil;

      interaction_results_table = [[0, "技能なし"], [5, "萎縮"], [10, "逆転負け"], [15, "モラル崩壊"], [17, "プレイヤーズコール"]];
      return self.$get_torg_table_result(value, interaction_results_table);
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$get_torg_interaction_result_taunt_trick', TMP_13 = function $$get_torg_interaction_result_taunt_trick(value) {
      var self = this, interaction_results_table = nil;

      interaction_results_table = [[0, "技能なし"], [5, "萎縮"], [10, "逆転負け"], [15, "高揚／逆転負け"], [17, "プレイヤーズコール"]];
      return self.$get_torg_table_result(value, interaction_results_table);
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$get_torg_interaction_result_maneuver', TMP_14 = function $$get_torg_interaction_result_maneuver(value) {
      var self = this, interaction_results_table = nil;

      interaction_results_table = [[0, "技能なし"], [5, "疲労"], [10, "萎縮／疲労"], [15, "逆転負け／疲労"], [17, "プレイヤーズコール"]];
      return self.$get_torg_table_result(value, interaction_results_table);
    }, TMP_14.$$arity = 1);

    Opal.defn(self, '$get_torg_table_result', TMP_16 = function $$get_torg_table_result(value, table) {
      var $a, $b, TMP_15, self = this, output = nil;

      output = "1";
      (function(){var $brk = Opal.new_brk(); try {return ($a = ($b = table).$each, $a.$$p = (TMP_15 = function(item){var self = TMP_15.$$s || this, $c, item_index = nil;
if (item == null) item = nil;
      item_index = item['$[]'](0);
        if ((($c = ($rb_gt(item_index, value))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          
          Opal.brk(nil, $brk)};
        return output = item['$[]'](1);}, TMP_15.$$s = self, TMP_15.$$brk = $brk, TMP_15.$$arity = 1, TMP_15), $a).call($b)
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      return output;
    }, TMP_16.$$arity = 2);

    Opal.defn(self, '$get_torg_damage_ords', TMP_17 = function $$get_torg_damage_ords(value) {
      var self = this, damage_table_ords = nil;

      damage_table_ords = [[0, "1"], [1, "O1"], [2, "K1"], [3, "O2"], [4, "O3"], [5, "K3"], [6, "転倒 K／O4"], [7, "転倒 K／O5"], [8, "1レベル負傷  K／O7"], [9, "1レベル負傷  K／O9"], [10, "1レベル負傷  K／O10"], [11, "2レベル負傷  K／O11"], [12, "2レベル負傷  KO12"], [13, "3レベル負傷  KO13"], [14, "3レベル負傷  KO14"], [15, "4レベル負傷  KO15"]];
      return self.$get_torg_damage(value, 4, "レベル負傷  KO15", damage_table_ords);
    }, TMP_17.$$arity = 1);

    Opal.defn(self, '$get_torg_damage_posibility', TMP_18 = function $$get_torg_damage_posibility(value) {
      var self = this, damage_table_posibility = nil;

      damage_table_posibility = [[0, "1"], [1, "1"], [2, "O1"], [3, "K2"], [4, "2"], [5, "O2"], [6, "転倒 O2"], [7, "転倒 K2"], [8, "転倒 K2"], [9, "1レベル負傷  K3"], [10, "1レベル負傷  K4"], [11, "1レベル負傷  O4"], [12, "1レベル負傷  K5"], [13, "2レベル負傷  O4"], [14, "2レベル負傷  KO5"], [15, "3レベル負傷  KO5"]];
      return self.$get_torg_damage(value, 3, "レベル負傷  KO5", damage_table_posibility);
    }, TMP_18.$$arity = 1);

    Opal.defn(self, '$get_torg_damage', TMP_19 = function $$get_torg_damage(value, maxDamage, maxDamageString, damage_table) {
      var $a, self = this, table_max_value = nil, over_kill_damage = nil;

      if ((($a = ($rb_lt(value, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return "1"};
      table_max_value = $rb_minus(damage_table.$length(), 1);
      if ((($a = ($rb_le(value, table_max_value))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$get_torg_table_result(value, damage_table)};
      over_kill_damage = ($rb_divide(($rb_minus(value, table_max_value)), 2)).$to_i();
      return $rb_plus($rb_plus("", ($rb_plus(over_kill_damage, maxDamage)).$to_s()), maxDamageString);
    }, TMP_19.$$arity = 4);

    Opal.defn(self, '$get_torg_bonus_text', TMP_20 = function $$get_torg_bonus_text(num) {
      var $a, self = this, val_arr = nil, value = nil, mod = nil, resultValue = nil, output = nil;

      val_arr = num.$split(/\+/);
      value = val_arr.$shift().$to_i();
      mod = self.$parren_killer("(0" + (val_arr.$join("+")) + ")").$to_i();
      resultValue = self.$get_torg_bonus(value);
      self.$debug("TORG BT resultValue", resultValue);
      self.$debug("TORG BT mod", mod);
      if ((($a = (mod['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = "" + (resultValue)
        } else {
        output = self.$getTorgBonusOutputTextWhenModDefined(value, resultValue, mod);
        value = "" + (value) + "+" + (mod);
      };
      return [output, value];
    }, TMP_20.$$arity = 1);

    Opal.defn(self, '$getTorgBonusOutputTextWhenModDefined', TMP_21 = function $$getTorgBonusOutputTextWhenModDefined(value, resultValue, mod) {
      var $a, self = this, output = nil;

      self.$debug("getTorgBonusOutputTextWhenModDefined value, mod", value, mod);
      if ((($a = ($rb_gt(mod, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return output = "" + (resultValue) + "[" + (value) + "]+" + (mod) + " ＞ " + ($rb_plus(resultValue, mod))
        } else {
        self.$debug("resultValue", resultValue);
        self.$debug("mod", mod);
        return output = "" + (resultValue) + "[" + (value) + "]" + (mod) + " ＞ " + ($rb_plus(resultValue, mod));
      };
    }, TMP_21.$$arity = 3);

    return (Opal.defn(self, '$get_torg_bonus', TMP_22 = function $$get_torg_bonus(value) {
      var $a, self = this, bonus_table = nil, bonus = nil, over_value_bonus = nil;

      bonus_table = [[1, -12], [2, -10], [3, -8], [5, -5], [7, -2], [9, -1], [11, 0], [13, 1], [15, 2], [16, 3], [17, 4], [18, 5], [19, 6], [20, 7]];
      bonus = self.$get_torg_table_result(value, bonus_table);
      if ((($a = ($rb_gt(value, 20))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        over_value_bonus = $rb_plus(($rb_divide(($rb_minus(value, 21)), 5)).$to_i(), 1);
        bonus = $rb_plus(bonus, over_value_bonus);};
      return bonus;
    }, TMP_22.$$arity = 1), nil) && 'get_torg_bonus';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
