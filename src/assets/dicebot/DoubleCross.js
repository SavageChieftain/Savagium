/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$setPrefixes', '$=~', '$debug', '$gsub', '$check_dice', '$nil?', '$==', '$>=', '$-', '$rerollNumber', '$to_i', '$<=', '$!', '$marshalSignOfInequality', '$!=', '$defaultSuccessTarget', '$split', '$each', '$push', '$shift', '$+', '$join', '$parren_killer', '$collect', '$roll', '$&', '$sortType', '$[]', '$>', '$loop', '$isReRollAgain', '$<', '$length', '$check_suc', '$get_emotion_table', '$dx_feel_positive_table', '$dx_feel_negative_table', '$dx_feel_table', '$get_table_by_number']);
  return (function($base, $super) {
    function $DoubleCross(){};
    var self = $DoubleCross = $klass($base, $super, 'DoubleCross', $DoubleCross);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_10, TMP_11, TMP_12, TMP_13, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23;

    self.$setPrefixes(["(\\d+dx|ET)"]);

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      self.sendMode = 2;
      self.sortType = 2;
      self.isPrintMaxDice = true;
      self.upplerRollThreshold = 10;
      self.unlimitedRollDiceType = 10;
      return self.rerollNumber = 10;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "ダブルクロス2nd,3rd";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "DoubleCross";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "・判定コマンド　(xDX+y@c or xDXc+y)\n　\"(個数)DX(修正)@(クリティカル値)\"もしくは\"(個数)DX(クリティカル値)(修正)\"で指定します。\n　加算減算のみ修正値も付けられます。\n　内部で読み替えています。\n　例）10dx　　　10dx+5@8(OD tool式)　　　5DX7+7-3(疾風怒濤式)\n\n・各種表\n　・感情表(ET)\n　　ポジティブとネガティブの両方を振って、表になっている側に○を付けて表示します。もちろん任意で選ぶ部分は変更して構いません。\n\n・D66ダイスあり\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$changeText', TMP_10 = function $$changeText(string) {
      var $a, $b, TMP_5, $c, TMP_6, $d, TMP_7, $e, TMP_8, $f, TMP_9, self = this, crit = nil;

      if ((($a = (/(\d+)DX/i['$=~'](string))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return string
      };
      self.$debug("DoubleCross parren_killer_add string", string);
      string = ($a = ($b = string).$gsub, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $c;

      return "" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))) + "R10" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](3))) + "[" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](2))) + "]"}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b, /(\d+)DX(\d*)([^\d\s][\+\-\d]+)/i);
      string = ($a = ($c = string).$gsub, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $d;

      return "" + ((($d = $gvars['~']) === nil ? nil : $d['$[]'](1))) + "R10[" + ((($d = $gvars['~']) === nil ? nil : $d['$[]'](2))) + "]"}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($c, /(\d+)DX(\d+)/i);
      string = ($a = ($d = string).$gsub, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $e;

      return "" + ((($e = $gvars['~']) === nil ? nil : $e['$[]'](1))) + "R10" + ((($e = $gvars['~']) === nil ? nil : $e['$[]'](2)))}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($d, /(\d+)DX([^\d\s][\+\-\d]+)/i);
      string = ($a = ($e = string).$gsub, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $f;

      return "" + ((($f = $gvars['~']) === nil ? nil : $f['$[]'](1))) + "R10"}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($e, /(\d+)DX/i);
      if ((($a = (/\@(\d+)/['$=~'](string))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        crit = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1));
        string = ($a = ($f = string).$gsub, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

        return "[" + (crit) + "]"}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($f, /\[\]/);
        string = string.$gsub(/\@(\d+)/, "");};
      string = string.$gsub(/\[\]/, "");
      self.$debug("DoubleCross parren_killer_add changed string", string);
      return string;
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$dice_command_xRn', TMP_11 = function $$dice_command_xRn(string, nick_e) {
      var $a, self = this, output_msg = nil;

      output_msg = self.$check_dice(string);
      if ((($a = (output_msg['$nil?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil};
      return "" + (nick_e) + ": " + (output_msg);
    }, TMP_11.$$arity = 2);

    Opal.defn(self, '$check_nD10', TMP_12 = function $$check_nD10(total_n, dice_n, signOfInequality, diff, dice_cnt, dice_max, n1, n_max) {
      var $a, self = this;

      if ((($a = (signOfInequality['$=='](">="))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return ""
      };
      if ((($a = ($rb_ge(n1, dice_cnt))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ ファンブル"
      } else if ((($a = ($rb_ge(total_n, diff))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ 成功"
        } else {
        return " ＞ 失敗"
      };
    }, TMP_12.$$arity = 8);

    Opal.defn(self, '$getJackUpValueOnAddRoll', TMP_13 = function $$getJackUpValueOnAddRoll(dice_n, round) {
      var self = this;

      return ($rb_minus(10, dice_n));
    }, TMP_13.$$arity = 2);

    Opal.defn(self, '$check_dice', TMP_18 = function $$check_dice(string) {
      var $a, $b, TMP_14, $c, TMP_15, $d, TMP_17, self = this, dice_cnt = nil, dice_max = nil, round = nil, total_n = nil, signOfInequality = nil, diff = nil, output = nil, output2 = nil, next_roll = nil, critical = nil, dice_cmd = nil, dice_bns = nil, dice_a = nil, bonus_str = nil, bonus_ttl = nil, numberSpot1 = nil, dice_cnt_total = nil;
      if ($gvars.SEND_STR_MAX == null) $gvars.SEND_STR_MAX = nil;

      self.$debug("dxdice begin string", string);
      dice_cnt = 0;
      dice_max = 0;
      round = 0;
      total_n = 0;
      signOfInequality = "";
      diff = 0;
      output = "";
      output2 = "";
      next_roll = 0;
      string = string.$gsub(/-[\d]+[rR][\d]+/, "");
      if ((($a = (/(^|\s)[sS]?([\d]+[rR][\d\+\-rR]+)(\[(\d+)\])?(([<>=]+)(\d+))?($|\s)/['$=~'](string))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$debug("invaid string", string);
        return nil;
      };
      string = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2));
      critical = (($a = $gvars['~']) === nil ? nil : $a['$[]'](4));
      ((($a = critical) !== false && $a !== nil && $a != null) ? $a : critical = self.$rerollNumber());
      critical = critical.$to_i();
      self.$debug("critical", critical);
      if ((($a = ($rb_le(critical, 1))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return "クリティカル値が低すぎます。2以上を指定してください。"};
      if ((($a = ((($b = $gvars['~']) === nil ? nil : $b['$[]'](5))['$nil?']()['$!']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        diff = (($a = $gvars['~']) === nil ? nil : $a['$[]'](7)).$to_i();
        signOfInequality = self.$marshalSignOfInequality((($a = $gvars['~']) === nil ? nil : $a['$[]'](6)));
      } else if ((($a = (self.$defaultSuccessTarget()['$!='](""))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = (/([<>=]+)(\d+)/['$=~'](self.$defaultSuccessTarget()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          diff = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$to_i();
          signOfInequality = self.$marshalSignOfInequality((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)));}};
      dice_cmd = [];
      dice_bns = [];
      dice_a = string.$split(/\+/);
      ($a = ($b = dice_a).$each, $a.$$p = (TMP_14 = function(dice_o){var self = TMP_14.$$s || this, $c, dice_wk = nil;
if (dice_o == null) dice_o = nil;
      if ((($c = (/[Rr]/['$=~'](dice_o))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          if ((($c = (/-/['$=~'](dice_o))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            dice_wk = dice_o.$split(/-/);
            dice_cmd.$push(dice_wk.$shift());
            return dice_bns.$push($rb_plus("0-", dice_wk.$join("-")));
            } else {
            return dice_cmd.$push(dice_o)
          }
          } else {
          return dice_bns.$push(dice_o)
        }}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($b);
      bonus_str = dice_bns.$join("+");
      bonus_ttl = 0;
      if ((($a = (bonus_str['$!='](""))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        bonus_ttl = self.$parren_killer("(" + (bonus_str) + ")").$to_i()};
      numberSpot1 = 0;
      dice_cnt_total = 0;
      ($a = ($c = dice_cmd).$each, $a.$$p = (TMP_15 = function(dice_o){var self = TMP_15.$$s || this, $d, $e, $f, $g, TMP_16, subtotal = nil, dice_dat = nil;
if (dice_o == null) dice_o = nil;
      subtotal = 0;
        $e = ($f = ($g = dice_o.$split(/[rR]/)).$collect, $f.$$p = (TMP_16 = function(s){var self = TMP_16.$$s || this;
if (s == null) s = nil;
        return s.$to_i()}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $f).call($g), $d = Opal.to_ary($e), dice_cnt = ($d[0] == null ? nil : $d[0]), dice_max = ($d[1] == null ? nil : $d[1]), $e;
        dice_dat = self.$roll(dice_cnt, dice_max, (self.$sortType()['$&'](2)), 0, "", 0, critical);
        if ((($d = (output['$!='](""))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          output = $rb_plus(output, ",")};
        next_roll = $rb_plus(next_roll, dice_dat['$[]'](6));
        numberSpot1 = $rb_plus(numberSpot1, dice_dat['$[]'](2));
        dice_cnt_total = $rb_plus(dice_cnt_total, dice_cnt);
        if ((($d = ($rb_gt(dice_dat['$[]'](6), 0))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          if ((($d = (dice_max['$=='](10))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            subtotal = 10
            } else {
            subtotal = dice_dat['$[]'](4)
          }
          } else {
          subtotal = dice_dat['$[]'](4)
        };
        output = $rb_plus(output, "" + (subtotal) + "[" + (dice_dat['$[]'](1)) + "]");
        return total_n = $rb_plus(total_n, subtotal);}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15), $a).call($c);
      round = 0;
      if ((($a = ($rb_gt(next_roll, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        dice_cnt = next_roll;
        (function(){var $brk = Opal.new_brk(); try {return ($a = ($d = self).$loop, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this, $e, $f, subtotal = nil, dice_dat = nil;

        subtotal = 0;
          output2 = $rb_plus(output2, "" + (output) + "+");
          output = "";
          dice_dat = self.$roll(dice_cnt, dice_max, (self.$sortType()['$&'](2)), 0, "", 0, critical);
          round = $rb_plus(round, 1);
          dice_cnt_total = $rb_plus(dice_cnt_total, dice_cnt);
          dice_cnt = dice_dat['$[]'](6);
          if ((($e = ($rb_gt(dice_dat['$[]'](6), 0))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            if ((($e = (dice_max['$=='](10))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              subtotal = 10
              } else {
              subtotal = dice_dat['$[]'](4)
            }
            } else {
            subtotal = dice_dat['$[]'](4)
          };
          output = $rb_plus(output, "" + (subtotal) + "[" + (dice_dat['$[]'](1)) + "]");
          total_n = $rb_plus(total_n, subtotal);
          if ((($e = ((($f = Opal.cvars['@@bcdice']) == null ? nil : $f).$isReRollAgain(dice_cnt, round)['$!']())) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            
            Opal.brk(nil, $brk)
            } else {
            return nil
          };}, TMP_17.$$s = self, TMP_17.$$brk = $brk, TMP_17.$$arity = 0, TMP_17), $a).call($d)
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();};
      total_n = $rb_plus(total_n, bonus_ttl);
      if ((($a = ($rb_gt(bonus_ttl, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = "" + (output2) + (output) + "+" + (bonus_ttl) + " ＞ " + (total_n)
      } else if ((($a = ($rb_lt(bonus_ttl, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = "" + (output2) + (output) + (bonus_ttl) + " ＞ " + (total_n)
        } else {
        output = "" + (output2) + (output) + " ＞ " + (total_n)
      };
      string = $rb_plus(string, "[" + (critical) + "]");
      if ((($a = (signOfInequality['$!='](""))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        string = $rb_plus(string, "" + (signOfInequality) + (diff))};
      output = "(" + (string) + ") ＞ " + (output);
      if ((($a = ($rb_gt(output.$length(), $gvars.SEND_STR_MAX))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = "(" + (string) + ") ＞ ... ＞ 回転数" + (round) + " ＞ " + (total_n)};
      if ((($a = (signOfInequality['$!='](""))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = $rb_plus(output, self.$check_suc(total_n, 0, signOfInequality, diff, dice_cnt_total, dice_max, numberSpot1, 0))
      } else if ((($a = ($rb_le(round, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = (dice_max['$=='](10))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = ($rb_ge(numberSpot1, dice_cnt_total))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            output = $rb_plus(output, " ＞ ファンブル")}}};
      return output;
    }, TMP_18.$$arity = 1);

    Opal.defn(self, '$rollDiceCommand', TMP_19 = function $$rollDiceCommand(command) {
      var self = this;

      return self.$get_emotion_table();
    }, TMP_19.$$arity = 1);

    Opal.defn(self, '$get_emotion_table', TMP_20 = function $$get_emotion_table() {
      var $a, $b, self = this, output = nil, pos_dice = nil, pos_table = nil, neg_dice = nil, neg_table = nil, dice_now = nil;

      output = nil;
      $b = self.$dx_feel_positive_table(), $a = Opal.to_ary($b), pos_dice = ($a[0] == null ? nil : $a[0]), pos_table = ($a[1] == null ? nil : $a[1]), $b;
      $b = self.$dx_feel_negative_table(), $a = Opal.to_ary($b), neg_dice = ($a[0] == null ? nil : $a[0]), neg_table = ($a[1] == null ? nil : $a[1]), $b;
      $b = self.$roll(1, 2), $a = Opal.to_ary($b), dice_now = ($a[0] == null ? nil : $a[0]), $b;
      if ((($a = (($b = pos_table['$!=']("1"), $b !== false && $b !== nil && $b != null ?neg_table['$!=']("1") : $b))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ($rb_lt(dice_now, 2))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          pos_table = $rb_plus("○", pos_table)
          } else {
          neg_table = $rb_plus("○", neg_table)
        };
        output = "感情表(" + (pos_dice) + "-" + (neg_dice) + ") ＞ " + (pos_table) + " - " + (neg_table);};
      return output;
    }, TMP_20.$$arity = 0);

    Opal.defn(self, '$dx_feel_positive_table', TMP_21 = function $$dx_feel_positive_table() {
      var self = this, table = nil;

      table = [[0, "傾倒(けいとう)"], [5, "好奇心(こうきしん)"], [10, "憧憬(どうけい)"], [15, "尊敬(そんけい)"], [20, "連帯感(れんたいかん)"], [25, "慈愛(じあい)"], [30, "感服(かんぷく)"], [35, "純愛(じゅんあい)"], [40, "友情(ゆうじょう)"], [45, "慕情(ぼじょう)"], [50, "同情(どうじょう)"], [55, "遺志(いし)"], [60, "庇護(ひご)"], [65, "幸福感(こうふくかん)"], [70, "信頼(しんらい)"], [75, "執着(しゅうちゃく)"], [80, "親近感(しんきんかん)"], [85, "誠意(せいい)"], [90, "好意(こうい)"], [95, "有為(ゆうい)"], [100, "尽力(じんりょく)"], [101, "懐旧(かいきゅう)"], [102, "任意(にんい)"]];
      return self.$dx_feel_table(table);
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$dx_feel_negative_table', TMP_22 = function $$dx_feel_negative_table() {
      var self = this, table = nil;

      table = [[0, "侮蔑(ぶべつ)"], [5, "食傷(しょくしょう)"], [10, "脅威(きょうい)"], [15, "嫉妬(しっと)"], [20, "悔悟(かいご)"], [25, "恐怖(きょうふ)"], [30, "不安(ふあん)"], [35, "劣等感(れっとうかん)"], [40, "疎外感(そがいかん)"], [45, "恥辱(ちじょく)"], [50, "憐憫(れんびん)"], [55, "偏愛(へんあい)"], [60, "憎悪(ぞうお)"], [65, "隔意(かくい)"], [70, "嫌悪(けんお)"], [75, "猜疑心(さいぎしん)"], [80, "厭気(いやけ)"], [85, "不信感(ふしんかん)"], [90, "不快感(ふかいかん)"], [95, "憤懣(ふんまん)"], [100, "敵愾心(てきがいしん)"], [101, "無関心(むかんしん)"], [102, "任意(にんい)"]];
      return self.$dx_feel_table(table);
    }, TMP_22.$$arity = 0);

    return (Opal.defn(self, '$dx_feel_table', TMP_23 = function $$dx_feel_table(table) {
      var $a, $b, self = this, dice_now = nil, output = nil;

      $b = self.$roll(1, 100), $a = Opal.to_ary($b), dice_now = ($a[0] == null ? nil : $a[0]), $b;
      output = self.$get_table_by_number(dice_now, table);
      return [dice_now, output];
    }, TMP_23.$$arity = 1), nil) && 'dx_feel_table';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
