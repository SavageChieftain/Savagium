/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$setPrefixes', '$upcase', '$judgeDice', '$nil?', '$===', '$get_name_table', '$get_skill_table', '$to_i', '$==', '$-', '$+', '$get_value', '$get_critival_fumble', '$checkRoll', '$include?', '$roll', '$collect', '$split', '$each', '$>', '$<=', '$>=', '$!=', '$get_badlife_1d20_table_result', '$get_table_by_number', '$get_badlife_table_result', '$parren_killer']);
  return (function($base, $super) {
    function $BadLife(){};
    var self = $BadLife = $klass($base, $super, 'BadLife', $BadLife);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15;

    self.$setPrefixes(["\\d?(BAD|BL|GL).*", "[TDGKSB]RN", "SKL"]);

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      return ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "犯罪活劇RPGバッドライフ";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "BadLife";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "・判定：nBADm[±a][Cb±c][Fd±e][@X±f][!OP]　　[]内のコマンドは省略可。\n・BADコマンドは「BL」コマンドで代用可。\n・博徒は「GL」コマンドで〈波乱万丈〉の効果を適用。\n\n「n」で振るダイス数、「m」で特性値、「±a」で達成値への修正値、\n「Cb±c」でクリティカル値への修正、「Fd±e」でファンブル値への修正、\n「@X」で目標難易度を指定。\n「±a」「Cb±c」「Fd±e」[@X±f]部分は「4+1-3」などの複数回指定可。\n「!OP」部分で、一部のスキルやガジェットの追加効果を指定可。\n使用可能なコマンドは以下の通り。順不同、複数同時使用も可。\nA：〈先見の明〉　　H：［重撃］\n\n【書式例】\nBAD → 1ダイスで達成値を表示。\n3BAD10+2-1 → 3ダイスで修正+11の達成値を表示。\nBL8@15 → 1ダイスで修正+8、難易度15の判定。\n2BL8C-1F1@15 → 2ダイスで修正+8、C値-1、F値+1、難易度15の判定。\nGL6@20 → 1ダイスで修正+6、難易度20の判定。〈波乱万丈〉の効果。\nGL6@20!HA → 上記に加えて〈先見の明〉［重撃］の効果。\n\n\n・コードネーム表\n怪盗：TRN　　　闇医者：DRN　　博徒：GRN\n殺シ屋：KRN　　業師：SRN　　　遊ビ人：BRN\n\n・スキル表：SKL\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$rollDiceCommand', TMP_5 = function $$rollDiceCommand(command) {
      var $a, self = this, result = nil, output = nil, $case = nil, initials = nil;

      command = command.$upcase();
      result = self.$judgeDice(command);
      if ((($a = result['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return result
      };
      output = (function() {$case = command;if (/([TDGKSB])RN/i['$===']($case)) {initials = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1));
      return self.$get_name_table(initials);}else if ("SKL"['$===']($case)) {return self.$get_skill_table()}else {return nil}})();
      return output;
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$judgeDice', TMP_6 = function $$judgeDice(command) {
      var $a, $b, self = this, reg1 = nil, reg2 = nil, reg3 = nil, reg5 = nil, reg6 = nil, reg8 = nil, reg9 = nil, reg11 = nil, reg13 = nil, diceCount = nil, critical = nil, fumble = nil, isStormy = nil, modify = nil, target = nil, optionalText = nil;

      if ((($a = /(\d+)?(BAD|BL|GL)([\+\-\d+]*)((C|F)([\+\-\d+]*)?)?((C|F)([\+\-\d+]*))?(\@([\+\-\d+]*))?(\!(\D*))?/i['$==='](command)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      reg1 = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1));
      reg2 = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2));
      reg3 = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3));
      reg5 = (($a = $gvars['~']) === nil ? nil : $a['$[]'](5));
      reg6 = (($a = $gvars['~']) === nil ? nil : $a['$[]'](6));
      reg8 = (($a = $gvars['~']) === nil ? nil : $a['$[]'](8));
      reg9 = (($a = $gvars['~']) === nil ? nil : $a['$[]'](9));
      reg11 = (($a = $gvars['~']) === nil ? nil : $a['$[]'](11));
      reg13 = (($a = $gvars['~']) === nil ? nil : $a['$[]'](13));
      diceCount = (((($a = reg1) !== false && $a !== nil && $a != null) ? $a : 1)).$to_i();
      critical = 20;
      fumble = 1;
      isStormy = (reg2['$==']("GL"));
      if ((($a = (isStormy)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        critical = $rb_minus(critical, 3);
        fumble = $rb_plus(fumble, 1);};
      modify = self.$get_value(reg3);
      $b = self.$get_critival_fumble(critical, fumble, reg5, reg6), $a = Opal.to_ary($b), critical = ($a[0] == null ? nil : $a[0]), fumble = ($a[1] == null ? nil : $a[1]), $b;
      $b = self.$get_critival_fumble(critical, fumble, reg8, reg9), $a = Opal.to_ary($b), critical = ($a[0] == null ? nil : $a[0]), fumble = ($a[1] == null ? nil : $a[1]), $b;
      target = self.$get_value(reg11);
      optionalText = (((($a = reg13) !== false && $a !== nil && $a != null) ? $a : ""));
      return self.$checkRoll(diceCount, modify, critical, fumble, target, isStormy, optionalText);
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$get_critival_fumble', TMP_7 = function $$get_critival_fumble(critical, fumble, marker, text) {
      var self = this, $case = nil;

      $case = marker;if ("C"['$===']($case)) {critical = $rb_plus(critical, self.$get_value(text))}else if ("F"['$===']($case)) {fumble = $rb_plus(fumble, self.$get_value(text))};
      return [critical, fumble];
    }, TMP_7.$$arity = 4);

    Opal.defn(self, '$checkRoll', TMP_10 = function $$checkRoll(diceCount, modify, critical, fumble, target, isStormy, optionalText) {
      var $a, $b, TMP_8, $c, TMP_9, $d, self = this, isAnticipation = nil, isHeavyAttack = nil, dice = nil, diceText = nil, diceMax = nil, diceArray = nil, isCritical = nil, isFumble = nil, total = nil, result = nil, success = nil, skillText = nil;

      isAnticipation = optionalText['$include?']("A");
      isHeavyAttack = optionalText['$include?']("H");
      $b = self.$roll(diceCount, 20), $a = Opal.to_ary($b), dice = ($a[0] == null ? nil : $a[0]), diceText = ($a[1] == null ? nil : $a[1]), $b;
      diceMax = 0;
      diceArray = ($a = ($b = diceText.$split(/,/)).$collect, $a.$$p = (TMP_8 = function(i){var self = TMP_8.$$s || this;
if (i == null) i = nil;
      return i.$to_i()}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($b);
      ($a = ($c = diceArray).$each, $a.$$p = (TMP_9 = function(i){var self = TMP_9.$$s || this, $d;
if (i == null) i = nil;
      if ((($d = ($rb_gt(i, diceMax))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return diceMax = i
          } else {
          return nil
        }}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($c);
      if ((($a = ((($d = isHeavyAttack !== false && isHeavyAttack !== nil && isHeavyAttack != null) ? $rb_le(diceMax, 5) : isHeavyAttack))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        diceMax = 5};
      isCritical = ($rb_ge(diceMax, critical));
      isFumble = ($rb_le(diceMax, fumble));
      if ((($a = (isCritical)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        diceMax = 20};
      total = $rb_plus(diceMax, modify);
      if ((($a = ((($d = isAnticipation !== false && isAnticipation !== nil && isAnticipation != null) ? $rb_le(diceMax, 7) : isAnticipation))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        total = $rb_plus(total, 5)};
      if ((($a = (isFumble)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        total = 0};
      result = "" + (diceCount) + "D20(C:" + (critical) + ",F:" + (fumble) + ") ＞ ";
      result = $rb_plus(result, "" + (diceMax) + "[" + (diceText) + "]");
      if ((($a = ($rb_gt(modify, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, "+")};
      if ((($a = (modify['$!='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, "" + (modify))};
      if ((($a = ((($d = isAnticipation !== false && isAnticipation !== nil && isAnticipation != null) ? $rb_le(diceMax, 7) : isAnticipation))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, "+5")};
      result = $rb_plus(result, " ＞ 達成値：" + (total));
      if ((($a = ($rb_gt(target, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        success = $rb_minus(total, target);
        result = $rb_plus(result, ">=" + (target) + " 成功度：" + (success) + " ＞ ");
        if ((($a = (isCritical)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result = $rb_plus(result, "成功（クリティカル）")
        } else if ((($a = ($rb_ge(total, target))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result = $rb_plus(result, "成功")
          } else {
          result = $rb_plus(result, "失敗");
          if ((($a = (isFumble)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result = $rb_plus(result, "（ファンブル）")};
        };
        } else {
        if ((($a = (isCritical)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result = $rb_plus(result, " クリティカル")};
        if ((($a = (isFumble)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result = $rb_plus(result, " ファンブル")};
      };
      skillText = "";
      if ((($a = (isStormy)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        skillText = $rb_plus(skillText, "〈波乱万丈〉")};
      if ((($a = (isAnticipation)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        skillText = $rb_plus(skillText, "〈先見の明〉")};
      if ((($a = (isHeavyAttack)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        skillText = $rb_plus(skillText, "［重撃］")};
      if ((($a = (skillText['$!='](""))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, " " + (skillText))};
      return result;
    }, TMP_10.$$arity = 7);

    Opal.defn(self, '$get_name_table', TMP_11 = function $$get_name_table(initials) {
      var self = this, $case = nil, name = nil, table = nil;

      $case = initials;if ("T"['$===']($case)) {name = "怪盗コードネーム表";
      table = [[1, "フォックス"], [2, "フォックス"], [3, "ラット"], [4, "ラット"], [5, "キャット"], [6, "キャット"], [7, "タイガー"], [8, "タイガー"], [9, "シャーク"], [10, "シャーク"], [11, "コンドル"], [12, "コンドル"], [13, "スパイダー"], [14, "スパイダー"], [15, "ウルフ"], [16, "ウルフ"], [17, "コヨーテ"], [18, "コヨーテ"], [19, "ジャガー"], [20, "ジャガー"]];}else if ("D"['$===']($case)) {name = "闇医者コードネーム表";
      table = [[1, "キャンサー"], [2, "キャンサー"], [3, "ヘッドエイク"], [4, "ヘッドエイク"], [5, "ブラッド"], [6, "ブラッド"], [7, "ウーンズ"], [8, "ウーンズ"], [9, "ポイズン"], [10, "ポイズン"], [11, "ペイン"], [12, "ペイン"], [13, "スリープ"], [14, "スリープ"], [15, "キュア"], [16, "キュア"], [17, "デス"], [18, "デス"], [19, "リーンカーネイション"], [20, "リーンカーネイション"]];}else if ("G"['$===']($case)) {name = "博徒コードネーム表";
      table = [[1, "リトルダイス"], [2, "リトルダイス"], [3, "プラチナム"], [4, "プラチナム"], [5, "プレジデント"], [6, "プレジデント"], [7, "ドリーム"], [8, "ドリーム"], [9, "アクシデント"], [10, "アクシデント"], [11, "グリード"], [12, "グリード"], [13, "フォーチュン"], [14, "フォーチュン"], [15, "ミラクル"], [16, "ミラクル"], [17, "ホープ"], [18, "ホープ"], [19, "ビッグヒット"], [20, "ビッグヒット"]];}else if ("K"['$===']($case)) {name = "殺シ屋コードネーム表";
      table = [[1, "ハンマー"], [2, "ハンマー"], [3, "アロー"], [4, "アロー"], [5, "ボマー"], [6, "ボマー"], [7, "キャノン"], [8, "キャノン"], [9, "ブレード"], [10, "ブレード"], [11, "スティング"], [12, "スティング"], [13, "ガロット"], [14, "ガロット"], [15, "パイルバンカー"], [16, "パイルバンカー"], [17, "レイザー"], [18, "レイザー"], [19, "カタナ"], [20, "カタナ"]];}else if ("S"['$===']($case)) {name = "業師コードネーム表";
      table = [[1, "ローズ"], [2, "ローズ"], [3, "サクラ"], [4, "サクラ"], [5, "ライラック"], [6, "ライラック"], [7, "ダンデライオン"], [8, "ダンデライオン"], [9, "フリージア"], [10, "フリージア"], [11, "カクタス"], [12, "カクタス"], [13, "ロータス"], [14, "ロータス"], [15, "リリィ"], [16, "リリィ"], [17, "ラフレシア"], [18, "ラフレシア"], [19, "ヒヤシンス"], [20, "ヒヤシンス"]];}else if ("B"['$===']($case)) {name = "遊ビ人コードネーム表";
      table = [[1, "モノポリー"], [2, "モノポリー"], [3, "ブリッジ"], [4, "ブリッジ"], [5, "チェッカー"], [6, "チェッカー"], [7, "アクワイア"], [8, "アクワイア"], [9, "ジャンケン"], [10, "ジャンケン"], [11, "トランプ"], [12, "トランプ"], [13, "ケイドロ"], [14, "ケイドロ"], [15, "パンデミック"], [16, "パンデミック"], [17, "スゴロク"], [18, "スゴロク"], [19, "キャベツカンテイ"], [20, "キャベツカンテイ"]];}else {return nil};
      return self.$get_badlife_1d20_table_result(name, table);
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$get_skill_table', TMP_12 = function $$get_skill_table() {
      var $a, $b, self = this, name = nil, table = nil, dice = nil, result = nil;

      name = "スキル表";
      table = [[1, "一撃離脱"], [2, "一撃離脱"], [3, "チェイサー"], [4, "チェイサー"], [5, "影の外套"], [6, "影の外套"], [7, "二段ジャンプ"], [8, "二段ジャンプ"], [9, "韋駄天"], [10, "韋駄天"], [11, "手練"], [12, "手練"], [13, "ハニーテイスト"], [14, "ハニーテイスト"], [15, "先見の明"], [16, "先見の明"], [17, "ベテラン"], [18, "ベテラン"], [19, "応急手当"], [20, "応急手当"], [21, "セラピー"], [22, "セラピー"], [23, "緊急治療"], [24, "緊急治療"], [25, "ゴールドディガー"], [26, "ゴールドディガー"], [27, "デイリーミッション"], [28, "デイリーミッション"], [29, "見切り"], [30, "見切り"], [31, "鷹の目"], [32, "鷹の目"], [33, "しびれ罠"], [34, "しびれ罠"], [35, "大逆転"], [36, "大逆転"], [37, "武器習熟：○○"], [38, "武器習熟：○○"], [39, "百発百中"], [40, "百発百中"], [41, "屈強な肉体"], [42, "屈強な肉体"], [43, "二刀流"], [44, "二刀流"], [45, "クイックリカバリー"], [46, "クイックリカバリー"], [47, "体験主義"], [48, "体験主義"], [49, "破釜沈船"], [50, "破釜沈船"], [51, "想定の範囲内"], [52, "想定の範囲内"], [53, "セカンドチャンス"], [54, "セカンドチャンス"], [55, "優秀な子分"], [56, "優秀な子分"], [57, "時間管理術"], [58, "時間管理術"], [59, "連撃術"], [60, "連撃術"], [61, "罵詈雑言"], [62, "罵詈雑言"], [63, "ケセラセラ"], [64, "ケセラセラ"], [65, "ダンス＆ミュージック"], [66, "ダンス＆ミュージック"], [67, "フェイント"], [68, "フェイント"], [69, "ヘイトコントロール"], [70, "ヘイトコントロール"], [71, "惜別"], [72, "惜別"], [73, "戦闘マシーン"], [74, "戦闘マシーン"], [75, "戦闘マシーン"], [76, "名医"], [77, "名医"], [78, "名医"], [79, "忍者"], [80, "忍者"], [81, "忍者"], [82, "観察眼"], [83, "観察眼"], [84, "観察眼"], [85, "クレバー"], [86, "クレバー"], [87, "クレバー"], [88, "フェイスマン"], [89, "フェイスマン"], [90, "フェイスマン"], [91, "スポーツマン"], [92, "スポーツマン"], [93, "スポーツマン"], [94, "不屈"], [95, "不屈"], [96, "不屈"], [97, "慎重"], [98, "慎重"], [99, "慎重"], [100, "この表を2回振る"]];
      $b = self.$roll(1, 100), $a = Opal.to_ary($b), dice = ($a[0] == null ? nil : $a[0]), $b;
      result = self.$get_table_by_number(dice, table);
      return self.$get_badlife_table_result(name, dice, result);
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$get_badlife_1d20_table_result', TMP_13 = function $$get_badlife_1d20_table_result(name, table) {
      var $a, $b, self = this, dice = nil, output = nil;

      $b = self.$roll(1, 20), $a = Opal.to_ary($b), dice = ($a[0] == null ? nil : $a[0]), $b;
      output = self.$get_table_by_number(dice, table);
      return self.$get_badlife_table_result(name, dice, output);
    }, TMP_13.$$arity = 2);

    Opal.defn(self, '$get_badlife_table_result', TMP_14 = function $$get_badlife_table_result(name, dice, output) {
      var self = this;

      return "" + (name) + "(" + (dice) + ") ＞ " + (output);
    }, TMP_14.$$arity = 3);

    return (Opal.defn(self, '$get_value', TMP_15 = function $$get_value(text) {
      var $a, self = this;

      ((($a = text) !== false && $a !== nil && $a != null) ? $a : text = "");
      return self.$parren_killer("(0" + (text) + ")").$to_i();
    }, TMP_15.$$arity = 1), nil) && 'get_value';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
