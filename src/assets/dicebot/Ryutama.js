/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$setPrefixes', '$debug', '$===', '$to_i', '$getDiceType', '$==', '$parren_killer', '$+', '$getDiffculty', '$getRollValue', '$getResultText', '$empty?', '$getModifyString', '$getBaseText', '$!=', '$isValidDiceOne', '$isValidDice', '$floor', '$/', '$%', '$include?', '$nil?', '$rand', '$isFamble', '$isCritical', '$>=', '$>', '$to_s', '$<']);
  return (function($base, $super) {
    function $Ryutama(){};
    var self = $Ryutama = $klass($base, $super, 'Ryutama', $Ryutama);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15;

    def.validDiceTypes = nil;
    self.$setPrefixes(["R\\d+.*"]);

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      return self.validDiceTypes = [20, 12, 10, 8, 6, 4, 2];
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "りゅうたま";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "Ryutama";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "・判定\n　Rx,y>=t（x,y：使用する能力値、t：目標値）\n　1ゾロ、クリティカルも含めて判定結果を表示します\n　能力値１つでの判定は Rx>=t で行えます\n例）R8,6>=13\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$rollDiceCommand', TMP_5 = function $$rollDiceCommand(command) {
      var $a, $b, self = this, dice1 = nil, dice2 = nil, modifyString = nil, difficulty = nil, modify = nil, value1 = nil, value2 = nil, total = nil, result = nil, value1Text = nil, value2Text = nil, modifyText = nil, baseText = nil, output = nil;

      self.$debug("rollDiceCommand begin");
      if ((($a = (/^R(\d+)(,(\d+))?([\+\-\d]+)?(>=(\d+))?/['$==='](command))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$debug("unmatched!");
        return "";
      };
      self.$debug("matched");
      dice1 = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$to_i();
      dice2 = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3)).$to_i();
      modifyString = (($a = $gvars['~']) === nil ? nil : $a['$[]'](4));
      difficulty = (($a = $gvars['~']) === nil ? nil : $a['$[]'](6));
      $b = self.$getDiceType(dice1, dice2), $a = Opal.to_ary($b), dice1 = ($a[0] == null ? nil : $a[0]), dice2 = ($a[1] == null ? nil : $a[1]), $b;
      if ((($a = (dice1['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ""};
      ((($a = modifyString) !== false && $a !== nil && $a != null) ? $a : modifyString = "");
      modify = self.$parren_killer($rb_plus($rb_plus("(", modifyString), ")")).$to_i();
      difficulty = self.$getDiffculty(difficulty);
      value1 = self.$getRollValue(dice1);
      value2 = self.$getRollValue(dice2);
      total = $rb_plus($rb_plus(value1, value2), modify);
      result = self.$getResultText(value1, value2, dice1, dice2, difficulty, total);
      if ((($a = (result['$empty?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        result = " ＞ " + (result)
      };
      value1Text = "" + (value1) + "(" + (dice1) + ")";
      value2Text = ((function() {if ((($a = (value2['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ""
        } else {
        return "+" + (value2) + "(" + (dice2) + ")"
      }; return nil; })());
      modifyText = self.$getModifyString(modify);
      baseText = self.$getBaseText(dice1, dice2, modify, difficulty);
      output = "(" + (baseText) + ") ＞ " + (value1Text) + (value2Text) + (modifyText) + " ＞ " + (total) + (result);
      return output;
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$getDiceType', TMP_6 = function $$getDiceType(dice1, dice2) {
      var $a, self = this, diceBase = nil;

      self.$debug("getDiceType begin");
      if ((($a = (dice2['$!='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = (self.$isValidDiceOne(dice1))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return [dice1, dice2]
          } else {
          return [0, 0]
        }};
      if ((($a = (self.$isValidDice(dice1, dice2))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return [dice1, dice2]};
      diceBase = dice1;
      dice1 = ($rb_divide(diceBase, 10)).$floor();
      dice2 = diceBase['$%'](10);
      if ((($a = (self.$isValidDice(dice1, dice2))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return [dice1, dice2]};
      dice1 = ($rb_divide(diceBase, 100)).$floor();
      dice2 = diceBase['$%'](100);
      if ((($a = (self.$isValidDice(dice1, dice2))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return [dice1, dice2]};
      if ((($a = (self.$isValidDiceOne(diceBase))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return [diceBase, 0]};
      return [0, 0];
    }, TMP_6.$$arity = 2);

    Opal.defn(self, '$isValidDice', TMP_7 = function $$isValidDice(dice1, dice2) {
      var $a, self = this;

      return (($a = self.$isValidDiceOne(dice1), $a !== false && $a !== nil && $a != null ?self.$isValidDiceOne(dice2) : $a));
    }, TMP_7.$$arity = 2);

    Opal.defn(self, '$isValidDiceOne', TMP_8 = function $$isValidDiceOne(dice) {
      var self = this;

      return self.validDiceTypes['$include?'](dice);
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$getDiffculty', TMP_9 = function $$getDiffculty(difficulty) {
      var $a, self = this;

      if ((($a = (difficulty['$nil?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        difficulty = difficulty.$to_i()
      };
      return difficulty;
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$getRollValue', TMP_10 = function $$getRollValue(dice) {
      var $a, self = this, value = nil;

      if ((($a = (dice['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return 0};
      value = $rb_plus(self.$rand(dice), 1);
      return value;
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$getResultText', TMP_11 = function $$getResultText(value1, value2, dice1, dice2, difficulty, total) {
      var $a, self = this;

      if ((($a = (self.$isFamble(value1, value2))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return "１ゾロ【１ゾロポイント＋１】"};
      if ((($a = (self.$isCritical(value1, value2, dice1, dice2))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return "クリティカル成功"};
      if ((($a = (difficulty['$nil?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ""};
      if ((($a = ($rb_ge(total, difficulty))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return "成功"};
      return "失敗";
    }, TMP_11.$$arity = 6);

    Opal.defn(self, '$isFamble', TMP_12 = function $$isFamble(value1, value2) {
      var $a, self = this;

      return (($a = (value1['$=='](1)), $a !== false && $a !== nil && $a != null ?(value2['$=='](1)) : $a));
    }, TMP_12.$$arity = 2);

    Opal.defn(self, '$isCritical', TMP_13 = function $$isCritical(value1, value2, dice1, dice2) {
      var $a, $b, self = this;

      if ((($a = (value2['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return false};
      if ((($a = (($b = (value1['$=='](6)), $b !== false && $b !== nil && $b != null ?(value2['$=='](6)) : $b))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true};
      if ((($a = (($b = (value1['$=='](dice1)), $b !== false && $b !== nil && $b != null ?(value2['$=='](dice2)) : $b))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true};
      return false;
    }, TMP_13.$$arity = 4);

    Opal.defn(self, '$getBaseText', TMP_14 = function $$getBaseText(dice1, dice2, modify, difficulty) {
      var $a, self = this, baseText = nil;

      baseText = "R" + (dice1);
      if ((($a = (dice2['$!='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        baseText = $rb_plus(baseText, "," + (dice2))};
      baseText = $rb_plus(baseText, self.$getModifyString(modify));
      if ((($a = (difficulty['$nil?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        baseText = $rb_plus(baseText, ">=" + (difficulty))
      };
      return baseText;
    }, TMP_14.$$arity = 4);

    return (Opal.defn(self, '$getModifyString', TMP_15 = function $$getModifyString(modify) {
      var $a, self = this;

      if ((($a = ($rb_gt(modify, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $rb_plus("+", modify.$to_s())
      } else if ((($a = ($rb_lt(modify, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return modify.$to_s()};
      return "";
    }, TMP_15.$$arity = 1), nil) && 'getModifyString';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
