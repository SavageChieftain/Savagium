/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$setPrefixes', '$=~', '$gsub', '$==', '$>', '$+']);
  return (function($base, $super) {
    function $SharedFantasia(){};
    var self = $SharedFantasia = $klass($base, $super, 'SharedFantasia', $SharedFantasia);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_8, TMP_9;

    self.$setPrefixes(["SF.*", "ST.*"]);

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

      TMP_1.$$p = null;
      return ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = null, $a).call($b);
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "Shared†Fantasia";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "SharedFantasia";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "2D6の成功判定に 自動成功、自動失敗、致命的失敗、劇的成功 の判定があります。\n\nSF/ST = 2D6のショートカット\n\n例) SF+4>=9 : 2D6して4を足した値が9以上なら成功\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$isGetOriginalMessage', TMP_5 = function $$isGetOriginalMessage() {
      var self = this;

      return false;
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$changeText', TMP_8 = function $$changeText(string) {
      var $a, $b, TMP_6, $c, TMP_7, self = this;

      self.throwString = "";
      if ((($a = (string['$=~'](/SF/i))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        string = ($a = ($b = string).$gsub, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

        return "2D6"}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($b, /SF/i)};
      if ((($a = (string['$=~'](/ST/i))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        string = ($a = ($c = string).$gsub, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

        return "2D6"}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($c, /ST/i)};
      return string;
    }, TMP_8.$$arity = 1);

    return (Opal.defn(self, '$check_2D6', TMP_9 = function $$check_2D6(totalValue, dice_n, signOfInequality, diff, dice_cnt, dice_max, n1, n_max) {
      var $a, self = this, resultString = nil, critical = nil, fumble = nil, totalValueBonus = nil;

      resultString = "";
      critical = false;
      fumble = false;
      if ((($a = (dice_n['$=='](12))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        critical = true
      } else if ((($a = (dice_n['$=='](2))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        fumble = true};
      totalValueBonus = 0;
      if ((($a = (signOfInequality['$=='](">="))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        totalValueBonus = 1};
      if ((($a = (signOfInequality['$=~'](/>/))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ($rb_gt(($rb_plus(totalValue, totalValueBonus)), diff))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = (critical)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            resultString = $rb_plus(resultString, " ＞ 自動成功(劇的成功)")
          } else if ((($a = (fumble)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            resultString = $rb_plus(resultString, " ＞ 自動失敗")
            } else {
            resultString = $rb_plus(resultString, " ＞ 成功")
          }
        } else if ((($a = (critical)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          resultString = $rb_plus(resultString, " ＞ 自動成功")
        } else if ((($a = (fumble)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          resultString = $rb_plus(resultString, " ＞ 自動失敗(致命的失敗)")
          } else {
          resultString = $rb_plus(resultString, " ＞ 失敗")
        }};
      return resultString;
    }, TMP_9.$$arity = 8), nil) && 'check_2D6';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
