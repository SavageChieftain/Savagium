/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$setPrefixes', '$=~', '$gsub', '$check_roll', '$==', '$>=', '$to_i', '$parren_killer', '$marshalSignOfInequality', '$get_dice', '$!=', '$+', '$check_suc', '$abs', '$roll', '$shift', '$collect', '$split', '$times', '$[]', '$<', '$-', '$<=', '$===', '$get_horidasibukuro_table', '$debug', '$/']);
  return (function($base, $super) {
    function $DarkBlaze(){};
    var self = $DarkBlaze = $klass($base, $super, 'DarkBlaze', $DarkBlaze);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_10, TMP_11, TMP_12, TMP_13, TMP_16, TMP_17, TMP_18;

    self.$setPrefixes(["DB.*", "BT.*"]);

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      return self.sendMode = 2;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "ダークブレイズ";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "DarkBlaze";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "・行為判定　(DBxy#n)\n　行為判定専用のコマンドです。\n　\"DB(能力)(技能)#(修正)\"でロールします。Rコマンド(3R6+n[x,y]>=m mは難易度)に読替をします。\n　クリティカルとファンブルも自動で処理されます。\n　DB@x@y#m と DBx,y#m にも対応しました。\n　例）DB33　　　DB32#-1　　　DB@3@1#1　　　DB3,2　　　DB23#1>=4　　　3R6+1[3,3]>=4\n\n・掘り出し袋表　(BTx)\n　\"BT(ダイス数)\"で掘り出し袋表を自動で振り、結果を表示します。\n　例）BT1　　　BT2　　　BT[1...3]\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$changeText', TMP_10 = function $$changeText(string) {
      var $a, $b, TMP_5, $c, TMP_6, $d, TMP_7, $e, TMP_8, $f, TMP_9, self = this;

      if ((($a = (string['$=~'](/DB/i))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return string
      };
      string = ($a = ($b = string).$gsub, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $c;

      return "DB" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))) + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](2)))}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b, /DB(\d),(\d)/);
      string = ($a = ($c = string).$gsub, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $d;

      return "DB" + ((($d = $gvars['~']) === nil ? nil : $d['$[]'](1))) + ((($d = $gvars['~']) === nil ? nil : $d['$[]'](2)))}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($c, /DB\@(\d)\@(\d)/);
      string = ($a = ($d = string).$gsub, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $e;

      return "3R6+" + ((($e = $gvars['~']) === nil ? nil : $e['$[]'](4))) + "[" + ((($e = $gvars['~']) === nil ? nil : $e['$[]'](1))) + "," + ((($e = $gvars['~']) === nil ? nil : $e['$[]'](2))) + "]"}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($d, /DB(\d)(\d)(#([\d][\+\-\d]*))/);
      string = ($a = ($e = string).$gsub, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $f;

      return "3R6" + ((($f = $gvars['~']) === nil ? nil : $f['$[]'](4))) + "[" + ((($f = $gvars['~']) === nil ? nil : $f['$[]'](1))) + "," + ((($f = $gvars['~']) === nil ? nil : $f['$[]'](2))) + "]"}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($e, /DB(\d)(\d)(#([\+\-\d]*))/);
      string = ($a = ($f = string).$gsub, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $g;

      return "3R6[" + ((($g = $gvars['~']) === nil ? nil : $g['$[]'](1))) + "," + ((($g = $gvars['~']) === nil ? nil : $g['$[]'](2))) + "]"}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($f, /DB(\d)(\d)/);
      return string;
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$dice_command_xRn', TMP_11 = function $$dice_command_xRn(string, nick_e) {
      var self = this;

      return self.$check_roll(string, nick_e);
    }, TMP_11.$$arity = 2);

    Opal.defn(self, '$check_nD6', TMP_12 = function $$check_nD6(total_n, dice_n, signOfInequality, diff, dice_cnt, dice_max, n1, n_max) {
      var $a, self = this;

      if ((($a = (signOfInequality['$=='](">="))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return ""
      };
      if ((($a = (diff['$==']("?"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ""};
      if ((($a = ($rb_ge(total_n, diff))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ 成功"};
      return " ＞ 失敗";
    }, TMP_12.$$arity = 8);

    Opal.defn(self, '$check_roll', TMP_13 = function $$check_roll(string, nick_e) {
      var $a, $b, self = this, output = nil, mod = nil, abl = nil, skl = nil, signOfInequality = nil, diff = nil, total = nil, out_str = nil;

      output = "1";
      if ((($a = (/(^|\s)S?(3[rR]6([\+\-\d]+)?(\[(\d+),(\d+)\])(([>=]+)(\d+))?)(\s|$)/i['$=~'](string))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return "1"
      };
      string = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2));
      mod = 0;
      abl = 1;
      skl = 1;
      signOfInequality = "";
      diff = 0;
      if ((($a = ((($b = $gvars['~']) === nil ? nil : $b['$[]'](3)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        mod = self.$parren_killer("(0" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](3))) + ")").$to_i()};
      if ((($a = ((($b = $gvars['~']) === nil ? nil : $b['$[]'](4)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        abl = (($a = $gvars['~']) === nil ? nil : $a['$[]'](5)).$to_i();
        skl = (($a = $gvars['~']) === nil ? nil : $a['$[]'](6)).$to_i();};
      if ((($a = ((($b = $gvars['~']) === nil ? nil : $b['$[]'](7)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        signOfInequality = self.$marshalSignOfInequality((($a = $gvars['~']) === nil ? nil : $a['$[]'](8)));
        diff = (($a = $gvars['~']) === nil ? nil : $a['$[]'](9)).$to_i();};
      $b = self.$get_dice(mod, abl, skl), $a = Opal.to_ary($b), total = ($a[0] == null ? nil : $a[0]), out_str = ($a[1] == null ? nil : $a[1]), $b;
      output = "" + (nick_e) + ": (" + (string) + ") ＞ " + (out_str);
      if ((($a = (signOfInequality['$!='](""))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = $rb_plus(output, self.$check_suc(total, 0, signOfInequality, diff, 3, 6, 0, 0))};
      return output;
    }, TMP_13.$$arity = 2);

    Opal.defn(self, '$get_dice', TMP_16 = function $$get_dice(mod, abl, skl) {
      var $a, $b, TMP_14, $c, TMP_15, self = this, total = nil, crit = nil, fumble = nil, dice_c = nil, dummy = nil, dice_str = nil, dice_arr = nil, resultText = nil, output = nil;

      total = 0;
      crit = 0;
      fumble = 0;
      dice_c = $rb_plus(3, mod.$abs());
      dummy = self.$roll(dice_c, 6, 1);
      dummy.$shift();
      dice_str = dummy.$shift();
      dice_arr = ($a = ($b = dice_str.$split(/,/)).$collect, $a.$$p = (TMP_14 = function(i){var self = TMP_14.$$s || this;
if (i == null) i = nil;
      return i.$to_i()}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($b);
      ($a = ($c = (3)).$times, $a.$$p = (TMP_15 = function(i){var self = TMP_15.$$s || this, $d, ch = nil;
if (i == null) i = nil;
      ch = dice_arr['$[]'](i);
        if ((($d = ($rb_lt(mod, 0))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          ch = dice_arr['$[]']($rb_minus($rb_minus(dice_c, i), 1))};
        if ((($d = ($rb_le(ch, abl))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          total = $rb_plus(total, 1)};
        if ((($d = ($rb_le(ch, skl))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          total = $rb_plus(total, 1)};
        if ((($d = ($rb_le(ch, 2))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          crit = $rb_plus(crit, 1)};
        if ((($d = ($rb_ge(ch, 5))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return fumble = $rb_plus(fumble, 1)
          } else {
          return nil
        };}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15), $a).call($c);
      resultText = "";
      if ((($a = ($rb_ge(crit, 3))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        resultText = " ＞ クリティカル";
        total = $rb_plus(6, skl);};
      if ((($a = ($rb_ge(fumble, 3))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        resultText = " ＞ ファンブル";
        total = 0;};
      output = "" + (total) + "[" + (dice_str) + "]" + (resultText);
      return [total, output];
    }, TMP_16.$$arity = 3);

    Opal.defn(self, '$rollDiceCommand', TMP_17 = function $$rollDiceCommand(command) {
      var $a, self = this, $case = nil, dice = nil;

      $case = command;if (/BT(\d+)?/i['$===']($case)) {dice = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1));
      ((($a = dice) !== false && $a !== nil && $a != null) ? $a : dice = 1);
      return self.$get_horidasibukuro_table(dice);};
      return nil;
    }, TMP_17.$$arity = 1);

    return (Opal.defn(self, '$get_horidasibukuro_table', TMP_18 = function $$get_horidasibukuro_table(dice) {
      var $a, $b, self = this, output = nil, material_kind = nil, magic_stone = nil, num1 = nil, dmy = nil, num2 = nil, magic_stone_result = nil, type = nil;

      output = "1";
      material_kind = ["蟲甲", "金属", "金貨", "植物", "獣皮", "竜鱗", "レアモノ", "レアモノ"];
      magic_stone = ["火炎石", "雷撃石", "氷結石"];
      $b = self.$roll(2, 6), $a = Opal.to_ary($b), num1 = ($a[0] == null ? nil : $a[0]), dmy = ($a[1] == null ? nil : $a[1]), $b;
      $b = self.$roll(dice, 6), $a = Opal.to_ary($b), num2 = ($a[0] == null ? nil : $a[0]), dmy = ($a[1] == null ? nil : $a[1]), $b;
      self.$debug("dice", dice);
      self.$debug("num1", num1);
      self.$debug("num2", num2);
      if ((($a = ($rb_le(num1, 4))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        $b = self.$roll(1, 6), $a = Opal.to_ary($b), num2 = ($a[0] == null ? nil : $a[0]), dmy = ($a[1] == null ? nil : $a[1]), $b;
        magic_stone_result = (magic_stone['$[]']($rb_minus(($rb_divide(num2, 2)).$to_i(), 1)));
        output = "《" + (magic_stone_result) + "》を" + (dice) + "個獲得";
      } else if ((($a = (num1['$=='](7))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = "《金貨》を" + (num2) + "枚獲得"
        } else {
        type = material_kind['$[]']($rb_minus(num1, 5));
        if ((($a = ($rb_le(num2, 3))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          output = "《" + (type) + " I》を1個獲得"
        } else if ((($a = ($rb_le(num2, 5))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          output = "《" + (type) + " I》を2個獲得"
        } else if ((($a = ($rb_le(num2, 7))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          output = "《" + (type) + " I》を3個獲得"
        } else if ((($a = ($rb_le(num2, 9))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          output = "《" + (type) + " II》を1個獲得"
        } else if ((($a = ($rb_le(num2, 11))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          output = "《" + (type) + " I》を2個《" + (type) + " II》を1個獲得"
        } else if ((($a = ($rb_le(num2, 13))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          output = "《" + (type) + " I》を2個《" + (type) + " II》を2個獲得"
        } else if ((($a = ($rb_le(num2, 15))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          output = "《" + (type) + " III》を1個獲得"
        } else if ((($a = ($rb_le(num2, 17))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          output = "《" + (type) + " II》を2個《" + (type) + " III》を1個獲得"
          } else {
          output = "《" + (type) + " II》を2個《" + (type) + " III》を2個獲得"
        };
      };
      if ((($a = (output['$!=']("1"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = "掘り出し袋表[" + (num1) + "," + (num2) + "] ＞ " + (output)};
      return output;
    }, TMP_18.$$arity = 1), nil) && 'get_horidasibukuro_table';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
