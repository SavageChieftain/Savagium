/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$setPrefixes', '$===', '$to_i', '$roll2DR', '$roll2DarkDice', '$getModInfo', '$getDiffInfo', '$+', '$-', '$getSuccessText', '$getDarkPointResult', '$roll', '$collect', '$split', '$changeDiceToDarkDice', '$==', '$parren_killer', '$<', '$to_s', '$>', '$nil?', '$>=']);
  return (function($base, $super) {
    function $ZettaiReido(){};
    var self = $ZettaiReido = $klass($base, $super, 'ZettaiReido', $ZettaiReido);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14;

    self.$setPrefixes(["\\d+\\-2DR.*"]);

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      return ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "絶対隷奴";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "ZettaiReido";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "・判定\nm-2DR+n>=x\nm(基本能力),n(修正値),x(目標値)\nDPの取得の有無も表示されます。\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$changeText', TMP_5 = function $$changeText(string) {
      var self = this;

      return string;
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$rollDiceCommand', TMP_6 = function $$rollDiceCommand(command) {
      var $a, self = this, baseAvility = nil, modText = nil, diffValue = nil;

      if ((($a = (/^(\d+)-2DR([\+\-\d]*)(>=(\d+))?$/i['$==='](command))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      baseAvility = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$to_i();
      modText = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2));
      diffValue = (($a = $gvars['~']) === nil ? nil : $a['$[]'](4));
      return self.$roll2DR(baseAvility, modText, diffValue);
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$roll2DR', TMP_7 = function $$roll2DR(baseAvility, modText, diffValue) {
      var $a, $b, self = this, diceTotal = nil, diceText = nil, darkPoint = nil, mod = nil, diff = nil, diffText = nil, output = nil, total = nil, successText = nil, darkPointText = nil;

      $b = self.$roll2DarkDice(), $a = Opal.to_ary($b), diceTotal = ($a[0] == null ? nil : $a[0]), diceText = ($a[1] == null ? nil : $a[1]), darkPoint = ($a[2] == null ? nil : $a[2]), $b;
      $b = self.$getModInfo(modText), $a = Opal.to_ary($b), mod = ($a[0] == null ? nil : $a[0]), modText = ($a[1] == null ? nil : $a[1]), $b;
      $b = self.$getDiffInfo(diffValue), $a = Opal.to_ary($b), diff = ($a[0] == null ? nil : $a[0]), diffText = ($a[1] == null ? nil : $a[1]), $b;
      output = "";
      output = $rb_plus(output, "(" + (baseAvility) + "-2DR" + (modText) + (diffText) + ")");
      output = $rb_plus(output, " ＞ " + (baseAvility) + "-" + (diceTotal) + "[" + (diceText) + "]" + (modText));
      total = $rb_plus($rb_minus(baseAvility, diceTotal), mod);
      output = $rb_plus(output, " ＞ " + (total));
      successText = self.$getSuccessText(diceTotal, total, diff);
      output = $rb_plus(output, successText);
      darkPointText = self.$getDarkPointResult(total, diff, darkPoint);
      output = $rb_plus(output, darkPointText);
      return output;
    }, TMP_7.$$arity = 3);

    Opal.defn(self, '$roll2DarkDice', TMP_9 = function $$roll2DarkDice() {
      var $a, $b, $c, $d, TMP_8, self = this, _ = nil, dice_str = nil, dice1 = nil, dice2 = nil, darkDice1 = nil, darkPoint1 = nil, darkDice2 = nil, darkPoint2 = nil, darkPoint = nil, darkTotal = nil, darkDiceText = nil;

      $b = self.$roll(2, 6), $a = Opal.to_ary($b), _ = ($a[0] == null ? nil : $a[0]), dice_str = ($a[1] == null ? nil : $a[1]), $b;
      $b = ($c = ($d = dice_str.$split(",")).$collect, $c.$$p = (TMP_8 = function(i){var self = TMP_8.$$s || this;
if (i == null) i = nil;
      return i.$to_i()}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $c).call($d), $a = Opal.to_ary($b), dice1 = ($a[0] == null ? nil : $a[0]), dice2 = ($a[1] == null ? nil : $a[1]), $b;
      $b = self.$changeDiceToDarkDice(dice1), $a = Opal.to_ary($b), darkDice1 = ($a[0] == null ? nil : $a[0]), darkPoint1 = ($a[1] == null ? nil : $a[1]), $b;
      $b = self.$changeDiceToDarkDice(dice2), $a = Opal.to_ary($b), darkDice2 = ($a[0] == null ? nil : $a[0]), darkPoint2 = ($a[1] == null ? nil : $a[1]), $b;
      darkPoint = $rb_plus(darkPoint1, darkPoint2);
      if ((($a = (darkPoint['$=='](2))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        darkPoint = 4};
      darkTotal = $rb_plus(darkDice1, darkDice2);
      darkDiceText = "" + (darkDice1) + "," + (darkDice2);
      return [darkTotal, darkDiceText, darkPoint];
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$changeDiceToDarkDice', TMP_10 = function $$changeDiceToDarkDice(dice) {
      var $a, self = this, darkPoint = nil, darkDice = nil;

      darkPoint = 0;
      darkDice = dice;
      if ((($a = (dice['$=='](6))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        darkDice = 0;
        darkPoint = 1;};
      return [darkDice, darkPoint];
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$getModInfo', TMP_11 = function $$getModInfo(modText) {
      var $a, self = this, value = nil, text = nil;

      value = self.$parren_killer("(0" + (modText) + ")").$to_i();
      text = "";
      if ((($a = ($rb_lt(value, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        text = value.$to_s()
      } else if ((($a = ($rb_gt(value, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        text = $rb_plus("+", value.$to_s())};
      return [value, text];
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$getDiffInfo', TMP_12 = function $$getDiffInfo(diffValue) {
      var $a, self = this, diffText = nil;

      diffText = "";
      if ((($a = (diffValue['$nil?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        diffValue = diffValue.$to_i();
        diffText = ">=" + (diffValue.$to_i());
      };
      return [diffValue, diffText];
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$getDarkPointResult', TMP_13 = function $$getDarkPointResult(total, diff, darkPoint) {
      var $a, self = this, text = nil;

      text = "";
      if ((($a = ($rb_gt(darkPoint, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        text = " ＞ " + (darkPoint) + "DP"};
      return text;
    }, TMP_13.$$arity = 3);

    return (Opal.defn(self, '$getSuccessText', TMP_14 = function $$getSuccessText(diceTotal, total, diff) {
      var $a, self = this, successLevel = nil;

      if ((($a = (diceTotal['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ クリティカル"};
      if ((($a = (diceTotal['$=='](10))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ ファンブル"};
      if ((($a = (diff['$nil?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        diff = 0};
      successLevel = ($rb_minus(total, diff));
      if ((($a = ($rb_ge(successLevel, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ " + (successLevel) + " 成功"};
      return " ＞ 失敗";
    }, TMP_14.$$arity = 3), nil) && 'getSuccessText';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
