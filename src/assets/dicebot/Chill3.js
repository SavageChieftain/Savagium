/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$==', '$div', '$%', '$>', '$<=', '$/']);
  return (function($base, $super) {
    function $Chill3(){};
    var self = $Chill3 = $klass($base, $super, 'Chill3', $Chill3);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

    Opal.defn(self, '$gameName', TMP_1 = function $$gameName() {
      var self = this;

      return "Chill 3";
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_2 = function $$gameType() {
      var self = this;

      return "Chill3";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_3 = function $$getHelpMessage() {
      var self = this, info = nil;

      return info = "・1D100で判定時に成否、Botchを判定\n　例）1D100<=50\n　　　Chill3 : (1D100<=50) ＞ 55 ＞ Botch\n";
    }, TMP_3.$$arity = 0);

    return (Opal.defn(self, '$check_1D100', TMP_4 = function $$check_1D100(total_n, dice_n, signOfInequality, diff, dice_cnt, dice_max, n1, n_max) {
      var $a, $b, self = this, s10 = nil, s1 = nil;

      if ((($a = (signOfInequality['$==']("<="))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return ""
      };
      s10 = dice_n.$div(10);
      s1 = dice_n['$%'](10);
      if ((($a = (s10['$=='](10))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        s10 = 0};
      if ((($a = (s10['$=='](s1))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = (((($b = ($rb_gt(total_n, diff))) !== false && $b !== nil && $b != null) ? $b : (dice_n['$=='](100))))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = ($rb_gt(diff, 100))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return " ＞ 失敗"};
          return " ＞ Botch";};
        return " ＞ Ｃ成功";};
      if ((($a = (((($b = ($rb_le(total_n, diff))) !== false && $b !== nil && $b != null) ? $b : (dice_n['$=='](1))))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ($rb_le(total_n, ($rb_divide(diff, 2))))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " ＞ Ｈ成功"};
        return " ＞ Ｌ成功";};
      return " ＞ 失敗";
    }, TMP_4.$$arity = 8), nil) && 'check_1D100';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
