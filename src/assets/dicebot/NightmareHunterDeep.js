/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$debug', '$sub', '$-', '$*', '$to_i', '$+', '$==', '$!=', '$>=', '$<=', '$>']);
  return (function($base, $super) {
    function $NightmareHunterDeep(){};
    var self = $NightmareHunterDeep = $klass($base, $super, 'NightmareHunterDeep', $NightmareHunterDeep);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_7, TMP_8, TMP_9, TMP_10;

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      self.sendMode = 2;
      return self.sortType = 1;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "ナイトメアハンター=ディープ";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "NightmareHunterDeep";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "加算ロール時に６の個数をカウントして、その４倍を自動的に加算します。\n(出目はそのまま表示で合計値が6-10の読み替えになります)\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$changeText', TMP_7 = function $$changeText(string) {
      var $a, $b, TMP_5, $c, TMP_6, self = this;

      self.$debug("parren_killer_add before string", string);
      string = ($a = ($b = string).$sub, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $c;

      return "" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))) + (($rb_minus($rb_times((($c = $gvars['~']) === nil ? nil : $c['$[]'](2)).$to_i(), 5), 1))) + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](3)))}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b, /^(.+?)Lv(\d+)(.*)/i);
      string = ($a = ($c = string).$sub, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $d;

      return "" + ((($d = $gvars['~']) === nil ? nil : $d['$[]'](1))) + (($rb_plus($rb_times((($d = $gvars['~']) === nil ? nil : $d['$[]'](2)).$to_i(), 5), 5))) + ((($d = $gvars['~']) === nil ? nil : $d['$[]'](3)))}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($c, /^(.+?)NL(\d+)(.*)/i);
      self.$debug("parren_killer_add after string", string);
      return string;
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$check_nD6', TMP_8 = function $$check_nD6(total_n, dice_n, signOfInequality, diff, dice_cnt, dice_max, n1, n_max) {
      var $a, $b, self = this, sucLv = nil, sucNL = nil;
      if ($gvars.signOfInequality == null) $gvars.signOfInequality = nil;

      if ((($a = ($gvars.signOfInequality['$=='](">="))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return ""
      };
      if ((($a = (diff['$!=']("?"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ($rb_ge(total_n, diff))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " ＞ 成功"};
        return " ＞ 失敗";};
      sucLv = 1;
      sucNL = 0;
      while ((($b = ($rb_ge(total_n, $rb_minus($rb_times(sucLv, 5), 1)))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
      sucLv = $rb_plus(sucLv, 1)};
      while ((($b = ($rb_ge(total_n, ($rb_plus($rb_times(sucNL, 5), 5))))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
      sucNL = $rb_plus(sucNL, 1)};
      sucLv = $rb_minus(sucLv, 1);
      sucNL = $rb_minus(sucNL, 1);
      if ((($a = ($rb_le(sucLv, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ 失敗"
        } else {
        return " ＞ Lv" + (sucLv) + "/NL" + (sucNL) + "成功"
      };
    }, TMP_8.$$arity = 8);

    Opal.defn(self, '$getDiceRolledAdditionalText', TMP_9 = function $$getDiceRolledAdditionalText(n1, n_max, dice_max) {
      var $a, $b, self = this;

      self.$debug("getDiceRolledAdditionalText begin: n1, n_max, dice_max", n1, n_max, dice_max);
      if ((($a = (($b = (n1['$!='](0)), $b !== false && $b !== nil && $b != null ?(dice_max['$=='](6)) : $b))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ 宿命獲得"};
      return "";
    }, TMP_9.$$arity = 3);

    return (Opal.defn(self, '$getDiceRevision', TMP_10 = function $$getDiceRevision(n_max, dice_max, total_n) {
      var $a, $b, self = this, addText = nil, revision = nil;

      addText = "";
      revision = 0;
      if ((($a = (($b = ($rb_gt(n_max, 0)), $b !== false && $b !== nil && $b != null ?(dice_max['$=='](6)) : $b))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        revision = ($rb_times(n_max, 4));
        addText = ("+" + (n_max) + "*4 ＞ " + ($rb_plus(total_n, revision)));};
      return [addText, revision];
    }, TMP_10.$$arity = 3), nil) && 'getDiceRevision';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
