/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$debug', '$judgeRoll', '$nil?', '$reRoll', '$getRulingPlanetDiceCommandResult', '$getDurtyTableCommandReuslt', '$getTableCommandResult', '$=~', '$new', '$!', '$to_i', '$+', '$getRollResult', '$getTotalResultMessageText', '$collect', '$split', '$each', '$empty?', '$>', '$size', '$each_with_index', '$==', '$-', '$roll', '$getSuccessResultText', '$find_all', '$>=', '$<<', '$getSameDieList', '$join', '$count', '$inject', '$<=', '$length', '$uniq', '$===', '$getRulingPlanetDice', '$include?', '$changeRulingPlanetDice', '$*', '$ceil', '$/', '$[]', '$setPrefixes', '$keys']);
  return (function($base, $super) {
    function $BlindMythos(){};
    var self = $BlindMythos = $klass($base, $super, 'BlindMythos', $BlindMythos);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_9, TMP_15, TMP_18, TMP_21, TMP_23, TMP_26, TMP_27, TMP_28, TMP_29, $a;

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      return ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "ブラインド・ミトス";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "BlindMythos";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "・判定：BMx@y>=z、BMSx@y>=z\n  　x:スキルレベル\n　　y:目標難易度（省略可。デフォルト4）\n　　z:必要成功度\n　BMコマンドはダイスの振り足しを常に行い、\n　BMSは振り足しを自動では行いません。\n 例）BM>=1　BM@3>=1　BMS2>=1\n\n・判定振り足し：ReRollx,x,x...@y>=1\n  　x:振るダイスの個数\n　　y:目標難易度（省略可。デフォルト4）\n　　z:必要成功度\n　振り足しを自動で行わない場合（BMSコマンド）に使用します。\n\n・LE：失う感情表\n・感情後遺症表 ESx\n　ESH：喜、ESA：怒、ESS：哀、ESP：楽、ESL：愛、ESE：感\n・DT：汚染チャート\n・RPxyz：守護星表チェック\n xyz:守護星ナンバーを指定\n 例）RP123　RP258\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$rollDiceCommand', TMP_5 = function $$rollDiceCommand(command) {
      var $a, $b, self = this, text = nil, isStop = nil;

      self.$debug("rollDiceCommand Begin");
      text = self.$judgeRoll(command);
      if ((($a = (text['$nil?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return text
      };
      isStop = true;
      $b = self.$reRoll(command, isStop), $a = Opal.to_ary($b), text = ($a[0] == null ? nil : $a[0]), $b;
      if ((($a = (text['$nil?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return text
      };
      text = self.$getRulingPlanetDiceCommandResult(command);
      if ((($a = (text['$nil?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return text
      };
      text = self.$getDurtyTableCommandReuslt(command);
      if ((($a = (text['$nil?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return text
      };
      text = self.$getTableCommandResult(command, (($a = Opal.cvars['@@tables']) == null ? nil : $a));
      return text;
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$judgeRoll', TMP_6 = function $$judgeRoll(command) {
      var $a, $b, self = this, pattern = nil, isStop = nil, skillRank = nil, judgeNumberText = nil, judgeNumber = nil, targetNumber = nil, message = nil, diceCount = nil, isReRoll = nil, text = nil, bitList = nil, successList = nil, countOneList = nil, canReRoll = nil;

      pattern = "^BM(S)?(\\d*)(@(\\d+))?>=(\\d+)$";
      if ((($a = ($scope.get('Regexp').$new(pattern, (($scope.get('Regexp')).$$scope.get('IGNORECASE')))['$=~'](command))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      isStop = ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))['$nil?']()['$!']());
      skillRank = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$to_i();
      judgeNumberText = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3));
      judgeNumber = (((($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](4))) !== false && $a !== nil && $a != null) ? $a : 4)).$to_i();
      targetNumber = (((($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](5))) !== false && $a !== nil && $a != null) ? $a : 1)).$to_i();
      message = "";
      diceCount = $rb_plus(skillRank, 2);
      isReRoll = false;
      $b = self.$getRollResult([diceCount], judgeNumberText, judgeNumber, targetNumber, isReRoll, isStop), $a = Opal.to_ary($b), text = ($a[0] == null ? nil : $a[0]), bitList = ($a[1] == null ? nil : $a[1]), successList = ($a[2] == null ? nil : $a[2]), countOneList = ($a[3] == null ? nil : $a[3]), canReRoll = ($a[4] == null ? nil : $a[4]), $b;
      message = $rb_plus(message, text);
      message = $rb_plus(message, self.$getTotalResultMessageText(bitList, successList, countOneList, targetNumber, isStop, canReRoll));
      return message;
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$reRoll', TMP_9 = function $$reRoll(command, isStop) {
      var $a, $b, TMP_7, $c, TMP_8, $d, self = this, pattern = nil, rerollCountsText = nil, judgeNumberText = nil, judgeNumber = nil, targetNumber = nil, rerollCounts = nil, commandText = nil, message = nil, isReRoll = nil, text = nil, bitList = nil, successList = nil, countOneList = nil, canReRoll = nil;

      self.$debug("ReRoll Begin", command);
      pattern = "^ReRoll([\\d,]+)(@(\\d+))?>=(\\d+)$";
      if ((($a = ($scope.get('Regexp').$new(pattern, (($scope.get('Regexp')).$$scope.get('IGNORECASE')))['$=~'](command))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      self.$debug("ReRoll pass");
      rerollCountsText = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1));
      judgeNumberText = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2));
      judgeNumber = (((($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](3))) !== false && $a !== nil && $a != null) ? $a : 4)).$to_i();
      targetNumber = (($a = $gvars['~']) === nil ? nil : $a['$[]'](4)).$to_i();
      rerollCounts = ($a = ($b = rerollCountsText.$split(/,/)).$collect, $a.$$p = (TMP_7 = function(i){var self = TMP_7.$$s || this;
if (i == null) i = nil;
      return i.$to_i()}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b);
      commandText = "";
      ($a = ($c = rerollCounts).$each, $a.$$p = (TMP_8 = function(diceCount){var self = TMP_8.$$s || this, $d;
if (diceCount == null) diceCount = nil;
      if ((($d = commandText['$empty?']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          } else {
          commandText = $rb_plus(commandText, ",")
        };
        return commandText = $rb_plus(commandText, "ReRoll" + (diceCount) + (judgeNumberText) + ">=" + (targetNumber));}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($c);
      self.$debug("commandText", commandText);
      message = "";
      if ((($a = $rb_gt(rerollCounts.$size(), 1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if (isStop !== false && isStop !== nil && isStop != null) {
          message = $rb_plus(message, "(" + (commandText) + ")")}};
      message = $rb_plus(message, "\n");
      isReRoll = true;
      $d = self.$getRollResult(rerollCounts, judgeNumberText, judgeNumber, targetNumber, isReRoll, isStop), $a = Opal.to_ary($d), text = ($a[0] == null ? nil : $a[0]), bitList = ($a[1] == null ? nil : $a[1]), successList = ($a[2] == null ? nil : $a[2]), countOneList = ($a[3] == null ? nil : $a[3]), canReRoll = ($a[4] == null ? nil : $a[4]), $d;
      message = $rb_plus(message, text);
      return [message, successList, countOneList, targetNumber];
    }, TMP_9.$$arity = 2);

    Opal.defn(self, '$getRollResult', TMP_15 = function $$getRollResult(rerollCounts, judgeNumberText, judgeNumber, targetNumber, isReRoll, isStop) {
      var $a, $b, TMP_10, $c, self = this, bitList = nil, successList = nil, countOneList = nil, rerollTargetList = nil, message = nil, rerollCommand = nil, canReRoll = nil, text = nil, successListTmp = nil, countOneListTmp = nil;

      bitList = [];
      successList = [];
      countOneList = [];
      rerollTargetList = [];
      message = "";
      ($a = ($b = rerollCounts).$each_with_index, $a.$$p = (TMP_10 = function(diceCount, index){var self = TMP_10.$$s || this, $c, $d, TMP_11, $e, TMP_12, $f, TMP_13, $g, TMP_14, commandName = nil, commandText = nil, isSort = nil, _ = nil, diceText = nil, diceList = nil, success = nil, countOne = nil, resultText = nil, sameDiceList = nil, rerollText = nil;
if (diceCount == null) diceCount = nil;if (index == null) index = nil;
      if (index['$=='](0)) {
          } else {
          message = $rb_plus(message, "\n")
        };
        commandName = "ReRoll" + (diceCount);
        if (isReRoll !== false && isReRoll !== nil && isReRoll != null) {
        } else if (isStop !== false && isStop !== nil && isStop != null) {
          commandName = "BMS" + ($rb_minus(diceCount, 2))
          } else {
          commandName = "BM" + ($rb_minus(diceCount, 2))
        };
        commandText = "" + (commandName) + (judgeNumberText) + ">=" + (targetNumber);
        isSort = 1;
        $d = self.$roll(diceCount, 6, isSort), $c = Opal.to_ary($d), _ = ($c[0] == null ? nil : $c[0]), diceText = ($c[1] == null ? nil : $c[1]), $d;
        diceList = ($c = ($d = diceText.$split(/,/)).$collect, $c.$$p = (TMP_11 = function(i){var self = TMP_11.$$s || this;
if (i == null) i = nil;
        return i.$to_i()}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $c).call($d);
        if (isReRoll !== false && isReRoll !== nil && isReRoll != null) {
          message = $rb_plus(message, " ＞ ")};
        message = $rb_plus(message, "(" + (commandText) + ") ＞ " + (diceCount) + "D6[" + (diceText) + "] ＞ ");
        $e = self.$getSuccessResultText(diceList, judgeNumber), $c = Opal.to_ary($e), success = ($c[0] == null ? nil : $c[0]), countOne = ($c[1] == null ? nil : $c[1]), resultText = ($c[2] == null ? nil : $c[2]), $e;
        if (isReRoll !== false && isReRoll !== nil && isReRoll != null) {
          } else {
          bitList = $rb_plus(bitList, ($c = ($e = diceList).$find_all, $c.$$p = (TMP_12 = function(i){var self = TMP_12.$$s || this;
if (i == null) i = nil;
          return $rb_ge(i, 4)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $c).call($e))
        };
        successList['$<<'](success);
        countOneList['$<<'](countOne);
        message = $rb_plus(message, resultText);
        sameDiceList = self.$getSameDieList(diceList);
        if ((($c = sameDiceList['$empty?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return nil
          } else {
          rerollText = "";
          ($c = ($f = sameDiceList).$each, $c.$$p = (TMP_13 = function(list){var self = TMP_13.$$s || this, $g;
if (list == null) list = nil;
          if ((($g = rerollText['$empty?']()) !== nil && $g != null && (!$g.$$is_boolean || $g == true))) {
              } else {
              rerollText = $rb_plus(rerollText, ",")
            };
            return rerollText = $rb_plus(rerollText, list.$join(""));}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $c).call($f);
          rerollTargetList['$<<'](($c = ($g = sameDiceList).$collect, $c.$$p = (TMP_14 = function(i){var self = TMP_14.$$s || this;
if (i == null) i = nil;
          return i.$count()}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $c).call($g).$join(","));
          return message = $rb_plus(message, "、リロール[" + (rerollText) + "]");
        };}, TMP_10.$$s = self, TMP_10.$$arity = 2, TMP_10), $a).call($b);
      rerollCommand = "";
      if ((($a = rerollTargetList['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        rerollCommand = "ReRoll" + (rerollTargetList.$join(",")) + (judgeNumberText) + ">=" + (targetNumber);
        if (isStop !== false && isStop !== nil && isStop != null) {
          message = $rb_plus(message, "\n ＞ コマンド：" + (rerollCommand))};
      };
      canReRoll = (rerollCommand['$empty?']()['$!']());
      if (canReRoll !== false && canReRoll !== nil && canReRoll != null) {
        if (isStop !== false && isStop !== nil && isStop != null) {
          } else {
          $c = self.$reRoll(rerollCommand, isStop), $a = Opal.to_ary($c), text = ($a[0] == null ? nil : $a[0]), successListTmp = ($a[1] == null ? nil : $a[1]), countOneListTmp = ($a[2] == null ? nil : $a[2]), $c;
          message = $rb_plus(message, text);
          successList = $rb_plus(successList, successListTmp);
          countOneList = $rb_plus(countOneList, countOneListTmp);
        }};
      return [message, bitList, successList, countOneList, canReRoll];
    }, TMP_15.$$arity = 6);

    Opal.defn(self, '$getTotalResultMessageText', TMP_18 = function $$getTotalResultMessageText(bitList, successList, countOneList, targetNumber, isStop, canReRoll) {
      var $a, $b, TMP_16, $c, TMP_17, $d, self = this, success = nil, countOne = nil, result = nil;

      success = ($a = ($b = successList).$inject, $a.$$p = (TMP_16 = function(sum, i){var self = TMP_16.$$s || this;
if (sum == null) sum = nil;if (i == null) i = nil;
      return $rb_plus(sum, i)}, TMP_16.$$s = self, TMP_16.$$arity = 2, TMP_16), $a).call($b);
      countOne = ($a = ($c = countOneList).$inject, $a.$$p = (TMP_17 = function(sum, i){var self = TMP_17.$$s || this;
if (sum == null) sum = nil;if (i == null) i = nil;
      return $rb_plus(sum, i)}, TMP_17.$$s = self, TMP_17.$$arity = 2, TMP_17), $a).call($c);
      result = "";
      if ((($a = $rb_gt(successList.$size(), 1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, "\n ＞ 最終成功数:" + (success))};
      if ((($a = (($d = canReRoll !== false && canReRoll !== nil && canReRoll != null) ? isStop : canReRoll)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, "\n");
        if ((($a = $rb_ge(success, targetNumber)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result = $rb_plus(result, " ＞ 現状で成功。コマンド実行で追加リロールも可能")
          } else {
          result = $rb_plus(result, " ＞ 現状のままでは失敗");
          if ((($a = $rb_ge(countOne, 1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result = $rb_plus(result, "。汚染ポイント+" + (countOne))};
        };
        return result;};
      if ((($a = $rb_ge(success, targetNumber)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, " ＞ 成功");
        if ((($a = $rb_ge(bitList.$size(), 1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result = $rb_plus(result, "、禁書ビット発生[" + (bitList.$join(",")) + "]")};
        } else {
        result = $rb_plus(result, " ＞ 失敗");
        if ((($a = $rb_ge(countOne, 1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result = $rb_plus(result, "。汚染ポイント+" + (countOne))};
      };
      return result;
    }, TMP_18.$$arity = 6);

    Opal.defn(self, '$getSameDieList', TMP_21 = function $$getSameDieList(diceList) {
      var $a, $b, TMP_19, self = this, sameDiceList = nil;

      sameDiceList = [];
      ($a = ($b = diceList.$uniq()).$each, $a.$$p = (TMP_19 = function(i){var self = TMP_19.$$s || this, $c, $d, TMP_20, list = nil;
if (i == null) i = nil;
      if (i['$=='](1)) {
          return nil;};
        list = ($c = ($d = diceList).$find_all, $c.$$p = (TMP_20 = function(dice){var self = TMP_20.$$s || this;
if (dice == null) dice = nil;
        return dice['$=='](i)}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20), $c).call($d);
        if ((($c = $rb_le(list.$length(), 1)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return nil;};
        return sameDiceList['$<<'](list);}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $a).call($b);
      return sameDiceList;
    }, TMP_21.$$arity = 1);

    Opal.defn(self, '$getSuccessResultText', TMP_23 = function $$getSuccessResultText(diceList, judgeNumber) {
      var $a, $b, TMP_22, self = this, success = nil, countOne = nil, result = nil;

      success = 0;
      countOne = 0;
      ($a = ($b = diceList).$each, $a.$$p = (TMP_22 = function(i){var self = TMP_22.$$s || this, $c;
if (i == null) i = nil;
      if (i['$=='](1)) {
          countOne = $rb_plus(countOne, 1)};
        if ((($c = $rb_ge(i, judgeNumber)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          } else {
          return nil;
        };
        return success = $rb_plus(success, 1);}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $a).call($b);
      result = "成功数:" + (success);
      return [success, countOne, result];
    }, TMP_23.$$arity = 2);

    Opal.defn(self, '$getRulingPlanetDiceCommandResult', TMP_26 = function $$getRulingPlanetDiceCommandResult(command) {
      var $a, $b, TMP_24, $c, TMP_25, self = this, targetNumbers = nil, diceList = nil, matchResult = nil, text = nil;

      if ((($a = /^RP(\d+)/i['$==='](command)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      targetNumbers = ($a = ($b = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1)).$split(/(?:)/)).$collect, $a.$$p = (TMP_24 = function(i){var self = TMP_24.$$s || this;
if (i == null) i = nil;
      return i.$to_i()}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24), $a).call($b);
      diceList = self.$getRulingPlanetDice();
      matchResult = "失敗";
      (function(){var $brk = Opal.new_brk(); try {return ($a = ($c = targetNumbers).$each, $a.$$p = (TMP_25 = function(i){var self = TMP_25.$$s || this, $d;
if (i == null) i = nil;
      if ((($d = diceList['$include?'](i)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          matchResult = "発動";
          
          Opal.brk(nil, $brk);
          } else {
          return nil
        }}, TMP_25.$$s = self, TMP_25.$$brk = $brk, TMP_25.$$arity = 1, TMP_25), $a).call($c)
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      text = "守護星表チェック(" + (targetNumbers.$join(",")) + ") ＞ " + (diceList.$count()) + "D10[" + (diceList.$join(",")) + "] ＞ " + (matchResult);
      return text;
    }, TMP_26.$$arity = 1);

    Opal.defn(self, '$getRulingPlanetDice', TMP_27 = function $$getRulingPlanetDice() {
      var $a, $b, $c, self = this, dice1 = nil, dice2 = nil;

      $b = self.$roll(1, 10), $a = Opal.to_ary($b), dice1 = ($a[0] == null ? nil : $a[0]), $b;
      dice2 = dice1;
      while (dice1['$=='](dice2)) {
      $c = self.$roll(1, 10), $b = Opal.to_ary($c), dice2 = ($b[0] == null ? nil : $b[0]), $c};
      dice1 = self.$changeRulingPlanetDice(dice1);
      dice2 = self.$changeRulingPlanetDice(dice2);
      return [dice1, dice2];
    }, TMP_27.$$arity = 0);

    Opal.defn(self, '$changeRulingPlanetDice', TMP_28 = function $$changeRulingPlanetDice(dice) {
      var self = this;

      if (dice['$=='](10)) {
        return 0};
      return dice;
    }, TMP_28.$$arity = 1);

    Opal.defn(self, '$getDurtyTableCommandReuslt', TMP_29 = function $$getDurtyTableCommandReuslt(command) {
      var $a, $b, self = this, table = nil, dice1 = nil, dice2 = nil, index = nil;

      if ((($a = (/^DT$/i['$=~'](command))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      table = "汚染チャートを２回振り、その効果を適用する（1・2-2,5・6-12 なら振り直す）\nＰＣ全員の「トラウマ」「喪失」すべてに２ダメージ\nＰＣ全員の「喪失」２つに４ダメージ\nＰＣ全員の「トラウマ」すべてに２ダメージ。その後さらに汚染が２増える\nＰＣ全員、１つの【記憶】の両方の値が０になる。このときアクロバットダイス獲得不可\nＰＣ全員の「喪失」１つに４ダメージ。このときアクロバットダイス獲得不可\nＰＣ全員の「トラウマ」すべてに１ダメージ。その後さらに汚染が３増える\nＰＣ全員の「トラウマ」すべてに１ダメージ。その後アクロバットダイスをＰＣ人数分失う\nＰＣ全員の「喪失」すべてに２ダメージ。禁書ビットをすべて失う\nＰＣ全員の「トラウマ」２つに３ダメージ。その後さらに汚染が１増える\nＰＣ全員の「トラウマ」「喪失」すべてに１ダメージ\nＰＣ全員の「喪失」１つに４ダメージ。禁書ビットをすべて失う\nＰＣ全員の「トラウマ」すべてに２ダメージ\nＰＣ全員の１つの【記憶】の「トラウマ」「喪失」それぞれに３ダメージ\nＰＣ全員の「喪失」すべてに１ダメージ\nＰＣ全員の「トラウマ」３つに２ダメージ\nＰＣ全員の「トラウマ」と「喪失」それぞれ１つに３ダメージ\nＰＣ全員の「喪失」３つに２ダメージ\nＰＣ全員のすべての「トラウマ」に1 ダメージ\nＰＣ全員のひとつの【記憶】の「トラウマ」「喪失」それぞれに３ダメージ\nＰＣ全員の「喪失」すべてに２ダメージ\nＰＣ全員の「トラウマ」ひとつに４ダメージ。禁書ビットをすべて失う\nＰＣ全員の「トラウマ」「喪失」すべてに１ダメージ\nＰＣ全員の「喪失」２つに３ダメージ。その後さらに汚染が１増える\nＰＣ全員の「トラウマ」すべてに２ダメージ。禁書ビットをすべて失う\nＰＣ全員の「喪失」すべてに１ダメージ。その後アクロバットダイスをＰＣ人数分失う\nＰＣ全員の「喪失」すべてに１ダメージ。その後さらに汚染が３増える\nＰＣ全員の「トラウマ」１つに４ダメージ。このときアクロバットダイス獲得不可\nＰＣ全員、１つの【記憶】の両方の値が０になる。このときアクロバットダイス獲得不可\nＰＣ全員の「喪失」すべてに２ダメージ。その後さらに汚染が２増える\nＰＣ全員の「トラウマ」２つに４ダメージ\nＰＣ全員の「トラウマ」「喪失」すべてに２ダメージ\n汚染チャートを２回振り、その効果を適用する（1・2-2,5・6-12 なら振り直す）\n";
      table = table.$split("\n");
      $b = self.$roll(1, 6), $a = Opal.to_ary($b), dice1 = ($a[0] == null ? nil : $a[0]), $b;
      $b = self.$roll(2, 6), $a = Opal.to_ary($b), dice2 = ($a[0] == null ? nil : $a[0]), $b;
      index = $rb_minus($rb_plus($rb_times(($rb_minus(dice2, 2)), 3), ($rb_divide(dice1, 2.0)).$ceil()), 1);
      return "汚染チャート(" + (dice1) + "," + (dice2) + ") ＞ " + (table['$[]'](index));
    }, TMP_29.$$arity = 1);

    (Opal.cvars['@@tables'] = $hash2(["LE", "ESH", "ESA", "ESS", "ESP", "ESL", "ESE"], {"LE": $hash2(["name", "type", "table"], {"name": "失う感情表", "type": "1D6", "table": ["喜：喜びは消えた。嬉しい気持ちとは、なんだっただろう。", "怒：激情は失われ、憎しみもどこかへと消える。", "哀：どんなに辛くても、悲しさを感じない。どうやら涙も涸れたらしい。", "楽：もはや楽しいことなどない。希望を抱くだけ無駄なのだ。", "愛：愛など幻想……無力で儚い、役に立たない世迷い言だ。", "感：なにを見ても、感動はない。心は凍てついている。"]}), "ESH": $hash2(["name", "type", "table"], {"name": "「喜」の感情後遺症表", "type": "2D6", "table": ["日々喜びを求めてしまう。", "日々喜びを求めてしまう。", "嬉しい時間が長続きしない。", "素直に喜びを共有できないことがある。", "小さなことで大きく喜びを感じる。", "小さなことで大きく喜びを感じる。", "影響なし。", "影響なし。", "「喜」の後遺症をひとつ消してもよい。", "「喜」の後遺症をひとつ消してもよい。", "「喜」の後遺症をひとつ消してもよい。"]}), "ESA": $hash2(["name", "type", "table"], {"name": "「怒」の感情後遺症表", "type": "2D6", "table": ["始終不機嫌になる。", "始終不機嫌になる。", "一度怒ると、なかなか収まらない。", "怒りっぽくなる", "怒りかたが激しくなる。", "怒りかたが激しくなる。", "影響なし。", "影響なし。", "「怒」の後遺症をひとつ消してもよい。", "「怒」の後遺症をひとつ消してもよい。", "「怒」の後遺症をひとつ消してもよい。"]}), "ESS": $hash2(["name", "type", "table"], {"name": "「哀」の感情後遺症表", "type": "2D6", "table": ["一度涙が出るとなかなか止まらない。", "一度涙が出るとなかなか止まらない。", "夜、哀しいことを思い出して目が覚める。", "不意に哀しい気持ちになる。", "涙もろくなる。", "涙もろくなる。", "影響なし。", "影響なし。", "「哀」の後遺症をひとつ消してもよい。", "「哀」の後遺症をひとつ消してもよい。", "「哀」の後遺症をひとつ消してもよい。"]}), "ESP": $hash2(["name", "type", "table"], {"name": "「楽」の感情後遺症表", "type": "2D6", "table": ["突然陽気になったり、不意に笑い出してしまう。", "突然陽気になったり、不意に笑い出してしまう。", "周りが楽しくなさそうだと不安になる。", "楽しいことがないと落ち着かない。", "些細なことでも笑ってしまう。", "些細なことでも笑ってしまう。", "影響なし。", "影響なし。", "「楽」の後遺症をひとつ消してもよい。", "「楽」の後遺症をひとつ消してもよい。", "「楽」の後遺症をひとつ消してもよい。"]}), "ESL": $hash2(["name", "type", "table"], {"name": "「愛」の感情後遺症表", "type": "2D6", "table": ["少しでも気になる相手に愛を求めてしまう。", "少しでも気になる相手に愛を求めてしまう。", "愛する相手（恋人・家族・ペット・空想）から離れたくない。", "誰彼構わず優しくしてしまう。", "ひとりでいると不安を感じる。", "ひとりでいると不安を感じる。", "影響なし。", "影響なし。", "「愛」の後遺症をひとつ消してもよい。", "「愛」の後遺症をひとつ消してもよい。", "「愛」の後遺症をひとつ消してもよい。"]}), "ESE": $hash2(["name", "type", "table"], {"name": "「感」の感情後遺症表", "type": "2D6", "table": ["感動を共有できない相手を不信に思ってしまう。", "感動を共有できない相手を不信に思ってしまう。", "嬉しくても哀しくてもすぐに涙が出る。", "リアクションがオーバーになる。", "ちょっとしたことで感動する。", "ちょっとしたことで感動する。", "影響なし。", "影響なし。", "「感」の後遺症をひとつ消してもよい。", "「感」の後遺症をひとつ消してもよい。", "「感」の後遺症をひとつ消してもよい。"]})}));

    return self.$setPrefixes($rb_plus(["BM.*", "ReRoll\\d+.*", "RP\\d+", "DT"], (($a = Opal.cvars['@@tables']) == null ? nil : $a).$keys()));
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
