/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$setPrefixes', '$==', '$<=', '$>=', '$upcase', '$===', '$hm_city_location_table', '$hm_small_location_table', '$hm_hot_location_table', '$hm_freezing_location_table', '$hm_hit_location_table', '$hm_monobeast_action_table', '$!', '$nil?', '$to_i', '$get_strange_ability_table_result', '$hm_social_skill_table', '$hm_head_skill_table', '$hm_arm_skill_table', '$hm_trunk_skill_table', '$hm_leg_skill_table', '$hm_environmental_skill_table', '$hm_encount_table', '$get_table_by_1d6', '$get_table_by_2d6', '$get_strange_ability_table_1', '$get_strange_ability_table_2', '$times', '$!=', '$+', '$roll', '$%', '$[]', '$get_table_by_d66', '$empty?']);
  return (function($base, $super) {
    function $HuntersMoon(){};
    var self = $HuntersMoon = $klass($base, $super, 'HuntersMoon', $HuntersMoon);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24;

    self.$setPrefixes(["(ET|CLT|SLT|HLT|FLT|DLT|MAT|SAT|SA2T|TST|THT|TAT|TBT|TLT|TET)\\d*"]);

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      self.sendMode = 2;
      self.sortType = 1;
      self.d66Type = 2;
      return self.fractionType = "roundUp";
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "ハンターズムーン";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "HuntersMoon";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "・判定\n　判定時にクリティカルとファンブルを自動判定します。\n・各種表\n　・遭遇表　(ET)\n　・都市ロケーション表　(CLT)\n　・閉所ロケーション表　(SLT)\n　・炎熱ロケーション表　(HLT)\n　・冷暗ロケーション表　(FLT)\n　・部位ダメージ決定表　(DLT)\n　・モノビースト行動表　(MAT)\n　・異形アビリティー表　(SATx) (xは個数)\n　・異形アビリティー表2　(SA2Tx) (xは個数)\n　　→表１と表２の振り分けも判定\n　・指定特技(社会)表　　(TST)\n　・指定特技(頭部)表　　(THT)\n　・指定特技(腕部)表　　(TAT)\n　・指定特技(胴部)表　　(TBT)\n　・指定特技(脚部)表　　(TLT)\n　・指定特技(環境)表　　(TET)\n　・異形化表　　　　　　(MST)\n　・代償表　　　　　　　(ERT)\n　・ディフェンス遭遇表1/2/3 (DS1ET/DS2ET/DS3ET)\n　・エスケープ遭遇表1/2/3 (EE1ET/EE2ET/EE3ET)\n　・エスコート遭遇表1/2/3 (ET1ET/ET2ET/ET3ET)\n　・トラッキング遭遇表1/2/3 (TK1ET/TK2ET/TK3ET)\n・D66ダイスあり\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$check_2D6', TMP_5 = function $$check_2D6(total_n, dice_n, signOfInequality, diff, dice_cnt, dice_max, n1, n_max) {
      var $a, self = this;

      if ((($a = (signOfInequality['$=='](">="))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return ""
      };
      if ((($a = ($rb_le(dice_n, 2))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ ファンブル(モノビースト追加行動+1)"
      } else if ((($a = ($rb_ge(dice_n, 12))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ スペシャル(変調1つ回復orダメージ+1D6)"
      } else if ((($a = ($rb_ge(total_n, diff))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ 成功"
        } else {
        return " ＞ 失敗"
      };
    }, TMP_5.$$arity = 8);

    Opal.defn(self, '$rollDiceCommand', TMP_6 = function $$rollDiceCommand(command) {
      var $a, $b, self = this, string = nil, output = nil, type = nil, total_n = nil, $case = nil, isType2 = nil, count = nil;

      string = command.$upcase();
      output = "1";
      type = "";
      total_n = "";
      $case = string;if (/CLT/i['$===']($case)) {type = "都市ロケーション";
      $b = self.$hm_city_location_table(), $a = Opal.to_ary($b), output = ($a[0] == null ? nil : $a[0]), total_n = ($a[1] == null ? nil : $a[1]), $b;}else if (/SLT/i['$===']($case)) {type = "閉所ロケーション";
      $b = self.$hm_small_location_table(), $a = Opal.to_ary($b), output = ($a[0] == null ? nil : $a[0]), total_n = ($a[1] == null ? nil : $a[1]), $b;}else if (/HLT/i['$===']($case)) {type = "炎熱ロケーション";
      $b = self.$hm_hot_location_table(), $a = Opal.to_ary($b), output = ($a[0] == null ? nil : $a[0]), total_n = ($a[1] == null ? nil : $a[1]), $b;}else if (/FLT/i['$===']($case)) {type = "冷暗ロケーション";
      $b = self.$hm_freezing_location_table(), $a = Opal.to_ary($b), output = ($a[0] == null ? nil : $a[0]), total_n = ($a[1] == null ? nil : $a[1]), $b;}else if (/DLT/i['$===']($case)) {type = "部位ダメージ決定";
      $b = self.$hm_hit_location_table(), $a = Opal.to_ary($b), output = ($a[0] == null ? nil : $a[0]), total_n = ($a[1] == null ? nil : $a[1]), $b;}else if (/MAT/i['$===']($case)) {type = "モノビースト行動";
      $b = self.$hm_monobeast_action_table(), $a = Opal.to_ary($b), output = ($a[0] == null ? nil : $a[0]), total_n = ($a[1] == null ? nil : $a[1]), $b;}else if (/SA(2)?T(\d*)/i['$===']($case)) {isType2 = ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))['$nil?']()['$!']());
      count = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$to_i();
      if ((($a = (count['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        count = 1};
      type = "異形アビリティー";
      $b = self.$get_strange_ability_table_result(count, isType2), $a = Opal.to_ary($b), output = ($a[0] == null ? nil : $a[0]), total_n = ($a[1] == null ? nil : $a[1]), $b;}else if (/TST/i['$===']($case)) {type = "指定特技(社会)";
      $b = self.$hm_social_skill_table(), $a = Opal.to_ary($b), output = ($a[0] == null ? nil : $a[0]), total_n = ($a[1] == null ? nil : $a[1]), $b;}else if (/THT/i['$===']($case)) {type = "指定特技(頭部)";
      $b = self.$hm_head_skill_table(), $a = Opal.to_ary($b), output = ($a[0] == null ? nil : $a[0]), total_n = ($a[1] == null ? nil : $a[1]), $b;}else if (/TAT/i['$===']($case)) {type = "指定特技(腕部)";
      $b = self.$hm_arm_skill_table(), $a = Opal.to_ary($b), output = ($a[0] == null ? nil : $a[0]), total_n = ($a[1] == null ? nil : $a[1]), $b;}else if (/TBT/i['$===']($case)) {type = "指定特技(胴部)";
      $b = self.$hm_trunk_skill_table(), $a = Opal.to_ary($b), output = ($a[0] == null ? nil : $a[0]), total_n = ($a[1] == null ? nil : $a[1]), $b;}else if (/TLT/i['$===']($case)) {type = "指定特技(脚部)";
      $b = self.$hm_leg_skill_table(), $a = Opal.to_ary($b), output = ($a[0] == null ? nil : $a[0]), total_n = ($a[1] == null ? nil : $a[1]), $b;}else if (/TET/i['$===']($case)) {type = "指定特技(環境)";
      $b = self.$hm_environmental_skill_table(), $a = Opal.to_ary($b), output = ($a[0] == null ? nil : $a[0]), total_n = ($a[1] == null ? nil : $a[1]), $b;}else if (/ET/i['$===']($case)) {type = "遭遇";
      $b = self.$hm_encount_table(), $a = Opal.to_ary($b), output = ($a[0] == null ? nil : $a[0]), total_n = ($a[1] == null ? nil : $a[1]), $b;};
      if ((($a = (output['$==']("1"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return output};
      output = "" + (type) + "表(" + (total_n) + ") ＞ " + (output);
      return output;
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$hm_city_location_table', TMP_7 = function $$hm_city_location_table() {
      var self = this, table = nil;

      table = ["住宅街/閑静な住宅街。不意打ちに適しているため、ハンターの攻撃判定に+1の修正をつけてもよい。", "学校/夜の学校。遮蔽物が多く入り組んだ構造のため、ハンターはブロック判定によって肩代わりしたダメージを1減少してもよい。", "駅/人のいない駅。全てのキャラクターがファンブル時に砂利に突っ込んだり伝染に接触しかけることで1D6のダメージを受ける。", "高速道路/高速道路の路上。全てのキャラクターが、ファンブル時には走ってきた車に跳ねられて1D6のダメージを受ける。", "ビル屋上/高いビルの屋上。ハンターはファンブル時に屋上から落下して強制的に撤退する。命に別状はない", "繁華街/にぎやかな繁華街の裏路地。大量の人の気配が近くにあるため、モノビーストが撤退するラウンドが1ラウンド早くなる。決戦フェイズでは特に効果なし。"];
      return self.$get_table_by_1d6(table);
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$hm_small_location_table', TMP_8 = function $$hm_small_location_table() {
      var self = this, table = nil;

      table = ["地下倉庫/広々とした倉庫。探してみれば色々なものが転がっている。ハンターは戦闘開始時に好きなアイテムを一つ入手してもよい。", "地下鉄/地下鉄の線路上。全てのキャラクターが、ファンブル時にはなぜか走ってくる列車に撥ねられて1D6ダメージを受ける。", "地下道/暗いトンネル。車道や照明の落ちた地下街。ハンターは、ファンブル時にアイテムを一つランダムに失くしてしまう。", "廃病院/危険な廃物がたくさん落ちているため、誰もここで戦うのは好きではない。キャラクター全員の【モラル】を3点減少してから戦闘を開始する。", "下水道/人が２人並べるくらいの幅の下水道。メンテナンス用の明かりしかなく、非常に視界が悪いため、ハンターの攻撃判定に-1の修正がつく。", "都市の底/都市の全てのゴミが流れ着く場所。広い空洞にゴミが敷き詰められている。この敵対的な環境では、ハンターの攻撃判定に-1の修正がつく。さらにハンターは攻撃失敗時に2ダメージを受ける。"];
      return self.$get_table_by_1d6(table);
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$hm_hot_location_table', TMP_9 = function $$hm_hot_location_table() {
      var self = this, table = nil;

      table = ["温室/植物が栽培されている熱く湿った場所。生命に満ち溢れた様子は、戦闘開始時にハンターの【モラル】を1点増加する。", "調理場/調理器具があちこちに放置された、アクションには多大なリスクをともなう場所。全てのキャラクターは、ファンブル時に良くない場所に手をついたり刃物のラックをひっくり返して1D6ダメージを受ける。", "ボイラー室/モノビーストは蒸気機関の周囲を好む傾向があるが、ここはうるさくて気が散るうえに暑い。全てのキャラクターは、感情属性が「怒り」の場合、全てのアビリティの反動が1増加する。", "機関室/何らかの工場。入り組みすぎて周りを見通せないうえ、配置がわからず出たとこ勝負を強いられる。キャラクター全員が戦闘開始時に「妨害」の変調を発動する。", "火事場/事故現場なのかモノビーストの仕業か、あたりは激しく燃え盛っている。ハンターはファンブル時に「炎上」の変調を発動する。", "製鉄所/無人ながら稼働中の製鉄所。安全対策が不十分で、溶けた金属の周囲まで近づくことが可能だ。ハンターは毎ラウンド終了時に《耐熱》で行為判定をし、これに失敗すると「炎上」の変調を発動する。"];
      return self.$get_table_by_1d6(table);
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$hm_freezing_location_table', TMP_10 = function $$hm_freezing_location_table() {
      var self = this, table = nil;

      table = ["冷凍保管室/食品が氷漬けにされている場所。ここではモノビーストは氷に覆われてしまう。モノビーストは戦闘開始時に「捕縛」の変調を発動する。", "墓地/死んだ人々が眠る場所。ここで激しいアクションを行うことは冒涜的だ。全てのキャラクターは感情属性が恐怖の場合、全てのアビリティの反動が１増加する。", "魚市場/発泡スチロールの箱に鮮魚と氷が詰まり、コンクリートの床は濡れていて滑りやすい。ハンターはファンブル時に転んで1D6ダメージを受ける。", "博物館/すっかり静まり返った博物館で、モノビーストは動物の剥製の間に潜んでいる。紛らわしい展示物だらけであるため、ハンターは攻撃判定に-1の修正を受ける。", "空き地/寒風吹きすさぶ空き地。長くいると凍えてしまいそうだ。ハンターはファンブル時に身体がかじかみ、「重傷」の変調を発動する。", "氷室/氷で満たされた洞窟。こんな場所が都市にあったとは信じがたいが、とにかくひどく寒い。ハンターは毎ラウンド終了時に《耐寒》で判定し、失敗すると「重傷」の変調を発動する。"];
      return self.$get_table_by_1d6(table);
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$hm_encount_table', TMP_11 = function $$hm_encount_table() {
      var self = this, table = nil;

      table = ["獲物/恐怖/あなたはモノビーストの獲物として追い回される。満月の夜でないと傷を負わせることができない怪物相手に、あなたは逃げ回るしかない。", "暗闇/恐怖/あの獣は暗闇の中から現れ、暗闇の中へ消えていった。どんなに振り払おうとしても、あの恐ろしい姿の記憶から逃れられない。", "依頼/怒り/あなたはモノビーストの被害者の関係者、あるいはハンターや魔術師の組織から、モノビーストを倒す依頼を受けた。", "気配/恐怖/街の気配がどこかおかしい。視線を感じたり、物音が聞こえたり・・・だが、獣の姿を捉えることはできない。漠然とした恐怖があなたの心をむしばむ。", "現場/怒り/あなたはモノビーストが獲物を捕食した現場を発見した。派手な血の跡が目に焼きつく。こんなことをする奴を生かしてはおけない。", "賭博/怒り/あなたの今回の獲物は、最近ハンターの間で話題になっているモノビーストだ。次の満月の夜にあいつを倒せるか、あなたは他のハンターと賭けをした。"];
      return self.$get_table_by_1d6(table);
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$hm_monobeast_action_table', TMP_12 = function $$hm_monobeast_action_table() {
      var self = this, table = nil;

      table = ["社会/モノビーストは時間をかけて逃げ続けることで、ダメージを回復しようとしているようだ。部位ダメージを自由に一つ回復する。部位ダメージを受けていない場合、【モラル】が1D6回復する。", "頭部/モノビーストはハンターを撒こうとしている。次の戦闘が日暮れ、もしくは真夜中である場合、モノビーストは１ラウンド少ないラウンドで撤退する。次の戦闘が夜明けである場合、【モラル】が2D6増加する。", "腕部/モノビーストは若い犠牲者を選んで捕食しようとしている。どうやら力を増そうとしているらしい。セッション終了までモノビーストの攻撃によるダメージは+1の修正がつく。", "胴部/モノビーストは別のハンターと遭遇し、それを食べて新しいアビリティを手に入れる！　ランダムに異形アビリティを一つ決定し、修得する。", "脚部/モノビーストはハンターを特定の場所に誘導しているようだ。ロケーション表を振り、次の戦闘のロケーションを変更する。そのロケーションで次の戦闘が始まった場合、モノビーストは最初のラウンドに追加行動を１回得る。", "環境/モノビーストは移動中に人間の団体と遭遇し、食い散らかす。たらふく食ったモノビーストは【モラル】を3D6点増加させる"];
      return self.$get_table_by_1d6(table);
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$hm_hit_location_table', TMP_13 = function $$hm_hit_location_table() {
      var self = this, table = nil;

      table = ["脳", "利き腕", "利き脚", "消化器", "感覚器", "攻撃したキャラクターの任意の部分", "口", "呼吸器", "逆脚", "逆腕", "心臓"];
      return self.$get_table_by_2d6(table);
    }, TMP_13.$$arity = 0);

    Opal.defn(self, '$getStrangeAbilityTable1', TMP_14 = function $$getStrangeAbilityTable1() {
      var self = this;

      return nil;
    }, TMP_14.$$arity = 0);

    Opal.defn(self, '$get_strange_ability_table_result', TMP_16 = function $$get_strange_ability_table_result(count, isType2) {
      var $a, $b, TMP_15, self = this, output = nil, dice = nil, table1 = nil, table2 = nil;

      output = "";
      dice = "";
      table1 = self.$get_strange_ability_table_1();
      table2 = self.$get_strange_ability_table_2();
      ($a = ($b = count).$times, $a.$$p = (TMP_15 = function(i){var self = TMP_15.$$s || this, $c, $d, table = nil, number = nil, index = nil, ability = nil, indexText = nil;
if (i == null) i = nil;
      if ((($c = (i['$!='](0))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          output = $rb_plus(output, "/");
          dice = $rb_plus(dice, ",");};
        table = table1;
        if ((($c = (isType2)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          $d = self.$roll(1, 6), $c = Opal.to_ary($d), number = ($c[0] == null ? nil : $c[0]), $d;
          index = ((function() {if ((number['$%'](2))['$=='](1)) {
            return 0
            } else {
            return 1
          }; return nil; })());
          table = [table1, table2]['$[]'](index);
          dice = $rb_plus(dice, "" + (number) + "-");
          output = $rb_plus(output, "[表" + ($rb_plus(index, 1)) + "]");};
        $d = self.$get_table_by_d66(table), $c = Opal.to_ary($d), ability = ($c[0] == null ? nil : $c[0]), indexText = ($c[1] == null ? nil : $c[1]), $d;
        if ((($c = (ability['$==']("1"))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return nil;};
        output = $rb_plus(output, "" + (ability));
        return dice = $rb_plus(dice, indexText);}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15), $a).call($b);
      if ((($a = (output['$empty?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ["1", dice]};
      return [output, dice];
    }, TMP_16.$$arity = 2);

    Opal.defn(self, '$get_strange_ability_table_1', TMP_17 = function $$get_strange_ability_table_1() {
      var self = this, table = nil;

      table = ["大牙", "大鎌", "針山", "大鋏", "吸血根", "巨大化", "瘴気", "火炎放射", "鑢", "ドリル", "絶叫", "粘液噴射", "潤滑液", "皮膚装甲", "器官生成", "翼", "四肢複製", "分解", "異言", "閃光", "冷気", "悪臭", "化膿歯", "気嚢", "触手", "肉瘤", "暗視", "邪視", "超振動", "酸分泌", "結晶化", "裏腹", "融合", "嘔吐", "腐敗", "変色"];
      return table;
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$get_strange_ability_table_2', TMP_18 = function $$get_strange_ability_table_2() {
      var self = this, table = nil;

      table = ["電撃", "障壁", "追加肢", "破裂球", "死病", "ソナー", "未来視", "寄生体", "再構築", "分身", "大角", "鉄塊", "硬質化", "生命力吸収", "鬼火", "金縛り", "排出口", "金属化", "鋼鱗", "神経接合", "光翼", "環境適応", "消化剤", "プロペラ", "血栓", "骨槍", "回転", "怒髪", "煙幕", "脂肪層", "逆棘", "偽頭", "赤化", "発条", "凶運", "巨砲"];
      return table;
    }, TMP_18.$$arity = 0);

    Opal.defn(self, '$hm_social_skill_table', TMP_19 = function $$hm_social_skill_table() {
      var self = this, table = nil;

      table = ["怯える", "考えない", "話す", "黙る", "売る", "伝える", "作る", "憶える", "脅す", "騙す", "怒る"];
      return self.$get_table_by_2d6(table);
    }, TMP_19.$$arity = 0);

    Opal.defn(self, '$hm_head_skill_table', TMP_20 = function $$hm_head_skill_table() {
      var self = this, table = nil;

      table = ["聴く", "感覚器", "見つける", "反応", "閃く", "脳", "考える", "予感", "叫ぶ", "口", "噛む"];
      return self.$get_table_by_2d6(table);
    }, TMP_20.$$arity = 0);

    Opal.defn(self, '$hm_arm_skill_table', TMP_21 = function $$hm_arm_skill_table() {
      var self = this, table = nil;

      table = ["操作", "殴る", "斬る", "利き腕", "撃つ", "掴む", "投げる", "逆腕", "刺す", "振る", "締める"];
      return self.$get_table_by_2d6(table);
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$hm_trunk_skill_table', TMP_22 = function $$hm_trunk_skill_table() {
      var self = this, table = nil;

      table = ["塞ぐ", "呼吸器", "止める", "動かない", "受ける", "心臓", "逸らす", "かわす", "落ちる", "消化器", "耐える"];
      return self.$get_table_by_2d6(table);
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$hm_leg_skill_table', TMP_23 = function $$hm_leg_skill_table() {
      var self = this, table = nil;

      table = ["迫る", "走る", "蹴る", "利き脚", "跳ぶ", "仕掛ける", "しゃがむ", "逆脚", "滑る", "踏む", "歩く"];
      return self.$get_table_by_2d6(table);
    }, TMP_23.$$arity = 0);

    return (Opal.defn(self, '$hm_environmental_skill_table', TMP_24 = function $$hm_environmental_skill_table() {
      var self = this, table = nil;

      table = ["耐熱", "休む", "待つ", "捕らえる", "隠れる", "追う", "バランス", "現れる", "追い込む", "休まない", "耐寒"];
      return self.$get_table_by_2d6(table);
    }, TMP_24.$$arity = 0), nil) && 'hm_environmental_skill_table';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
