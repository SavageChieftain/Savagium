/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$setPrefixes', '$gsub', '$nechronica_check', '$==', '$>=', '$<=', '$>', '$+', '$debug', '$=~', '$to_i', '$parren_killer', '$roll', '$<', '$collect', '$split', '$times', '$[]=', '$[]', '$length', '$join', '$check_suc', '$getHitLocation', '$!=', '$-']);
  return (function($base, $super) {
    function $Nechronica(){};
    var self = $Nechronica = $klass($base, $super, 'Nechronica', $Nechronica);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_9, TMP_10, TMP_11, TMP_14, TMP_15;

    def.nick_t = nil;
    self.$setPrefixes(["(\\d+NC|\\d+NA)"]);

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      self.sendMode = 2;
      self.sortType = 3;
      return self.defaultSuccessTarget = "6";
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "ネクロニカ";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "Nechronica";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "・判定　(nNC+m)\n　ダイス数n、修正値mで判定ロールを行います。\n　ダイス数が2以上の時のパーツ破損数も表示します。\n・攻撃判定　(nNA+m)\n　ダイス数n、修正値mで攻撃判定ロールを行います。\n　命中部位とダイス数が2以上の時のパーツ破損数も表示します。\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$changeText', TMP_9 = function $$changeText(string) {
      var $a, $b, TMP_5, $c, TMP_6, $d, TMP_7, $e, TMP_8, self = this;

      string = ($a = ($b = string).$gsub, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $c;

      return "" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))) + "R10" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](3))) + "[0]"}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b, /(\d+)NC(10)?([\+\-][\+\-\d]+)/i);
      string = ($a = ($c = string).$gsub, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $d;

      return "" + ((($d = $gvars['~']) === nil ? nil : $d['$[]'](1))) + "R10[0]"}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($c, /(\d+)NC(10)?/i);
      string = ($a = ($d = string).$gsub, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $e;

      return "" + ((($e = $gvars['~']) === nil ? nil : $e['$[]'](1))) + "R10" + ((($e = $gvars['~']) === nil ? nil : $e['$[]'](3))) + "[1]"}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($d, /(\d+)NA(10)?([\+\-][\+\-\d]+)/i);
      string = ($a = ($e = string).$gsub, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $f;

      return "" + ((($f = $gvars['~']) === nil ? nil : $f['$[]'](1))) + "R10[1]"}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($e, /(\d+)NA(10)?/i);
      return string;
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$dice_command_xRn', TMP_10 = function $$dice_command_xRn(string, nick_e) {
      var self = this;

      self.nick_e = nick_e;
      return self.$nechronica_check(string);
    }, TMP_10.$$arity = 2);

    Opal.defn(self, '$check_nD10', TMP_11 = function $$check_nD10(total_n, dice_n, signOfInequality, diff, dice_cnt, dice_max, n1, n_max) {
      var $a, self = this, result = nil;

      if ((($a = (signOfInequality['$=='](">="))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return ""
      };
      if ((($a = ($rb_ge(total_n, 11))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ 大成功"};
      if ((($a = ($rb_ge(total_n, diff))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ 成功"};
      if ((($a = ($rb_le(n1, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " ＞ 失敗"};
      result = " ＞ 大失敗";
      if ((($a = ($rb_gt(dice_cnt, 1))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, " ＞ 使用パーツ全損")};
      return result;
    }, TMP_11.$$arity = 8);

    Opal.defn(self, '$nechronica_check', TMP_14 = function $$nechronica_check(string) {
      var $a, $b, TMP_12, $c, TMP_13, self = this, output = nil, signOfInequality = nil, dice_n = nil, modText = nil, mod = nil, battleMode = nil, isBattleMode = nil, diff = nil, total_n = nil, _ = nil, dice_str = nil, n1 = nil, cnt_max = nil, n_max = nil, dice = nil, diceMax = nil, hit_loc = nil;

      output = "1";
      self.$debug("nechronica_check string", string);
      if ((($a = (/(^|\s)S?((\d+)[rR]10([\+\-\d]+)?(\[(\d+)\])?)(\s|$)/i['$=~'](string))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$debug("nechronica_check unmuched");
        return output;
      };
      string = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2));
      signOfInequality = ">=";
      dice_n = 1;
      if ((($a = ((($b = $gvars['~']) === nil ? nil : $b['$[]'](3)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        dice_n = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3)).$to_i()};
      modText = (($a = $gvars['~']) === nil ? nil : $a['$[]'](4));
      mod = self.$parren_killer("(0" + (modText) + ")").$to_i();
      battleMode = (($a = $gvars['~']) === nil ? nil : $a['$[]'](6)).$to_i();
      isBattleMode = (battleMode['$=='](1));
      self.$debug("nechronica_check string", string);
      self.$debug("isBattleMode", isBattleMode);
      diff = 6;
      total_n = 0;
      $b = self.$roll(dice_n, 10, 1), $a = Opal.to_ary($b), _ = ($a[0] == null ? nil : $a[0]), dice_str = ($a[1] == null ? nil : $a[1]), n1 = ($a[2] == null ? nil : $a[2]), cnt_max = ($a[3] == null ? nil : $a[3]), n_max = ($a[4] == null ? nil : $a[4]), $b;
      total_n = $rb_plus(n_max, mod);
      output = "" + (self.nick_t) + ": (" + (string) + ") ＞ [" + (dice_str) + "]";
      if ((($a = ($rb_lt(mod, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = $rb_plus(output, "" + (mod))
      } else if ((($a = ($rb_gt(mod, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = $rb_plus(output, "+" + (mod))};
      n1 = 0;
      cnt_max = 0;
      dice = ($a = ($b = dice_str.$split(/,/)).$collect, $a.$$p = (TMP_12 = function(i){var self = TMP_12.$$s || this;
if (i == null) i = nil;
      return i.$to_i()}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $a).call($b);
      ($a = ($c = dice.$length()).$times, $a.$$p = (TMP_13 = function(i){var self = TMP_13.$$s || this, $d, $e;
if (i == null) i = nil;
      ($d = i, $e = dice, $e['$[]=']($d, $rb_plus($e['$[]']($d), mod)));
        if ((($d = ($rb_le(dice['$[]'](i), 1))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          n1 = $rb_plus(n1, 1)};
        if ((($d = ($rb_ge(dice['$[]'](i), 10))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return cnt_max = $rb_plus(cnt_max, 1)
          } else {
          return nil
        };}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $a).call($c);
      dice_str = dice.$join(",");
      output = $rb_plus(output, "  ＞ " + (total_n) + "[" + (dice_str) + "]");
      diceMax = 10;
      output = $rb_plus(output, self.$check_suc(total_n, n_max, signOfInequality, diff, dice_n, diceMax, n1, n_max));
      self.$debug("dice_n, n1, total_n diff", dice_n, n1, total_n, diff);
      if ((($a = (isBattleMode)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        hit_loc = self.$getHitLocation(total_n);
        if ((($a = (hit_loc['$!=']("1"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          output = $rb_plus(output, " ＞ " + (hit_loc))};};
      return output;
    }, TMP_14.$$arity = 1);

    return (Opal.defn(self, '$getHitLocation', TMP_15 = function $$getHitLocation(dice) {
      var $a, self = this, output = nil, table = nil, index = nil, addDamage = nil;

      output = "1";
      self.$debug("getHitLocation dice", dice);
      if ((($a = ($rb_le(dice, 5))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return output};
      output = "";
      table = ["防御側任意", "脚（なければ攻撃側任意）", "胴（なければ攻撃側任意）", "腕（なければ攻撃側任意）", "頭（なければ攻撃側任意）", "攻撃側任意"];
      index = $rb_minus(dice, 6);
      addDamage = "";
      if ((($a = ($rb_gt(dice, 10))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        index = 5;
        addDamage = "(追加ダメージ" + ($rb_minus(dice, 10)) + ")";};
      output = $rb_plus(table['$[]'](index), addDamage);
      return output;
    }, TMP_15.$$arity = 1), nil) && 'getHitLocation';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
